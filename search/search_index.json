{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome! \u00b6 This is the official modding documentation for Voxel Tycoon \u2014 a tycoon strategy game about transportation, factories, and mining infinite voxel landscapes. Work in progress The documentation is - obviously - work in progress. Please feel free to contribute! Getting started \u00b6 This section contains official and community guides helping you to get started with different aspects of Voxel Tycoon modding. Explore the guides \u2794 Assets \u00b6 List of all asset types supported by the game (work in progress). Explore the asset reference \u2794 Scripting reference \u00b6 List of Voxel Tycoon scripting APIs (work in progress). Explore the scripting reference \u2794 Other resources \u00b6 Discord Server (look for #modding channel) Suggestion tracker Bug tracker Voxel Tycoon changelog Samples source code Official website","title":"Home"},{"location":"#welcome","text":"This is the official modding documentation for Voxel Tycoon \u2014 a tycoon strategy game about transportation, factories, and mining infinite voxel landscapes. Work in progress The documentation is - obviously - work in progress. Please feel free to contribute!","title":"Welcome!"},{"location":"#getting-started","text":"This section contains official and community guides helping you to get started with different aspects of Voxel Tycoon modding. Explore the guides \u2794","title":"Getting started"},{"location":"#assets","text":"List of all asset types supported by the game (work in progress). Explore the asset reference \u2794","title":"Assets"},{"location":"#scripting-reference","text":"List of Voxel Tycoon scripting APIs (work in progress). Explore the scripting reference \u2794","title":"Scripting reference"},{"location":"#other-resources","text":"Discord Server (look for #modding channel) Suggestion tracker Bug tracker Voxel Tycoon changelog Samples source code Official website","title":"Other resources"},{"location":"assets/","text":"Assets are content and configuration files to be processed by the game. Assets reference (work in progress) \u00b6 Asset Description .dll Scripting mod library .patch Allows to apply changes to assets located in other mods","title":"Introduction"},{"location":"assets/#assets-reference-work-in-progress","text":"Asset Description .dll Scripting mod library .patch Allows to apply changes to assets located in other mods","title":"Assets reference (work in progress)"},{"location":"assets/dll-asset/","text":".dll asset \u00b6 Description \u00b6 Since 0.79 you can create not only content-based mods but also mods that provide new behaviors and logic, or modify already existent ones. We call them script mods . How it works \u00b6 .dll asset is treated by the game as any other mod asset, so as you placed it in your mod folder, the game will found and load it. However, the process of creating the DLL file itself differs greatly from the other assets. Core concepts \u00b6 The DLL file you want to get in the end essentially is a .NET class library targeting .NET Standard 2.0 (or .NET 4.x) and containing one or more implementations of the Mod interface provided by Voxel Tycoon API. In order to access Voxel Tycoon and Unity APIs you need to reference Assembly-CSharp.dll and UnityEngine.CoreModule.dll libraries that can be found in VoxelTycoon_Data/Managed directory inside the game folder. Also, you might want to reference UnityEngine.UI.dll if you want to work with the game UI. After you compile your library, the resulted .dll file is ready to be put into your mod directory and loaded by the game. Step-by-step tutorial \u00b6 In order to help you start working with the concepts described above, we compiled a simple step-by-step tutorial which will guide you through the process of creating your first script mod for Voxel Tycoon. FAQ \u00b6 What can be done with the script mods? \u00b6 Voxel Tycoon works on top of Unity, and script mods have full access to all the features that Unity runtime provides, as well as Voxel Tycoon APIs. In other words, you can do anything that you can normally do with Unity runtime at least. In what language mods can be written? \u00b6 Since the game is written in C# and works on top of Unity (which primary language is also C#), most examples, tutorials, and docs you may find will use this language. That being said, C# recommended language of choice for the script mods . C# is a modern, constantly evolving language that provides a huge variety of features and flexibility. However, any .NET language will work. Where's API documentation? \u00b6 The documentation for Voxel Tycoon API is being created here . Still, we urge you to start creating script mods right now , so we can build an extendable, flexible, and well-featured platform together with you. Just as you feel that you need any new APIs, events, callbacks, etc - or modifications of existing ones - do not hesitate to let us know by creating an issue on suggestion tracker . Also, feel free to chat with us and community directly on our Discord Server . We are committed to update and extend the modding APIs along with your requests as soon as possible. Meanwhile, we suggest you to use decompilers such as dnSpy or JetBrains dotPeek to dig into the game's code and start exploring the possibilities for modification. Also, we've hosted a repository with the source code of our official mods and samples.","title":".dll asset"},{"location":"assets/dll-asset/#dll-asset","text":"","title":".dll asset"},{"location":"assets/dll-asset/#description","text":"Since 0.79 you can create not only content-based mods but also mods that provide new behaviors and logic, or modify already existent ones. We call them script mods .","title":"Description"},{"location":"assets/dll-asset/#how-it-works","text":".dll asset is treated by the game as any other mod asset, so as you placed it in your mod folder, the game will found and load it. However, the process of creating the DLL file itself differs greatly from the other assets.","title":"How it works"},{"location":"assets/dll-asset/#core-concepts","text":"The DLL file you want to get in the end essentially is a .NET class library targeting .NET Standard 2.0 (or .NET 4.x) and containing one or more implementations of the Mod interface provided by Voxel Tycoon API. In order to access Voxel Tycoon and Unity APIs you need to reference Assembly-CSharp.dll and UnityEngine.CoreModule.dll libraries that can be found in VoxelTycoon_Data/Managed directory inside the game folder. Also, you might want to reference UnityEngine.UI.dll if you want to work with the game UI. After you compile your library, the resulted .dll file is ready to be put into your mod directory and loaded by the game.","title":"Core concepts"},{"location":"assets/dll-asset/#step-by-step-tutorial","text":"In order to help you start working with the concepts described above, we compiled a simple step-by-step tutorial which will guide you through the process of creating your first script mod for Voxel Tycoon.","title":"Step-by-step tutorial"},{"location":"assets/dll-asset/#faq","text":"","title":"FAQ"},{"location":"assets/dll-asset/#what-can-be-done-with-the-script-mods","text":"Voxel Tycoon works on top of Unity, and script mods have full access to all the features that Unity runtime provides, as well as Voxel Tycoon APIs. In other words, you can do anything that you can normally do with Unity runtime at least.","title":"What can be done with the script mods?"},{"location":"assets/dll-asset/#in-what-language-mods-can-be-written","text":"Since the game is written in C# and works on top of Unity (which primary language is also C#), most examples, tutorials, and docs you may find will use this language. That being said, C# recommended language of choice for the script mods . C# is a modern, constantly evolving language that provides a huge variety of features and flexibility. However, any .NET language will work.","title":"In what language mods can be written?"},{"location":"assets/dll-asset/#wheres-api-documentation","text":"The documentation for Voxel Tycoon API is being created here . Still, we urge you to start creating script mods right now , so we can build an extendable, flexible, and well-featured platform together with you. Just as you feel that you need any new APIs, events, callbacks, etc - or modifications of existing ones - do not hesitate to let us know by creating an issue on suggestion tracker . Also, feel free to chat with us and community directly on our Discord Server . We are committed to update and extend the modding APIs along with your requests as soon as possible. Meanwhile, we suggest you to use decompilers such as dnSpy or JetBrains dotPeek to dig into the game's code and start exploring the possibilities for modification. Also, we've hosted a repository with the source code of our official mods and samples.","title":"Where's API documentation?"},{"location":"assets/patch-asset/","text":".patch asset \u00b6 Description \u00b6 This type of asset allows you to apply changes to assets located in any other mod, including the base game content. How it works \u00b6 Every .patch asset consists of a list of commands . Each command defines which operation should be applied to what asset, and also specifies arguments specific to that command. An example patch that adds custom made peyotes to the desert biome from the base game: { \"Commands\" : [ { \"Command\" : \"Add\" , \"TargetAssetUri\" : \"base/desert.biome\" , \"Path\" : \"Plants\" , \"Values\" : [ { \"Uri\" : \"plants-o-plenty/peyote.plant\" , \"Probability\" : 0.02 } ] } ] } Available commands \u00b6 Add \u00b6 Adds provided values to a collection at the path. Argument Description TargetAssetUri : string The URI of the target asset. Path : string JsonPath to a collection (or collections) where values should be added. Values : array Values to add. Set \u00b6 Sets provided value to a property at the path. Argument Description TargetAssetUri : string The URI of the target asset. Path : string JsonPath to a property (or properties) which value should be set. Value : any Value to be set. Remove \u00b6 Removes value at the path. Argument Description TargetAssetUri : string The URI of the target asset. Path : string JsonPath to a value (or values) which should be removed. Merge \u00b6 Merges provided object with an object at the path (as described here ). Argument Description TargetAssetUri : string The URI of the target asset. Path : string JsonPath to an object (or objects) where provided object should be merged. Value : object Object to be merged. ArrayHandling : string One of the values described here . Optional (default: \"Concat\" ) NullValueHandling : string One of the values described here . Optional (default: \"Merge\" ) Optional flag \u00b6 Sometimes, you might want to alter assets which presence is not known in advance. Luckily, since 0.78 , each command supports the new Optional flag. When set to true , in case the target asset was not found, a command will be just skipped without failing. Debugging \u00b6 You can actually see how target assets look after all patches are applied to them. To do so, open the Settings window while holding SHIFT , then navigate to Misc tab and toggle Write patched assets setting (at the bottom). Now, every time you load or start a new game with your mod enabled, the game will write target assets in their final form (with all patches applied) to <original_filename>.patched.json . Don't forget to remove those files before publishing your mod, and disable this option after debugging is completed to avoid the additional performance cost. Advanced path examples \u00b6 Pro Tip You can use online JSONPath evaluators like https://jsonpath.com/ to test complex pathes. Find a property of an object in an array by index: ItemsPerDay[0].CountMultiplier Find a property of all objects in an array: ItemsPerDay[*].CountMultiplier Find a property of an object in an array which has specific property value: ItemsPerDay[?(@.Uri=='base/tv.item')].CountMultiplier ItemsPerDay[?(@.CountMultiplier>0.5)].CountMultiplier","title":".patch asset"},{"location":"assets/patch-asset/#patch-asset","text":"","title":".patch asset"},{"location":"assets/patch-asset/#description","text":"This type of asset allows you to apply changes to assets located in any other mod, including the base game content.","title":"Description"},{"location":"assets/patch-asset/#how-it-works","text":"Every .patch asset consists of a list of commands . Each command defines which operation should be applied to what asset, and also specifies arguments specific to that command. An example patch that adds custom made peyotes to the desert biome from the base game: { \"Commands\" : [ { \"Command\" : \"Add\" , \"TargetAssetUri\" : \"base/desert.biome\" , \"Path\" : \"Plants\" , \"Values\" : [ { \"Uri\" : \"plants-o-plenty/peyote.plant\" , \"Probability\" : 0.02 } ] } ] }","title":"How it works"},{"location":"assets/patch-asset/#available-commands","text":"","title":"Available commands"},{"location":"assets/patch-asset/#add","text":"Adds provided values to a collection at the path. Argument Description TargetAssetUri : string The URI of the target asset. Path : string JsonPath to a collection (or collections) where values should be added. Values : array Values to add.","title":"Add"},{"location":"assets/patch-asset/#set","text":"Sets provided value to a property at the path. Argument Description TargetAssetUri : string The URI of the target asset. Path : string JsonPath to a property (or properties) which value should be set. Value : any Value to be set.","title":"Set"},{"location":"assets/patch-asset/#remove","text":"Removes value at the path. Argument Description TargetAssetUri : string The URI of the target asset. Path : string JsonPath to a value (or values) which should be removed.","title":"Remove"},{"location":"assets/patch-asset/#merge","text":"Merges provided object with an object at the path (as described here ). Argument Description TargetAssetUri : string The URI of the target asset. Path : string JsonPath to an object (or objects) where provided object should be merged. Value : object Object to be merged. ArrayHandling : string One of the values described here . Optional (default: \"Concat\" ) NullValueHandling : string One of the values described here . Optional (default: \"Merge\" )","title":"Merge"},{"location":"assets/patch-asset/#optional-flag","text":"Sometimes, you might want to alter assets which presence is not known in advance. Luckily, since 0.78 , each command supports the new Optional flag. When set to true , in case the target asset was not found, a command will be just skipped without failing.","title":"Optional flag"},{"location":"assets/patch-asset/#debugging","text":"You can actually see how target assets look after all patches are applied to them. To do so, open the Settings window while holding SHIFT , then navigate to Misc tab and toggle Write patched assets setting (at the bottom). Now, every time you load or start a new game with your mod enabled, the game will write target assets in their final form (with all patches applied) to <original_filename>.patched.json . Don't forget to remove those files before publishing your mod, and disable this option after debugging is completed to avoid the additional performance cost.","title":"Debugging"},{"location":"assets/patch-asset/#advanced-path-examples","text":"Pro Tip You can use online JSONPath evaluators like https://jsonpath.com/ to test complex pathes. Find a property of an object in an array by index: ItemsPerDay[0].CountMultiplier Find a property of all objects in an array: ItemsPerDay[*].CountMultiplier Find a property of an object in an array which has specific property value: ItemsPerDay[?(@.Uri=='base/tv.item')].CountMultiplier ItemsPerDay[?(@.CountMultiplier>0.5)].CountMultiplier","title":"Advanced path examples"},{"location":"guides/basics/","text":"There're two ways to mod Voxel Tycoon experience: Content mods \u00b6 Content mod is a set of configuration files, models, and other content which is processed by the game. The game should know how to process these files, so content mods always use already existing behaviours and mechanics provided by the game. Getting started with content mods \u2794 Script mods \u00b6 Script mod is a full-featured program. Contrary to content mods, you can create new behaviours and mechanics with script mods, as well as extending or modifing existing ones. Getting started with script mods \u2794","title":"Introduction"},{"location":"guides/basics/#content-mods","text":"Content mod is a set of configuration files, models, and other content which is processed by the game. The game should know how to process these files, so content mods always use already existing behaviours and mechanics provided by the game. Getting started with content mods \u2794","title":"Content mods"},{"location":"guides/basics/#script-mods","text":"Script mod is a full-featured program. Contrary to content mods, you can create new behaviours and mechanics with script mods, as well as extending or modifing existing ones. Getting started with script mods \u2794","title":"Script mods"},{"location":"guides/basics/asset-uri/","text":"Asset URI \u00b6 Asset URI is a unique identifier of the asset. It, in particular, used to reference one asset from another. URIs are automatically inferred from mod pack directory and asset file names. Structure \u00b6 It always has the next structure: <modpack>/<asset_name>.<asset_extension> . For example, base/tree.plant , your_first_mod/house_2.obj , or base/desert.biome . File hierarchy \u00b6 The actual file hierarchy in a mod pack has no effect on the produced URI. Eg. it doesn't matter if target asset is located at Content/base/desert.biome or Content/base/biomes/desert.biome , the result URI will be the same: base/desert.biome . This effectively means that you can't have two assets with the same file names in one mod pack. URIs are always lowercased Even if the target asset has a non-lowercased name (eg. TeslaModelS3.spaceship in mod pack ElonMusk ) its URI still will be elonmusk/teslamodels3.spaceship . ElonMusk/TeslaModelS3.spaceship URI will not work.","title":"Asset URI"},{"location":"guides/basics/asset-uri/#asset-uri","text":"Asset URI is a unique identifier of the asset. It, in particular, used to reference one asset from another. URIs are automatically inferred from mod pack directory and asset file names.","title":"Asset URI"},{"location":"guides/basics/asset-uri/#structure","text":"It always has the next structure: <modpack>/<asset_name>.<asset_extension> . For example, base/tree.plant , your_first_mod/house_2.obj , or base/desert.biome .","title":"Structure"},{"location":"guides/basics/asset-uri/#file-hierarchy","text":"The actual file hierarchy in a mod pack has no effect on the produced URI. Eg. it doesn't matter if target asset is located at Content/base/desert.biome or Content/base/biomes/desert.biome , the result URI will be the same: base/desert.biome . This effectively means that you can't have two assets with the same file names in one mod pack. URIs are always lowercased Even if the target asset has a non-lowercased name (eg. TeslaModelS3.spaceship in mod pack ElonMusk ) its URI still will be elonmusk/teslamodels3.spaceship . ElonMusk/TeslaModelS3.spaceship URI will not work.","title":"File hierarchy"},{"location":"guides/basics/how-to-publish-your-mod/","text":"How to publish your mod \u00b6 Obsolete This guide is for versions prior 0.85 . New guide is coming soon. Introduction \u00b6 This step-by-step guide is intended for mod creators who want to feature their creations on the in-game Mod Gallery. Like this: Note Current implementation is temporary. After the release of the game on Steam, we will incorporate Steam Workshop support, so the publishing process may change. Obtain credentials \u00b6 If you want to become a publisher, you should obtain credentials so our servers can identify you as an Author. We do not have a user interface for registration at the moment, so please contact @devs on our Discord server . EULA Please ensure that you have read and agreed with our EULA before publishing mods. You will receive an identity.json file - this is your key to publishing access. Put the file into the root of your Content/ folder. Next time the game runs, it will know that you are an Author. Important Do not share identity file with anyone. If you do, any person that has it can publish, update or remove your mods in the Gallery. Prepare mod for publishing \u00b6 Add preview image \u00b6 Take a screenshot of your mod in action, and save it as preview.png . Drop the image into your mod's root folder. It should be square and its dimensions should be at least 512x512 pixels. Set custom title and description \u00b6 Create a new .txt file, rename it to mod.json , and place it in your mod's root folder. Its contents should be set up as follows: { \"Title\" : \"My awesome mod\" , \"Description\" : \"This mod contains some cool stuff!\" } Publish, update, and unpublish \u00b6 Just click on your mod in the Installed tab, and choose the appropriate action. Note You can publish only mods that are not tracked as installed , i.e. was not downloaded from the gallery but manually placed to Content/ by you. If you are updating a mod that is already published, users that have it installed will see that an update is available for it. Limits \u00b6 To prevent our servers from being completely filled with content, we're temporarily restricting how many packs users can publish. Your limit can be seen at https://voxeltycoon-mods.herokuapp.com/limits?uid= your_secret_key , where \"your_secret_key\" is the one stored in your specific identity.json file.","title":"How to publish your mod"},{"location":"guides/basics/how-to-publish-your-mod/#how-to-publish-your-mod","text":"Obsolete This guide is for versions prior 0.85 . New guide is coming soon.","title":"How to publish your mod"},{"location":"guides/basics/how-to-publish-your-mod/#introduction","text":"This step-by-step guide is intended for mod creators who want to feature their creations on the in-game Mod Gallery. Like this: Note Current implementation is temporary. After the release of the game on Steam, we will incorporate Steam Workshop support, so the publishing process may change.","title":"Introduction"},{"location":"guides/basics/how-to-publish-your-mod/#obtain-credentials","text":"If you want to become a publisher, you should obtain credentials so our servers can identify you as an Author. We do not have a user interface for registration at the moment, so please contact @devs on our Discord server . EULA Please ensure that you have read and agreed with our EULA before publishing mods. You will receive an identity.json file - this is your key to publishing access. Put the file into the root of your Content/ folder. Next time the game runs, it will know that you are an Author. Important Do not share identity file with anyone. If you do, any person that has it can publish, update or remove your mods in the Gallery.","title":"Obtain credentials"},{"location":"guides/basics/how-to-publish-your-mod/#prepare-mod-for-publishing","text":"","title":"Prepare mod for publishing"},{"location":"guides/basics/how-to-publish-your-mod/#add-preview-image","text":"Take a screenshot of your mod in action, and save it as preview.png . Drop the image into your mod's root folder. It should be square and its dimensions should be at least 512x512 pixels.","title":"Add preview image"},{"location":"guides/basics/how-to-publish-your-mod/#set-custom-title-and-description","text":"Create a new .txt file, rename it to mod.json , and place it in your mod's root folder. Its contents should be set up as follows: { \"Title\" : \"My awesome mod\" , \"Description\" : \"This mod contains some cool stuff!\" }","title":"Set custom title and description"},{"location":"guides/basics/how-to-publish-your-mod/#publish-update-and-unpublish","text":"Just click on your mod in the Installed tab, and choose the appropriate action. Note You can publish only mods that are not tracked as installed , i.e. was not downloaded from the gallery but manually placed to Content/ by you. If you are updating a mod that is already published, users that have it installed will see that an update is available for it.","title":"Publish, update, and unpublish"},{"location":"guides/basics/how-to-publish-your-mod/#limits","text":"To prevent our servers from being completely filled with content, we're temporarily restricting how many packs users can publish. Your limit can be seen at https://voxeltycoon-mods.herokuapp.com/limits?uid= your_secret_key , where \"your_secret_key\" is the one stored in your specific identity.json file.","title":"Limits"},{"location":"guides/basics/mod.json/","text":"mod.json is a mod metadata allowing the game to see and propery display your mod in the mod window. It should be located in the root of your mod folder. Structure \u00b6 { \"Title\" : \"My first mod\" , \"Description\" : \"And that's my first mod description\" } PublishedFileId \u00b6 Also, after uploading mod to Steam, there will reside a property called PublishedFileId . It's used to tie your local mod with exact Steam Workshop mod and allows you to update it. If you for some reason lost your local copy of the mod, you can always download it from workshop and add corresponding property to the mod.json , so the game knows to what Workshop mod this local copy is tied.","title":"mod.json"},{"location":"guides/basics/mod.json/#structure","text":"{ \"Title\" : \"My first mod\" , \"Description\" : \"And that's my first mod description\" }","title":"Structure"},{"location":"guides/basics/mod.json/#publishedfileid","text":"Also, after uploading mod to Steam, there will reside a property called PublishedFileId . It's used to tie your local mod with exact Steam Workshop mod and allows you to update it. If you for some reason lost your local copy of the mod, you can always download it from workshop and add corresponding property to the mod.json , so the game knows to what Workshop mod this local copy is tied.","title":"PublishedFileId"},{"location":"guides/content-mods/animating-locomotive-rods/","text":"Animating locomotive rods \u00b6 This guide is authored by Voxel Tycoon community member scailman Steam locomotives and some diesel locomotives use rods to be able to move the wheels. In VT it's necessary to specify the position and rotation of each of rod so the game can animate them. This section within the .trainunit asset defines the different loops of the locomotive rods and the positions and rotations in the eight frames that each animation has. It's important to mention the starting position and mesh origin for each piece: Coupling Rod shares the locomotives mesh origin. Main Rod and Piston Rod share the same origin; the pivot point where the Piston Rod and Main Rod are connected (aka Crosshead Wristpin). We always start with the Piston Rod in the centre of it's travel, and the Coupling Rod centred in either the lowest point in rotation (as shown in the images below). This will dictate the correct length for the Main Rod. \"Submeshes\" : [ { \"MeshUri\" : \"mezcorp/c30_cr.obj\" , // Coupli n g Rod \"DefaultAnimation\" : { \"PositionY\" : { \"0\" : 0.0 , \"0.125\" : 0.028619 , \"0.25\" : 0.097699 , \"0.375\" : 0.168753 , \"0.5\" : 0.196385 , \"0.625\" : 0.168753 , \"0.75\" : 0.097699 , \"0.875\" : 0.028619 , \"1\" : 0.0 }, \"PositionZ\" : { \"0\" : 0.0 , \"0.125\" : -0.070067 , \"0.25\" : -0.0976 , \"0.375\" : -0.068981 , \"0.5\" : 0.0 , \"0.625\" : 0.068981 , \"0.75\" : 0.0976 , \"0.875\" : 0.070067 , \"1\" : 0.0 } } }, { \"MeshUri\" : \"mezcorp/c30_mr.obj\" , // Mai n Rod \"DefaultAnimation\" : { \"PositionY\" : { \"0\" : 0.229511 }, \"PositionZ\" : { \"0\" : 0.744807 , \"0.125\" : 0.67474 , \"0.25\" : 0.652042 , \"0.375\" : 0.684608 , \"0.5\" : 0.747767 , \"0.625\" : 0.823755 , \"0.75\" : 0.851387 , \"0.875\" : 0.817834 , \"1\" : 0.744807 }, \"RotationX\" : { \"0\" : 0 , \"0.125\" : 2.28828 , \"0.25\" : 7.63773 , \"0.375\" : 13.2599 , \"0.5\" : 15.4827 , \"0.625\" : 13.2599 , \"0.75\" : 7.63773 , \"0.875\" : 2.28828 , \"1\" : 0 } } }, { \"MeshUri\" : \"mezcorp/c30_pr.obj\" , // Pis t o n Rod \"DefaultAnimation\" : { \"PositionY\" : { \"0\" : 0.229511 }, \"PositionZ\" : { \"0\" : 0.744807 , \"0.125\" : 0.67474 , \"0.25\" : 0.652042 , \"0.375\" : 0.684608 , \"0.5\" : 0.747767 , \"0.625\" : 0.823755 , \"0.75\" : 0.851387 , \"0.875\" : 0.817834 , \"1\" : 0.744807 }, } } ] MeshUri : Path of the file that contains the mesh of the rod. PositionX , PositionY , PositionZ : Coordinate value depending on the axis that has been indicated. RotationX : Represents the degrees of rotation on the X-axis. Each animation is made up of eight frames ranging from 0 to 1. Each frame rotates the wheels 45 degrees clockwise. We will start animating the coupling rod. The first thing is to turn the central wheel clockwise 45 degrees by rotating on the X-axis, and then move the coupling rod to coincide with the point of attachment of the wheel. Once we have the rod in position, we must write down the positions on the Y-axis and Z-axis, which are the values that we have to enter in the second frame of the animation of the coupling rod in the .trainunit asset. The axes can change according to the 3d modeling program we are using, but the positions will always be the same. Also, see that position Z has the a negative symbol in the .trainunit asset. We will keep moving the coupling rod in the same way until we reach the fifth frame that represents half of the animation, where we just need to change the sign of the remaining frames on the Z-axis and repeat the values of the Y-axis frames. The piston rod is the easiest animation since the position on the Y-axis does not vary and only moves along the Z-axis. Also, the position on the Z-axis coincides with the position of the main rod on the same axis. For the main rod, we must do the same as with the coupling rod; we move it until the end coincides with the point of union with the coupling rod. When we have finished the animation, we must put the rods in position 0,0,0 , now and we can export them.","title":"Animating locomotive rods"},{"location":"guides/content-mods/animating-locomotive-rods/#animating-locomotive-rods","text":"This guide is authored by Voxel Tycoon community member scailman Steam locomotives and some diesel locomotives use rods to be able to move the wheels. In VT it's necessary to specify the position and rotation of each of rod so the game can animate them. This section within the .trainunit asset defines the different loops of the locomotive rods and the positions and rotations in the eight frames that each animation has. It's important to mention the starting position and mesh origin for each piece: Coupling Rod shares the locomotives mesh origin. Main Rod and Piston Rod share the same origin; the pivot point where the Piston Rod and Main Rod are connected (aka Crosshead Wristpin). We always start with the Piston Rod in the centre of it's travel, and the Coupling Rod centred in either the lowest point in rotation (as shown in the images below). This will dictate the correct length for the Main Rod. \"Submeshes\" : [ { \"MeshUri\" : \"mezcorp/c30_cr.obj\" , // Coupli n g Rod \"DefaultAnimation\" : { \"PositionY\" : { \"0\" : 0.0 , \"0.125\" : 0.028619 , \"0.25\" : 0.097699 , \"0.375\" : 0.168753 , \"0.5\" : 0.196385 , \"0.625\" : 0.168753 , \"0.75\" : 0.097699 , \"0.875\" : 0.028619 , \"1\" : 0.0 }, \"PositionZ\" : { \"0\" : 0.0 , \"0.125\" : -0.070067 , \"0.25\" : -0.0976 , \"0.375\" : -0.068981 , \"0.5\" : 0.0 , \"0.625\" : 0.068981 , \"0.75\" : 0.0976 , \"0.875\" : 0.070067 , \"1\" : 0.0 } } }, { \"MeshUri\" : \"mezcorp/c30_mr.obj\" , // Mai n Rod \"DefaultAnimation\" : { \"PositionY\" : { \"0\" : 0.229511 }, \"PositionZ\" : { \"0\" : 0.744807 , \"0.125\" : 0.67474 , \"0.25\" : 0.652042 , \"0.375\" : 0.684608 , \"0.5\" : 0.747767 , \"0.625\" : 0.823755 , \"0.75\" : 0.851387 , \"0.875\" : 0.817834 , \"1\" : 0.744807 }, \"RotationX\" : { \"0\" : 0 , \"0.125\" : 2.28828 , \"0.25\" : 7.63773 , \"0.375\" : 13.2599 , \"0.5\" : 15.4827 , \"0.625\" : 13.2599 , \"0.75\" : 7.63773 , \"0.875\" : 2.28828 , \"1\" : 0 } } }, { \"MeshUri\" : \"mezcorp/c30_pr.obj\" , // Pis t o n Rod \"DefaultAnimation\" : { \"PositionY\" : { \"0\" : 0.229511 }, \"PositionZ\" : { \"0\" : 0.744807 , \"0.125\" : 0.67474 , \"0.25\" : 0.652042 , \"0.375\" : 0.684608 , \"0.5\" : 0.747767 , \"0.625\" : 0.823755 , \"0.75\" : 0.851387 , \"0.875\" : 0.817834 , \"1\" : 0.744807 }, } } ] MeshUri : Path of the file that contains the mesh of the rod. PositionX , PositionY , PositionZ : Coordinate value depending on the axis that has been indicated. RotationX : Represents the degrees of rotation on the X-axis. Each animation is made up of eight frames ranging from 0 to 1. Each frame rotates the wheels 45 degrees clockwise. We will start animating the coupling rod. The first thing is to turn the central wheel clockwise 45 degrees by rotating on the X-axis, and then move the coupling rod to coincide with the point of attachment of the wheel. Once we have the rod in position, we must write down the positions on the Y-axis and Z-axis, which are the values that we have to enter in the second frame of the animation of the coupling rod in the .trainunit asset. The axes can change according to the 3d modeling program we are using, but the positions will always be the same. Also, see that position Z has the a negative symbol in the .trainunit asset. We will keep moving the coupling rod in the same way until we reach the fifth frame that represents half of the animation, where we just need to change the sign of the remaining frames on the Z-axis and repeat the values of the Y-axis frames. The piston rod is the easiest animation since the position on the Y-axis does not vary and only moves along the Z-axis. Also, the position on the Z-axis coincides with the position of the main rod on the same axis. For the main rod, we must do the same as with the coupling rod; we move it until the end coincides with the point of union with the coupling rod. When we have finished the animation, we must put the rods in position 0,0,0 , now and we can export them.","title":"Animating locomotive rods"},{"location":"guides/content-mods/creating-a-new-track-type-mod/","text":"Creating a new track type mod \u00b6 This guide is authored by Voxel Tycoon community member scailman Introduction \u00b6 We can create any type of rail but with certain limitations, such as the height of the rails. When we create a new rail type, we also have to take into account that we need to make new stations and train depots. Alternatively we can modify the stations and train depots of the base game to use the new rails. There are elements that are common to any rail type , which are signals, bridges and tunnels. This guide will explain how to create all of these, although it is possible to use the default base game assets as they adapt to different rail types automatically. Whatever rail type we create, currently any train will be able to use it. To look right in the game and depending on the type of rails we create, we may need to create the right trains. For more information about creating a train, read the guide: Creating your first locomotive mod. Rails setup \u00b6 In the 3d program that we are using, we must create each element of the tracks separately. In the following image you can see from left to right: StraightCap, DiagonalCap, Rail1, Rail2 and Rail3 elements. All elements must be centered on the coordinate axis at position 0,0,0. The modeling is exactly the same as any type of building or vehicle that we can create in the game. If you need a more detailed explanation you can read the guide: Creating your first building mod. Configuring the rails ( .rail asset) \u00b6 The train tracks are made up of three parts, the rails, the sleepers and the ballast. The rails and the ballast are generated by extrusion. This means that these elements are generated by stretching the mesh on the Z axis. If the rails have any element that is not generated by extrusion, it will be deformed or will not display correctly. The configuration also includes the mesh of the catenary poles as well as the height of the catenary wire. Tracks have a limitation in that, they cannot be linked with others of a different type. { \"ElectrificationPrice\" : 150.0 , \"Height\" : 0.4 , \"PoleMeshUri\" : \"rubber_tires_system/pole.obj\" , \"WireHeight\" : 0.35 , \"LofterIngredients\" : [ { \"Mode\" : \"Loft\" , \"MeshUri\" : \"rubber_tires_system/rubber_rail_1.obj\" , \"Length\" : 0.45 }, { \"Mode\" : \"Repeat\" , \"MeshUri\" : \"rubber_tires_system/rubber_rail_2.obj\" , \"Length\" : 1.0 }, { \"Mode\" : \"Loft\" , \"MeshUri\" : \"rubber_tires_system/rubber_rail_3.obj\" , \"Length\" : 0.45 } ], \"EmbankmentLofterIngredients\" : [ { \"Mode\" : \"LoftUnoptimized\" , \"MeshUri\" : \"base/regular_rail_embankment_1.obj\" , \"Length\" : 0.8 } ], \"Meshes\" : { \"StraightCap\" : \"rubber_tires_system/rubber_railcap_s.obj\" , \"DiagonalCap\" : \"rubber_tires_system/rubber_railcap_d.obj\" }, \"ResearchUri\" : \"rubber_tires_system/rubber_tires_system.research\" , \"Price\" : 200.0 , \"RunningCosts\" : null , \"Hidden\" : false } ElectrificationPrice: Price of each catenary section. Height: Height of rails above ground level. This value must not exceed 0.499. If the value is 0.5 or greater, the rails will sink into the ground. PoleMeshUri: Obj file of the catenary pole mesh that will be used when track is electrified. WireHeight: Catenary wire height. LofterIngredients (Array): This section specifies the three elements that represent the track, the rails, the sleepers and the ballast. Mode: How the item is generated. Possible values are Loft and Repeat. If the value is Loft, the element is extruded on the Z axis. The repeat mode makes the element repeat every certain space. MeshUri: Path of the .obj file. Length: Section length. It can also refer to the repetition distance of the element. EmbankmentLofterIngredients (Array): This section specifies the object that will be used for track slopes. Meshes: Meshes used for the end of the track. StraightCap: Meshes used for straight end track. DiagonalCap: Meshes used for diagonal end track. (45 degrees) ResearchUri: Path to the .research asset required to unlock the track type. Price: Price of each track section. RunningCosts: Track maintenance cost. Hidden: Specifies if the track type is visible in the track construction menu. Creating the station \u00b6 The modeling of the stations in many cases have to consider the type of track that will use it and the trains that will stop on it. This might mean having to do higher platforms or with less separation between the tracks. Train stations can have very different appearances as we have a certain degree of personalization with the decorations that we can create and that will be repeated along the length of the platform. We can have different types of furniture such as benches, signs, lampposts or any other element decorative, but also use limitations such as maximum platform width and length to create multi-platform decorations from one .obj file. Train station setup ( .railstation asset) \u00b6 Train stations allow trains to load and unload cargo. They have a maximum length and a maximum number of platforms by default, but if we wish we can restrict the maximum and minimum values manually. The platforms have several elements that are repeated according to the size of the station that we place during the game. The stations are made up of an initial section (cap), an intermediate section and a final section. This also applies to the central platforms. It can also include have decorations such as benches, lampposts, posters or cranes that are repeated throughout the entire platform. { \"Height\" : 4 , \"RailUri\" : \"rubber_tires_system/rubber_tires_system.rail\" , \"EdgePlatform\" : { \"Mesh\" : \"rubber_tires_system/passenger_rail_station_edge_platform.obj\" , \"Cap1Mesh\" : \"rubber_tires_system/passenger_rail_station_edge_platform_cap1.obj\" , \"Cap2Mesh\" : \"rubber_tires_system/passenger_rail_station_edge_platform_cap2.obj\" , \"Decorations\" : [ \"rubber_tires_system/passenger_rail_station_board.obj\" , null , \"rubber_tires_system/passenger_rail_station_bench.obj\" , null ] }, \"IslandPlatform\" : { \"Mesh\" : \"rubber_tires_system/passenger_rail_station_island_platform.obj\" , \"Cap1Mesh\" : \"rubber_tires_system/passenger_rail_station_island_platform_cap1.obj\" , \"Cap2Mesh\" : \"rubber_tires_system/passenger_rail_station_island_platform_cap2.obj\" , \"Decorations\" : [ null , null , null , null ] }, \"MinWidth\" : null , \"MaxWidth\" : null , \"DefaultWidth\" : null , \"MinLength\" : null , \"MaxLength\" : null , \"DefaultLength\" : null , \"ResearchUri\" : \"rubber_tires_system/rubber_tires_system.research\" , \"Price\" : 220.0 , \"RunningCosts\" : null , \"Hidden\" : false } Height: Maximum station height. This value prevent building other elements at height lower than this above station. RailUri: Path of the .rail asset used in the station. EdgePlatform (Array): This section define the different elements of the side platforms of the station. The platforms are divided in four parts, start cap section, middle section, end cap section and decorations. Each element is specified in the parameters Mesh, Cap1Mesh, Cap2Mesh and the subsection Decorations. IslandPlatform: The platform island elements are the same as edge platform section but this time all elements are setup to create the central platform of the stations if there are two or more tracks. MinWidth: Minimum number of tracks of the station. MaxWidth: Maximum number of tracks of the station. DefaultWidth: Default truck number when the station is selected from the station building menu the first time. MinLength: Minimum possible platform length measurement in voxels. MaxLength: Maximum possible platform length measurement in voxels. DefaultLength: Default platform length when the station is selected from the station building menu the first time. ResearchUri: Path of the .research asset that unlocks the station. Price: Price of each section of the station. (The price can change depending om the length and number of platforms of the station). RunningCosts: Maintenance costs of the station. If set to null, the game automatically calculates the costs. Hidden: This parameter tells the game if the station is visible or not in the station building menu. Train depot ( .raildepot asset) \u00b6 The train depot is where the trains are purchased in the game. It\ufffds menu will show all available trains. Trains can use any type of track and have no restriction when using it. This means that in most cases, we will have to create specific trains for specific track type of road if we want them to appear visually correct. { \"Rails\" : [ { \"SpawnConnectionIndex\" : null , \"Uri\" : \"rubber_tires_system/rubber_tires_system.rail\" , \"RailType\" : \"Straight\" , \"Position\" : { \"X\" : 2 , \"Y\" : 0 , \"Z\" : 1 }, \"Rotation\" : \"Rotate0\" , \"Handle\" : false , \"DisallowSignals\" : true }, // ...skippi n g a fe w tra ck sec t io ns here t o t o simpli f y t he example... { \"SpawnConnectionIndex\" : null , \"Uri\" : \"rubber_tires_system/rubber_tires_system.rail\" , \"RailType\" : \"StraightCap\" , \"Position\" : { \"X\" : 2 , \"Y\" : 0 , \"Z\" : 10 }, \"Rotation\" : \"Rotate0\" , \"Handle\" : true , \"DisallowSignals\" : false } ], \"ClippingPlanes\" : [ { \"MeshUri\" : \"base/clipping_plane.obj\" , \"Position\" : [ 0 , 1.3 , 4.3 ], \"Rotation\" : [ 0 , 0 , 0 ], \"Scale\" : [ 2.3 , 2.6 , 1 ] } ], \"ResearchUri\" : \"rubber_tires_system/rubber_tires_system.research\" , \"Size\" : { \"X\" : 6 , \"Y\" : 4 , \"Z\" : 10 }, \"Liveries\" : { \"default\" : { \"MeshUri\" : \"rubber_tires_system/rubber_tires_depot.obj\" , \"MeshVariant\" : null , \"Lights\" : null } }, \"Price\" : 21200.0 , \"RunningCosts\" : null , \"Hidden\" : false } Rails (Array): This section specifies the track type, the section type, the track position and some other parameters. SpawnConnectionIndex: It defines at what end of rail (there's two for regular straigt rail) the train should spawn. So it's set to some value (0) for the rails in depot and nulls for other rails in the depot. Uri: Path of the .rail asset used to place the track in the depot. RailType: Type of mesh used in this track section. The possible rail type can be Straight or StraightCap. Position: Position of the rail based in a grid. It follows the same rules of conveyors placement in the devices. Rotation: Rail rotation. The possible values are: Rotate0, Rotate90, Rotate180 and Rotate270. The rotation must always be Rotate0 because the depot (in most cases) only has one track along the length of the building. Handle: This parameter sets whether or not it is possible to connect a track at this point of the depot, to the rest of the world. This parameter will be true if is the end section of the track of the depot. DisallowSignals: This parameter prevents placing signals on this track section. If it's the end section of track, the value is false. ClippingPlanes (Array): The clipping plane is an element that is placed at the entrance of the depot and creates a darkening effect. MeshUri: Path of the mesh file. Position: Position of the clipping plane in X,Y,Z axis. Rotation: Rotation of the clipping plane in X,Y,Z axis. Scale: Scale determines the size of the clipping plane in X,Y,Z axis. ResearchUri: Path of the .research asset that unlock the depot. Size: Size of the building in X,Y, Z axis. Liveries (Array): This section contains the building mesh and all night lights variations. MeshUri: Building .obj file mesh. MeshVariant (Array): If there are night variants for the windows, this sectiondefines them. Learn more about how to configure the night windows effect in the guide: Creating your first building mod. Lights (Array): You can add two type of lights, point lights and spotlights. These lights don't cast shadows. \"Lights\" : [ { \"Type\" : \"Point\" , \"Color\" : \"ffe200\" , \"Position\" : [ 0 , 0.5 , 0 ], \"Range\" : 2.0 , \"Intensity\" : 1.0 , \"SpotAngle\" : 0.0 } ] Type: The lights can be point light (Point) or spotlights (Spotlight). Color: Hexadecimal value of the light color. Position: Light position in X, Y, Z axis. Range: Light radius in meters. Intensity: Light intensity. The default value is 1.0. Values above 1 make the light more bright, and below 1 less intense. SpotAngle: If the lights is a spotlight, this parameter specify the direction of the light in degrees. Price: Price of the building. RunningCosts: Maintenance cost of the building. Hidden: This parameter tells the game if the depot is visible or not in the depot building menu. Signals ( .regularrailsignal and .chainrailsignal asset) \u00b6 Currently, there are two types of signals; chain signals and pre-signals. Depending on the needs of the railway network, we must place one type or another. The configuration of the signals is very simple because it only depends on either two different meshes or three in the case of pre-signals. The first mesh ( .obj file) is for the green signal state and the second mesh is for the red signal state. If the signal is of the pre-signal type, the second mesh corresponds to the amber state of the signal. { \"MeshUris\" : [ \"rubber_tires_system/rubber_tires_presignal_1.obj\" , \"rubber_tires_system/rubber_tires_presignal_2.obj\" , \"rubber_tires_system/rubber_tires_presignal_3.obj\" ], \"Price\" : 1550.0 , \"ResearchUri\" : \"rubber_tires_system/rubber_tires_system.research\" } MeshUris (Array): In this section all the meshes for the signal states are listed. For now you can't animate signals between states. Price: Signal price. ResearchUri: Path of the .research asset that unlock the signal. { \"MeshUris\" : [ \"rubber_tires_system/rubber_tires_regular_1.obj\" , \"rubber_tires_system/rubber_tires_regular_2.obj\" ], \"Price\" : 1100.0 , \"ResearchUri\" : \"rubber_tires_system/rubber_tires_system.research\" } Bridges ( .railbridge asset) \u00b6 Bridges are used to overcome obstacles, such as roads and other train tracks. Depending on the type of bridge, it may have different span between pillars, which makes its use conditioned by the surrounding environment. The other restriction that we can configure is the maximum height of the bridge. Depending on the type of bridge we are creating, the pillars can have an upper part, a middle part and a base part. { \"SpanMeshUri\" : \"base/arc_rail_bridge_span_3.obj\" , \"SpanLength\" : 3 , \"SpanHeight\" : 3 , \"MinHeight\" : 0 , \"MaxHeight\" : 6 , \"DefaultHeight\" : 3 , \"LofterIngredients\" : [ { \"Mode\" : \"Loft\" , \"MeshUri\" : \"base/arc_rail_bridge_1.obj\" , \"Length\" : 0.8 } ], \"PierBottomMeshUri\" : null , \"PierMeshUri\" : \"base/arc_rail_bridge_pillar.obj\" , \"PierTopMeshUri\" : null , \"PierOffset\" : 0.25 , \"ResearchUri\" : \"base/rails.research\" , \"Price\" : 500.0 , \"RunningCosts\" : null , \"Hidden\" : false } SpanMeshUri: Main mesh of the bridge. Specifies the path of the .obj file that forms the main section of the bridge. SpanLength: Length in voxels of the central section of the bridge. It determines the length of the spacing between pillars. SpanHeight: Height of the main section of the bridge. Bridges must be a minimum of three voxels high to be built over a track or road. MinHeight: Minimum bridge height. MaxHeight: Maximum bridge height. It prevents building something above the bridge if the height is less than that specified. DefaultHeight: Default height at which the bridge will be built. LofterIngredients (Array): Bridge section that is generated in case the length is less than that indicated in the SpanLenght parameter. PierBottomMeshUri: Mesh used on top of bridge pillar. If the value is null it will not be used in the bridge. PierMeshUri: Mesh used on middle part of bridge pillar. If the value is null it will not be used in the bridge. PierTopMeshUri: Mesh used on the bottom of bridge pillar. If the value is null it will not be used in the bridge. PierOffset: Sets the value of pillar offset. ResearchUri: Path of the .research asset that unlock the bridge. Tunnels ( .railtunnel asset) \u00b6 Tunnels general have a common appearance across all types of rails, the only difference being the entrance that can be customized to better suit the style we want to give it. The tunnels are made up of three different meshes, the outer facade, the inner facade and the inner walls of the tunnel. The tunnels allowed us to overcome obstacles such as other tracks or roads. For now only the construction of straight tunnels is allowed. In the future its planned that the tunnels will have curves to be able to build underground systems. { \"MeshUri\" : \"base/concrete_rail_tunnel_1.obj\" , \"InCapMeshUri\" : null , \"OutCapMeshUri\" : \"base/concrete_rail_tunnel_cap.obj\" , \"MinDepth\" : 0 , \"MaxDepth\" : 7 , \"DefaultDepth\" : 3 , \"ResearchUri\" : \"base/rails.research\" , \"Price\" : 1500.0 , \"RunningCosts\" : null , \"Hidden\" : false } MeshUri: Path of the mesh of the interior walls of the tunnel. This object will be extruded along the entire length of the tunnel. InCapMeshUri: Path of the mesh used for the inner tunnel facade. OutCapMeshUri: Path of the mesh used for the outter tunnel facade. MinDepth: Minimum depth at which the tunnel can be built. A value of 0 means it's ground level. MaxDepth: Maximum depth that the tunnel can have measured in voxels. DefaultDepth: Default depth at which the tunnel is built. By default the value is 3. ResearchUri: Path of the .research asset that unlocks the tunnel. Price: Tunnel price per section. RunningCosts: Tunnel maintenance cost. By default the value is null. Hidden: Specifies if the tunnel is visible in the tunnel build menu. Further reading \u00b6 How to publish your mod","title":"Creating a new track type mod"},{"location":"guides/content-mods/creating-a-new-track-type-mod/#creating-a-new-track-type-mod","text":"This guide is authored by Voxel Tycoon community member scailman","title":"Creating a new track type mod"},{"location":"guides/content-mods/creating-a-new-track-type-mod/#introduction","text":"We can create any type of rail but with certain limitations, such as the height of the rails. When we create a new rail type, we also have to take into account that we need to make new stations and train depots. Alternatively we can modify the stations and train depots of the base game to use the new rails. There are elements that are common to any rail type , which are signals, bridges and tunnels. This guide will explain how to create all of these, although it is possible to use the default base game assets as they adapt to different rail types automatically. Whatever rail type we create, currently any train will be able to use it. To look right in the game and depending on the type of rails we create, we may need to create the right trains. For more information about creating a train, read the guide: Creating your first locomotive mod.","title":"Introduction"},{"location":"guides/content-mods/creating-a-new-track-type-mod/#rails-setup","text":"In the 3d program that we are using, we must create each element of the tracks separately. In the following image you can see from left to right: StraightCap, DiagonalCap, Rail1, Rail2 and Rail3 elements. All elements must be centered on the coordinate axis at position 0,0,0. The modeling is exactly the same as any type of building or vehicle that we can create in the game. If you need a more detailed explanation you can read the guide: Creating your first building mod.","title":"Rails setup"},{"location":"guides/content-mods/creating-a-new-track-type-mod/#configuring-the-rails-rail-asset","text":"The train tracks are made up of three parts, the rails, the sleepers and the ballast. The rails and the ballast are generated by extrusion. This means that these elements are generated by stretching the mesh on the Z axis. If the rails have any element that is not generated by extrusion, it will be deformed or will not display correctly. The configuration also includes the mesh of the catenary poles as well as the height of the catenary wire. Tracks have a limitation in that, they cannot be linked with others of a different type. { \"ElectrificationPrice\" : 150.0 , \"Height\" : 0.4 , \"PoleMeshUri\" : \"rubber_tires_system/pole.obj\" , \"WireHeight\" : 0.35 , \"LofterIngredients\" : [ { \"Mode\" : \"Loft\" , \"MeshUri\" : \"rubber_tires_system/rubber_rail_1.obj\" , \"Length\" : 0.45 }, { \"Mode\" : \"Repeat\" , \"MeshUri\" : \"rubber_tires_system/rubber_rail_2.obj\" , \"Length\" : 1.0 }, { \"Mode\" : \"Loft\" , \"MeshUri\" : \"rubber_tires_system/rubber_rail_3.obj\" , \"Length\" : 0.45 } ], \"EmbankmentLofterIngredients\" : [ { \"Mode\" : \"LoftUnoptimized\" , \"MeshUri\" : \"base/regular_rail_embankment_1.obj\" , \"Length\" : 0.8 } ], \"Meshes\" : { \"StraightCap\" : \"rubber_tires_system/rubber_railcap_s.obj\" , \"DiagonalCap\" : \"rubber_tires_system/rubber_railcap_d.obj\" }, \"ResearchUri\" : \"rubber_tires_system/rubber_tires_system.research\" , \"Price\" : 200.0 , \"RunningCosts\" : null , \"Hidden\" : false } ElectrificationPrice: Price of each catenary section. Height: Height of rails above ground level. This value must not exceed 0.499. If the value is 0.5 or greater, the rails will sink into the ground. PoleMeshUri: Obj file of the catenary pole mesh that will be used when track is electrified. WireHeight: Catenary wire height. LofterIngredients (Array): This section specifies the three elements that represent the track, the rails, the sleepers and the ballast. Mode: How the item is generated. Possible values are Loft and Repeat. If the value is Loft, the element is extruded on the Z axis. The repeat mode makes the element repeat every certain space. MeshUri: Path of the .obj file. Length: Section length. It can also refer to the repetition distance of the element. EmbankmentLofterIngredients (Array): This section specifies the object that will be used for track slopes. Meshes: Meshes used for the end of the track. StraightCap: Meshes used for straight end track. DiagonalCap: Meshes used for diagonal end track. (45 degrees) ResearchUri: Path to the .research asset required to unlock the track type. Price: Price of each track section. RunningCosts: Track maintenance cost. Hidden: Specifies if the track type is visible in the track construction menu.","title":"Configuring the rails (.rail asset)"},{"location":"guides/content-mods/creating-a-new-track-type-mod/#creating-the-station","text":"The modeling of the stations in many cases have to consider the type of track that will use it and the trains that will stop on it. This might mean having to do higher platforms or with less separation between the tracks. Train stations can have very different appearances as we have a certain degree of personalization with the decorations that we can create and that will be repeated along the length of the platform. We can have different types of furniture such as benches, signs, lampposts or any other element decorative, but also use limitations such as maximum platform width and length to create multi-platform decorations from one .obj file.","title":"Creating the station"},{"location":"guides/content-mods/creating-a-new-track-type-mod/#train-station-setup-railstation-asset","text":"Train stations allow trains to load and unload cargo. They have a maximum length and a maximum number of platforms by default, but if we wish we can restrict the maximum and minimum values manually. The platforms have several elements that are repeated according to the size of the station that we place during the game. The stations are made up of an initial section (cap), an intermediate section and a final section. This also applies to the central platforms. It can also include have decorations such as benches, lampposts, posters or cranes that are repeated throughout the entire platform. { \"Height\" : 4 , \"RailUri\" : \"rubber_tires_system/rubber_tires_system.rail\" , \"EdgePlatform\" : { \"Mesh\" : \"rubber_tires_system/passenger_rail_station_edge_platform.obj\" , \"Cap1Mesh\" : \"rubber_tires_system/passenger_rail_station_edge_platform_cap1.obj\" , \"Cap2Mesh\" : \"rubber_tires_system/passenger_rail_station_edge_platform_cap2.obj\" , \"Decorations\" : [ \"rubber_tires_system/passenger_rail_station_board.obj\" , null , \"rubber_tires_system/passenger_rail_station_bench.obj\" , null ] }, \"IslandPlatform\" : { \"Mesh\" : \"rubber_tires_system/passenger_rail_station_island_platform.obj\" , \"Cap1Mesh\" : \"rubber_tires_system/passenger_rail_station_island_platform_cap1.obj\" , \"Cap2Mesh\" : \"rubber_tires_system/passenger_rail_station_island_platform_cap2.obj\" , \"Decorations\" : [ null , null , null , null ] }, \"MinWidth\" : null , \"MaxWidth\" : null , \"DefaultWidth\" : null , \"MinLength\" : null , \"MaxLength\" : null , \"DefaultLength\" : null , \"ResearchUri\" : \"rubber_tires_system/rubber_tires_system.research\" , \"Price\" : 220.0 , \"RunningCosts\" : null , \"Hidden\" : false } Height: Maximum station height. This value prevent building other elements at height lower than this above station. RailUri: Path of the .rail asset used in the station. EdgePlatform (Array): This section define the different elements of the side platforms of the station. The platforms are divided in four parts, start cap section, middle section, end cap section and decorations. Each element is specified in the parameters Mesh, Cap1Mesh, Cap2Mesh and the subsection Decorations. IslandPlatform: The platform island elements are the same as edge platform section but this time all elements are setup to create the central platform of the stations if there are two or more tracks. MinWidth: Minimum number of tracks of the station. MaxWidth: Maximum number of tracks of the station. DefaultWidth: Default truck number when the station is selected from the station building menu the first time. MinLength: Minimum possible platform length measurement in voxels. MaxLength: Maximum possible platform length measurement in voxels. DefaultLength: Default platform length when the station is selected from the station building menu the first time. ResearchUri: Path of the .research asset that unlocks the station. Price: Price of each section of the station. (The price can change depending om the length and number of platforms of the station). RunningCosts: Maintenance costs of the station. If set to null, the game automatically calculates the costs. Hidden: This parameter tells the game if the station is visible or not in the station building menu.","title":"Train station setup (.railstation asset)"},{"location":"guides/content-mods/creating-a-new-track-type-mod/#train-depot-raildepot-asset","text":"The train depot is where the trains are purchased in the game. It\ufffds menu will show all available trains. Trains can use any type of track and have no restriction when using it. This means that in most cases, we will have to create specific trains for specific track type of road if we want them to appear visually correct. { \"Rails\" : [ { \"SpawnConnectionIndex\" : null , \"Uri\" : \"rubber_tires_system/rubber_tires_system.rail\" , \"RailType\" : \"Straight\" , \"Position\" : { \"X\" : 2 , \"Y\" : 0 , \"Z\" : 1 }, \"Rotation\" : \"Rotate0\" , \"Handle\" : false , \"DisallowSignals\" : true }, // ...skippi n g a fe w tra ck sec t io ns here t o t o simpli f y t he example... { \"SpawnConnectionIndex\" : null , \"Uri\" : \"rubber_tires_system/rubber_tires_system.rail\" , \"RailType\" : \"StraightCap\" , \"Position\" : { \"X\" : 2 , \"Y\" : 0 , \"Z\" : 10 }, \"Rotation\" : \"Rotate0\" , \"Handle\" : true , \"DisallowSignals\" : false } ], \"ClippingPlanes\" : [ { \"MeshUri\" : \"base/clipping_plane.obj\" , \"Position\" : [ 0 , 1.3 , 4.3 ], \"Rotation\" : [ 0 , 0 , 0 ], \"Scale\" : [ 2.3 , 2.6 , 1 ] } ], \"ResearchUri\" : \"rubber_tires_system/rubber_tires_system.research\" , \"Size\" : { \"X\" : 6 , \"Y\" : 4 , \"Z\" : 10 }, \"Liveries\" : { \"default\" : { \"MeshUri\" : \"rubber_tires_system/rubber_tires_depot.obj\" , \"MeshVariant\" : null , \"Lights\" : null } }, \"Price\" : 21200.0 , \"RunningCosts\" : null , \"Hidden\" : false } Rails (Array): This section specifies the track type, the section type, the track position and some other parameters. SpawnConnectionIndex: It defines at what end of rail (there's two for regular straigt rail) the train should spawn. So it's set to some value (0) for the rails in depot and nulls for other rails in the depot. Uri: Path of the .rail asset used to place the track in the depot. RailType: Type of mesh used in this track section. The possible rail type can be Straight or StraightCap. Position: Position of the rail based in a grid. It follows the same rules of conveyors placement in the devices. Rotation: Rail rotation. The possible values are: Rotate0, Rotate90, Rotate180 and Rotate270. The rotation must always be Rotate0 because the depot (in most cases) only has one track along the length of the building. Handle: This parameter sets whether or not it is possible to connect a track at this point of the depot, to the rest of the world. This parameter will be true if is the end section of the track of the depot. DisallowSignals: This parameter prevents placing signals on this track section. If it's the end section of track, the value is false. ClippingPlanes (Array): The clipping plane is an element that is placed at the entrance of the depot and creates a darkening effect. MeshUri: Path of the mesh file. Position: Position of the clipping plane in X,Y,Z axis. Rotation: Rotation of the clipping plane in X,Y,Z axis. Scale: Scale determines the size of the clipping plane in X,Y,Z axis. ResearchUri: Path of the .research asset that unlock the depot. Size: Size of the building in X,Y, Z axis. Liveries (Array): This section contains the building mesh and all night lights variations. MeshUri: Building .obj file mesh. MeshVariant (Array): If there are night variants for the windows, this sectiondefines them. Learn more about how to configure the night windows effect in the guide: Creating your first building mod. Lights (Array): You can add two type of lights, point lights and spotlights. These lights don't cast shadows. \"Lights\" : [ { \"Type\" : \"Point\" , \"Color\" : \"ffe200\" , \"Position\" : [ 0 , 0.5 , 0 ], \"Range\" : 2.0 , \"Intensity\" : 1.0 , \"SpotAngle\" : 0.0 } ] Type: The lights can be point light (Point) or spotlights (Spotlight). Color: Hexadecimal value of the light color. Position: Light position in X, Y, Z axis. Range: Light radius in meters. Intensity: Light intensity. The default value is 1.0. Values above 1 make the light more bright, and below 1 less intense. SpotAngle: If the lights is a spotlight, this parameter specify the direction of the light in degrees. Price: Price of the building. RunningCosts: Maintenance cost of the building. Hidden: This parameter tells the game if the depot is visible or not in the depot building menu.","title":"Train depot (.raildepot asset)"},{"location":"guides/content-mods/creating-a-new-track-type-mod/#signals-regularrailsignal-and-chainrailsignal-asset","text":"Currently, there are two types of signals; chain signals and pre-signals. Depending on the needs of the railway network, we must place one type or another. The configuration of the signals is very simple because it only depends on either two different meshes or three in the case of pre-signals. The first mesh ( .obj file) is for the green signal state and the second mesh is for the red signal state. If the signal is of the pre-signal type, the second mesh corresponds to the amber state of the signal. { \"MeshUris\" : [ \"rubber_tires_system/rubber_tires_presignal_1.obj\" , \"rubber_tires_system/rubber_tires_presignal_2.obj\" , \"rubber_tires_system/rubber_tires_presignal_3.obj\" ], \"Price\" : 1550.0 , \"ResearchUri\" : \"rubber_tires_system/rubber_tires_system.research\" } MeshUris (Array): In this section all the meshes for the signal states are listed. For now you can't animate signals between states. Price: Signal price. ResearchUri: Path of the .research asset that unlock the signal. { \"MeshUris\" : [ \"rubber_tires_system/rubber_tires_regular_1.obj\" , \"rubber_tires_system/rubber_tires_regular_2.obj\" ], \"Price\" : 1100.0 , \"ResearchUri\" : \"rubber_tires_system/rubber_tires_system.research\" }","title":"Signals (.regularrailsignal and .chainrailsignal asset)"},{"location":"guides/content-mods/creating-a-new-track-type-mod/#bridges-railbridge-asset","text":"Bridges are used to overcome obstacles, such as roads and other train tracks. Depending on the type of bridge, it may have different span between pillars, which makes its use conditioned by the surrounding environment. The other restriction that we can configure is the maximum height of the bridge. Depending on the type of bridge we are creating, the pillars can have an upper part, a middle part and a base part. { \"SpanMeshUri\" : \"base/arc_rail_bridge_span_3.obj\" , \"SpanLength\" : 3 , \"SpanHeight\" : 3 , \"MinHeight\" : 0 , \"MaxHeight\" : 6 , \"DefaultHeight\" : 3 , \"LofterIngredients\" : [ { \"Mode\" : \"Loft\" , \"MeshUri\" : \"base/arc_rail_bridge_1.obj\" , \"Length\" : 0.8 } ], \"PierBottomMeshUri\" : null , \"PierMeshUri\" : \"base/arc_rail_bridge_pillar.obj\" , \"PierTopMeshUri\" : null , \"PierOffset\" : 0.25 , \"ResearchUri\" : \"base/rails.research\" , \"Price\" : 500.0 , \"RunningCosts\" : null , \"Hidden\" : false } SpanMeshUri: Main mesh of the bridge. Specifies the path of the .obj file that forms the main section of the bridge. SpanLength: Length in voxels of the central section of the bridge. It determines the length of the spacing between pillars. SpanHeight: Height of the main section of the bridge. Bridges must be a minimum of three voxels high to be built over a track or road. MinHeight: Minimum bridge height. MaxHeight: Maximum bridge height. It prevents building something above the bridge if the height is less than that specified. DefaultHeight: Default height at which the bridge will be built. LofterIngredients (Array): Bridge section that is generated in case the length is less than that indicated in the SpanLenght parameter. PierBottomMeshUri: Mesh used on top of bridge pillar. If the value is null it will not be used in the bridge. PierMeshUri: Mesh used on middle part of bridge pillar. If the value is null it will not be used in the bridge. PierTopMeshUri: Mesh used on the bottom of bridge pillar. If the value is null it will not be used in the bridge. PierOffset: Sets the value of pillar offset. ResearchUri: Path of the .research asset that unlock the bridge.","title":"Bridges (.railbridge asset)"},{"location":"guides/content-mods/creating-a-new-track-type-mod/#tunnels-railtunnel-asset","text":"Tunnels general have a common appearance across all types of rails, the only difference being the entrance that can be customized to better suit the style we want to give it. The tunnels are made up of three different meshes, the outer facade, the inner facade and the inner walls of the tunnel. The tunnels allowed us to overcome obstacles such as other tracks or roads. For now only the construction of straight tunnels is allowed. In the future its planned that the tunnels will have curves to be able to build underground systems. { \"MeshUri\" : \"base/concrete_rail_tunnel_1.obj\" , \"InCapMeshUri\" : null , \"OutCapMeshUri\" : \"base/concrete_rail_tunnel_cap.obj\" , \"MinDepth\" : 0 , \"MaxDepth\" : 7 , \"DefaultDepth\" : 3 , \"ResearchUri\" : \"base/rails.research\" , \"Price\" : 1500.0 , \"RunningCosts\" : null , \"Hidden\" : false } MeshUri: Path of the mesh of the interior walls of the tunnel. This object will be extruded along the entire length of the tunnel. InCapMeshUri: Path of the mesh used for the inner tunnel facade. OutCapMeshUri: Path of the mesh used for the outter tunnel facade. MinDepth: Minimum depth at which the tunnel can be built. A value of 0 means it's ground level. MaxDepth: Maximum depth that the tunnel can have measured in voxels. DefaultDepth: Default depth at which the tunnel is built. By default the value is 3. ResearchUri: Path of the .research asset that unlocks the tunnel. Price: Tunnel price per section. RunningCosts: Tunnel maintenance cost. By default the value is null. Hidden: Specifies if the tunnel is visible in the tunnel build menu.","title":"Tunnels (.railtunnel asset)"},{"location":"guides/content-mods/creating-a-new-track-type-mod/#further-reading","text":"How to publish your mod","title":"Further reading"},{"location":"guides/content-mods/creating-a-small-production-chain/","text":"Creating a small production chain \u00b6 This guide is authored by Voxel Tycoon community member scailman Introduction \u00b6 In this guide you will learn how to create a new industry and all the elements that make it up. It's not a complex task but it's necessary to take into account many elements that are related to each other. Since we've explained how to create vehicles and trains in other guides, the process for their creation will not be repeated in this guide. A production chain can be very simple, using products and buildings that already exist in the base game, or have a very high degree of complexity, it all depends on our imagination. The best thing before starting to create items, buildings and vehicles, is to have an idea of what we want to do and create a small diagram of all the elements that our production chain needs. This is highly recommended since on many occasions we will have to link buildings with items or vehicles and problems may come up when we forget to correctly configure something in an asset. A production chain is made up of several steps, ore deposits, mining buildings, product processing building, warehouses and stores. All the buildings interact with each other and each one has a different extraction and production time, so adjustments must be made to have a balanced production in the different phases. Raw material deposits ( .depositrecipe asset) \u00b6 Deposits of raw materials are the beginning of the production chain and are scattered throughout the regions. They are the main source of resources. As a finite amount of resources, they will become depleted when fully mined and will no longer be possible to extract. { \"ItemUri\" : \"scm_oil_industry/crude.item\" , \"TintColor\" : \"353535\" , \"RadiusMultiplier\" : 0.5 , \"CapacityMultiplier\" : null , \"DecorationUris\" : [], \"Tier\" : 0 } ItemUri : Path of the item asset that will be extracted from the deposit. TintColor : This is the hexadecimal value of the color that the element represents on the map and when we press the Alt key to show icons on the map. RadiusMultiplier : Deposit size. By default the value is null . Values above 1 increase size and below decrease it. CapacityMultiplier : Amount of resources that can be extracted from the deposit. The default value is null . DecorationUris (Array): Deposits can have decorations like trees in forests. It's a list of all the paths of the asset files that will be shown as decoration on the deposit. \"DecorationUris\" : [ \"base/spruce.plant\" ] Tier : Deposit level. Deposits at tier 0 are included in the first available region when a new map is created. Higher tiers are available at a further distance. E.g. Coal, Iron Ore and Wood are tier 0, but Copper, Sand and Stone are tier 1. Extracting resources ( .mine asset ) \u00b6 Mines or any other type of building that allows the extraction of raw resources are special buildings that must be placed whithin the area of the deposit. They can only be placed in the resource that it can extract, for example you can't place an iron mine in a coal deposit. Mines can have animated submeshes like steam locomotives and sound and smoke for when they're active. { \"OutputInterval\" : 5.5 , \"Submeshes\" : [ { \"MeshUri\" : \"scm_oil_industry/main_arm.obj\" , \"DefaultAnimation\" : { \"PositionY\" : { \"0\" : 1.92 }, \"PositionZ\" : { \"0\" : 0.176 // y -0 , 176 }, \"RotationX\" : { \"0\" : 0.0 , \"0.125\" : -6.12 , \"0.25\" : -18.682 , \"0.375\" : -29.730 , \"0.5\" : -34.724 , \"0.625\" : -33.659 , \"0.75\" : -20.718 , \"0.875\" : -6.333 , \"1\" : 0.0 } } }, { \"MeshUri\" : \"scm_oil_industry/rod.obj\" , \"DefaultAnimation\" : { \"PositionY\" : { \"0\" : 1.069 , \"0.125\" : 0.991 , \"0.25\" : 0.802 , \"0.375\" : 0.613 , \"0.5\" : 0.534 , \"0.625\" : 0.613 , \"0.75\" : 0.802 , \"0.875\" : 0.991 , \"1\" : 1.069 }, \"PositionZ\" : { \"0\" : -0.738 , \"0.125\" : -0.549 , \"0.25\" : -0.47 , \"0.375\" : -0.549 , \"0.5\" : -0.737 , \"0.625\" : -0.926 , \"0.75\" : -1.005 , \"0.875\" : -0.926 , \"1\" : -0.738 }, \"RotationX\" : { \"0\" : 0.0 , \"0.125\" : -12.104 , \"0.25\" : -15.204 , \"0.375\" : -6.296 , \"0.5\" : 8.13 , \"0.625\" : 20.407 , \"0.75\" : 20.007 , \"0.875\" : 12.128 , \"1\" : 0.0 } } }, { \"MeshUri\" : \"scm_oil_industry/rotor.obj\" , \"DefaultAnimation\" : { \"PositionY\" : { \"0\" : 0.801 }, \"PositionZ\" : { \"0\" : -0.738 }, \"RotationX\" : { \"0\" : 0.0 , \"0.125\" : 45 , \"0.25\" : 90 , \"0.375\" : 135 , \"0.5\" : 180 , \"0.625\" : 225 , \"0.75\" : 270 , \"0.875\" : 315 , \"1\" : 360 } } } ], \"Sounds\" : null , \"Smokes\" : null , \"ResearchUri\" : \"scm_oil_industry/oil_extraction.research\" , \"Size\" : { \"X\" : 2 , \"Y\" : 3 , \"Z\" : 3 }, \"Liveries\" : { \"default\" : { \"MeshUri\" : \"scm_oil_industry/crude_pump.obj\" , \"MeshVariant\" : null , \"Lights\" : null } }, \"Price\" : 53000.0 , \"RunningCosts\" : null , \"Hidden\" : false } OutputInterval : The time in seconds it takes to generate one unit. Submeshes (Array): The positions of the animations of the different meshes. For more information read the guide: Animating locomotive rods. Sound (Array): SoundUri : Path of the .wav file used when the mine is active. Time : Sound duration time. \"Sounds\" : [ { \"SoundUri\" : \"base/alloy_smelter_device.wav\" , \"Time\" : 0.5 } ] Smoke (Array): Uri : Path of the .smoke asset. Position : Smoke position in X, Y, Z axis. \"Smokes\" : [ { \"Uri\" : \"scm_oil_industry/refinery_device.smoke\" , \"Position\" : [ -1.583 , 5.4 , 1.305 ] } ResearchUri : Path of the .research asset that allows the building to be researched to make it available in game. Size (Array): Building size on X, Y, Z axes. Liveries (Array): Specifies the path of the building's .obj file. For more information about this section read the guide: Creating your first building mod. Price : Building purchase price. RunningCosts : Building maintenance cost. By default the value is null . Hidden : Indicates whether or not the building appears in the mine construction menu. By default the value is false. As with trains or trucks, you must have a .capacities , .heapcapacities , or .stackcapacities asset to specify which item it produces. { \"Items\" : { \"scm_oil_industry/crude.item\" : null }, \"TargetUri\" : \"scm_oil_industry/crude_pump.mine\" , \"MaxWeight\" : 100.0 , \"LoadingSpeedMultiplier\" : 1.0 , \"UnloadingSpeedMultiplier\" : 1.0 } Manufacturing products ( .device asset) \u00b6 Devices are the intermediate industries between raw material deposits and stores. These buildings require materials to produce the products that will be supplied to the stores. Unlike the other buildings, these have input and output conveyor to supply raw materials or other required items. The entrances and exits can be placed on any of the four facades of the building and don't have an established directionality, that is, if the building requires one item to produce another and has one entrance and one exit, it doesn't matter the direction of the conveyor. { \"RecipeTargetUri\" : \"scm_oil_industry/refinery.recipetarget\" , \"Submeshes\" : [], \"Sounds\" : [ { \"SoundUri\" : \"scm_oil_industry/refinery_device.wav\" , \"Time\" : 0.5 } ], \"Smokes\" : [ { \"Uri\" : \"scm_oil_industry/refinery_device.smoke\" , \"Position\" : [ -1.583 , 5.4 , 1.305 ] } ], \"ClippingPlanes\" : null , \"Conveyors\" : [ { \"SpawnConnection\" : 1 , \"Uri\" : \"base/regular.conveyor\" , \"ConveyorType\" : \"StraightShort\" , \"Position\" : { \"X\" : 0 , \"Y\" : 0 , \"Z\" : 4 }, \"Rotation\" : \"Rotate90\" , \"Handle\" : false }, { \"SpawnConnection\" : null , \"Uri\" : \"base/regular.conveyor\" , \"ConveyorType\" : \"Cap\" , \"Position\" : { \"X\" : -1 , \"Y\" : 0 , \"Z\" : 4 }, \"Rotation\" : \"Rotate90\" , \"Handle\" : true }, { \"SpawnConnection\" : 1 , \"Uri\" : \"base/regular.conveyor\" , \"ConveyorType\" : \"StraightShort\" , \"Position\" : { \"X\" : 0 , \"Y\" : 0 , \"Z\" : 5 }, \"Rotation\" : \"Rotate90\" , \"Handle\" : false }, { \"SpawnConnection\" : null , \"Uri\" : \"base/regular.conveyor\" , \"ConveyorType\" : \"Cap\" , \"Position\" : { \"X\" : -1 , \"Y\" : 0 , \"Z\" : 5 }, \"Rotation\" : \"Rotate90\" , \"Handle\" : true } ], \"ResearchUri\" : \"scm_oil_industry/oil_extraction.research\" , \"Size\" : { \"X\" : 7 , \"Y\" : 6 , \"Z\" : 8 }, \"Liveries\" : { \"default\" : { \"MeshUri\" : \"scm_oil_industry/refinery_device.obj\" , \"MeshVariant\" : null , \"Lights\" : null } }, \"Price\" : 45500.0 , \"RunningCosts\" : null , \"Hidden\" : false } RecipeTargetUri : The asset responsible for the building to accept recipes. The asset only contains the {} characters. Submeshes (Array): If the building has animated meshes in this section, the positions and rotations of each mesh are specified. Sound (Array): SoundUri : Path of the .wav file used when the mine is active. Time : Sound duration time. Smoke (Array): Uri : Path of the .smoke asset. Position : Smoke position in X, Y, Z axis. ClippingPlanes : This is a plane that allows to darken an area of the building. An example is the plane used in train depots. Conveyors (Array): This section defines the conveyor belt as well as its position, orientation and type. An industry can have as many conveyor belts as desired and they don't all have to be on the same building facade. In this conveyor placement example, the building has a size of 6x8. In the right diagram, the light gray area represents the building. The coordinates (0,0) are always in the upper right corner of the building and the positive values go from right to left and from top to bottom. Values will be negative if they are above or to the right of the coordinates (0,0). The code shown above represent an industry that have two conveyor (orange area in the diagram) that start at positions (0,4) and (0,5) respectively and have a rotation of 90 degrees. The rotation of the conveyors goes counterclockwise and starts at 0 degrees at the bottom of the building. SpawnConnection : Specifies the connection of the conveyor where items will spawn. The beginning of the conveyor always has a value of 1 . Uri : Path of the .conveyor asset. ConveyorType : Type of tape to be placed in position. The possible values are: Cap, StraightShort and StraightExtraShort. Position : Position of the tape section on the X, Y, Z axes with respect to the grid shown in the previous image. Rotation : Conveyor rotation. Possible values: Rotation0 , Rotation90 , Rotation180 , and Rotation270 . Handle : Indicates whether the player can connect a conveyor or not. ResearchUri : Path of the .research asset that allows the building to be researched to make it available in game. Size (Array): Building size on X, Y, Z axes. Liveries (Array): Specifies the path of the building's .obj file. For more information about this section read the guide: Creating your first building mod. Price : Building purchase price. RunningCosts : Building maintenance cost. By default the value is null . Hidden : Indicates whether or not the building appears in the mine construction menu. By default the value is false . Devices recipes ( .recipe asset) \u00b6 In order to produce items an industry must have a recipe that tells what item it requires, how much quantity it needs, and what product is manufactured from that quantity of items. { \"TargetUri\" : \"scm_oil_industry/refinery.recipetarget\" , \"Duration\" : 18.0 , \"InputItems\" : [ { \"Uri\" : \"scm_oil_industry/crude.item\" , \"Count\" : 10.0 } ], \"OutputItems\" : [ { \"Uri\" : \"scm_oil_industry/diesel.item\" , \"Count\" : 1.0 } ], \"ResearchUri\" : \"base/iron_smelting.research\" } TargetUri : Path of the industry's .recipe target asset. Duration : Time to produce one item. InputItems (Array): Shows the items and the quantity of each required to produce products. Uri : Path of the .item asset. Count : Required quantity of the item. OutputItems (Array): How many products are produced with the input items. Uri : Path of the .item asset. Count : Quantity of the item produced. ResearchUri : Path of the .research asset that allows the building to be researched to make it available in game. Products ( .item asset) \u00b6 Items are the products that buildings require or generate. { \"IsLiquid\" : false , \"Color\" : \"353535\" , \"MeshUri\" : \"scm_oil_industry/crude_barrel.obj\" , \"ConveyorLength\" : 0.3 , \"Weight\" : 0.5 } IsLiquid : Specifies if the item is liquid. For now all items are set to false because liquid loads are not yet implemented in the game. Color : Hexadecimal value of the color that represents the item in the pop-ups. MeshUri : .obj file used to represent the item. ConveyorLength : This value represents the size of the item on the conveyor. If the value is too high, the items will either overlap each other or run off the sides of the conveyor. Weight : Weight of one unit item. Storing resources and products ( .warehouse asset ): \u00b6 Warehouses allow items be stored so that certain buildings and vehicles can use them. Stores cannot be supplied directly from a warehouse. They require a .capacities , .heapcapacities , or .stackcapacities asset in order to accept load. { \"ResearchUri\" : \"scm_oil_industry/refined_diesel.research\" , \"Size\" : { \"X\" : 3 , \"Y\" : 3 , \"Z\" : 3 }, \"Liveries\" : { \"default\" : { \"MeshUri\" : \"scm_oil_industry/diesel_tank.obj\" , \"MeshVariant\" : null , \"Lights\" : null } }, \"Price\" : 28000.0 , \"RunningCosts\" : null , \"Hidden\" : false } ResearchUri : Path of the .research asset that allows the building to be researched to make it available in game. Size (Array): Building size on X, Y, Z axes. Liveries (Array): Specifies the path of the building's .obj file. For more information about this section read the guide: Creating your first building mod. Price : Building purchase price. RunningCosts : Building maintenance cost. By default the value is null . Hidden : Indicates whether or not the building appears in the mine construction menu. By default the value is false. Stores ( .house asset ): \u00b6 Stores are the end of the production chain and demand products that are paid depending on supply and demand. With town or city growth, stores from time to time will increase in level and the quantity of products they demand. If demand is low and too much cargo is delivered, prices will drop and if demand is very high but we do not cover it, prices will rise but there is a risk that the business will go bankrupt and close. { \"PopulationRange\" : [ 1 , 1 ], \"CanHaveDemand\" : true , \"Size\" : { \"X\" : 7 , \"Y\" : 2 , \"Z\" : 5 }, \"Liveries\" : { \"default\" : { \"MeshUri\" : \"scm_oil_industry/gas_station.obj\" , \"MeshVariant\" : null , \"Lights\" : null }, \"default_night_1\" : { \"MeshUri\" : \"scm_oil_industry/gas_station.obj\" , \"MeshVariant\" : \"night_1\" , \"Lights\" : null } }, \"Price\" : 33000.0 , \"RunningCosts\" : null , \"Hidden\" : false } PopulationRange : Specifies the population range that the building provides to the city when the city generates the store. It shows the minimum and maximum value of the population that it can have. CanHaveDemand : Specifies if the building can demand products. Size : Building size in X, Y, Z axes. Liveries (Array): Specifies the path of the building's ,obj file. For more information about this section read the guide: Creating your first building mod. Price : It is the price of the building, in this case the demolition price. RunningCosts : This is the operative cost of the building. As it is a city building, it has no effect on the player's finances. It is null value iby default. Hidden : This parameter indicates whether the object will appear in the game or in menus as buildable asset in the player's menu. Hidden assets can still be visible in game, e.g. locomotives in recipes. Selling products ( .citydemandrecipe asset ): \u00b6 This asset allows city stores to request a demand for products. { \"ParentUri\" : null , \"BuildingUri\" : \"scm_oil_industry/gas_station.house\" , \"ItemUri\" : \"scm_oil_industry/diesel.item\" , \"Tier\" : 2 , \"Demand\" : null , \"DemandMultiplier\" : 2.0 , \"Price\" : null , \"PriceMultiplier\" : null } ParentUri : Path of the .citydemandrecipe asset if the demanded product requires other. For example, advanced wood frames require wood frames. BuildingUri : Path to the store's .house asset. ItemUri : Path of the .item asset of the product you are requesting. Tier : Store level is required to request the product. As with tiers of deposits, a tier 0 will appear at a starting point in the game with no research. A tier 1 will only appear after a tier 0 is receives demand within a town/city, and so on with each tier. If a tier 1 is active in a town/city, no new tier 0 stores will appear. Demand : Quantity of product demand. By default the value is null . DemandMultiplier : Multiplier of demand for the product. By default the value is null . Price : Price paid for one unit of product. If the value is null the game will calculate the price depending on the inflation. PriceMultiplier : Price multiplier. Researching the new industry ( .research asset ): \u00b6 Like other types of buildings in the game, industries can be researched to make them available in the game. Researches may requiere a quantity of money or a number of items that must be delivered to the laboratories, some researches only become unlocked after previous reserch. { \"ParentResearchUris\" : [ \"base/research_and_development.research\" ], \"Tier\" : 2 , \"Days\" : 100 , \"DaysMultiplier\" : null , \"PricePerDay\" : null , \"PricePerDayMultiplier\" : null , \"ItemsPerDay\" : [ { \"Uri\" : \"base/iron_bar.item\" , \"Count\" : null , \"CountMultiplier\" : null } ], \"CompletedByDefault\" : false , \"Hidden\" : false , \"Goal\" : false } ParentResearchUris (Array): This is a list with the paths of all the .research assets of the research on which it depends. Tier : Research level. Days : Number of days required to complete the research. DaysMultiplier : Multiplier of the number of days required to complete the research. PricePerDay : Daily amount of money used to complete the research. PricePerDayMultiplier : Multiplier of daily amount of money used to complete the research. ItemsPerDay (Array): Amount of items that must be delivered per day for research. Uri : Path of the .item asset required for research. Count : Quantity of items required. CountMultiplier : Required item quantity multiplier. CompletedByDefault : Specifies whether or not the research is completed from the beginning of the game. Hidden : Specifies whether or not the research is hidden in the game. Goal : Specifies if the research should display the game complete screen after the research ends. That's it! Further reading \u00b6 How to publish your mod","title":"Creating a small production chain"},{"location":"guides/content-mods/creating-a-small-production-chain/#creating-a-small-production-chain","text":"This guide is authored by Voxel Tycoon community member scailman","title":"Creating a small production chain"},{"location":"guides/content-mods/creating-a-small-production-chain/#introduction","text":"In this guide you will learn how to create a new industry and all the elements that make it up. It's not a complex task but it's necessary to take into account many elements that are related to each other. Since we've explained how to create vehicles and trains in other guides, the process for their creation will not be repeated in this guide. A production chain can be very simple, using products and buildings that already exist in the base game, or have a very high degree of complexity, it all depends on our imagination. The best thing before starting to create items, buildings and vehicles, is to have an idea of what we want to do and create a small diagram of all the elements that our production chain needs. This is highly recommended since on many occasions we will have to link buildings with items or vehicles and problems may come up when we forget to correctly configure something in an asset. A production chain is made up of several steps, ore deposits, mining buildings, product processing building, warehouses and stores. All the buildings interact with each other and each one has a different extraction and production time, so adjustments must be made to have a balanced production in the different phases.","title":"Introduction"},{"location":"guides/content-mods/creating-a-small-production-chain/#raw-material-deposits-depositrecipe-asset","text":"Deposits of raw materials are the beginning of the production chain and are scattered throughout the regions. They are the main source of resources. As a finite amount of resources, they will become depleted when fully mined and will no longer be possible to extract. { \"ItemUri\" : \"scm_oil_industry/crude.item\" , \"TintColor\" : \"353535\" , \"RadiusMultiplier\" : 0.5 , \"CapacityMultiplier\" : null , \"DecorationUris\" : [], \"Tier\" : 0 } ItemUri : Path of the item asset that will be extracted from the deposit. TintColor : This is the hexadecimal value of the color that the element represents on the map and when we press the Alt key to show icons on the map. RadiusMultiplier : Deposit size. By default the value is null . Values above 1 increase size and below decrease it. CapacityMultiplier : Amount of resources that can be extracted from the deposit. The default value is null . DecorationUris (Array): Deposits can have decorations like trees in forests. It's a list of all the paths of the asset files that will be shown as decoration on the deposit. \"DecorationUris\" : [ \"base/spruce.plant\" ] Tier : Deposit level. Deposits at tier 0 are included in the first available region when a new map is created. Higher tiers are available at a further distance. E.g. Coal, Iron Ore and Wood are tier 0, but Copper, Sand and Stone are tier 1.","title":"Raw material deposits (.depositrecipe asset)"},{"location":"guides/content-mods/creating-a-small-production-chain/#extracting-resources-mine-asset","text":"Mines or any other type of building that allows the extraction of raw resources are special buildings that must be placed whithin the area of the deposit. They can only be placed in the resource that it can extract, for example you can't place an iron mine in a coal deposit. Mines can have animated submeshes like steam locomotives and sound and smoke for when they're active. { \"OutputInterval\" : 5.5 , \"Submeshes\" : [ { \"MeshUri\" : \"scm_oil_industry/main_arm.obj\" , \"DefaultAnimation\" : { \"PositionY\" : { \"0\" : 1.92 }, \"PositionZ\" : { \"0\" : 0.176 // y -0 , 176 }, \"RotationX\" : { \"0\" : 0.0 , \"0.125\" : -6.12 , \"0.25\" : -18.682 , \"0.375\" : -29.730 , \"0.5\" : -34.724 , \"0.625\" : -33.659 , \"0.75\" : -20.718 , \"0.875\" : -6.333 , \"1\" : 0.0 } } }, { \"MeshUri\" : \"scm_oil_industry/rod.obj\" , \"DefaultAnimation\" : { \"PositionY\" : { \"0\" : 1.069 , \"0.125\" : 0.991 , \"0.25\" : 0.802 , \"0.375\" : 0.613 , \"0.5\" : 0.534 , \"0.625\" : 0.613 , \"0.75\" : 0.802 , \"0.875\" : 0.991 , \"1\" : 1.069 }, \"PositionZ\" : { \"0\" : -0.738 , \"0.125\" : -0.549 , \"0.25\" : -0.47 , \"0.375\" : -0.549 , \"0.5\" : -0.737 , \"0.625\" : -0.926 , \"0.75\" : -1.005 , \"0.875\" : -0.926 , \"1\" : -0.738 }, \"RotationX\" : { \"0\" : 0.0 , \"0.125\" : -12.104 , \"0.25\" : -15.204 , \"0.375\" : -6.296 , \"0.5\" : 8.13 , \"0.625\" : 20.407 , \"0.75\" : 20.007 , \"0.875\" : 12.128 , \"1\" : 0.0 } } }, { \"MeshUri\" : \"scm_oil_industry/rotor.obj\" , \"DefaultAnimation\" : { \"PositionY\" : { \"0\" : 0.801 }, \"PositionZ\" : { \"0\" : -0.738 }, \"RotationX\" : { \"0\" : 0.0 , \"0.125\" : 45 , \"0.25\" : 90 , \"0.375\" : 135 , \"0.5\" : 180 , \"0.625\" : 225 , \"0.75\" : 270 , \"0.875\" : 315 , \"1\" : 360 } } } ], \"Sounds\" : null , \"Smokes\" : null , \"ResearchUri\" : \"scm_oil_industry/oil_extraction.research\" , \"Size\" : { \"X\" : 2 , \"Y\" : 3 , \"Z\" : 3 }, \"Liveries\" : { \"default\" : { \"MeshUri\" : \"scm_oil_industry/crude_pump.obj\" , \"MeshVariant\" : null , \"Lights\" : null } }, \"Price\" : 53000.0 , \"RunningCosts\" : null , \"Hidden\" : false } OutputInterval : The time in seconds it takes to generate one unit. Submeshes (Array): The positions of the animations of the different meshes. For more information read the guide: Animating locomotive rods. Sound (Array): SoundUri : Path of the .wav file used when the mine is active. Time : Sound duration time. \"Sounds\" : [ { \"SoundUri\" : \"base/alloy_smelter_device.wav\" , \"Time\" : 0.5 } ] Smoke (Array): Uri : Path of the .smoke asset. Position : Smoke position in X, Y, Z axis. \"Smokes\" : [ { \"Uri\" : \"scm_oil_industry/refinery_device.smoke\" , \"Position\" : [ -1.583 , 5.4 , 1.305 ] } ResearchUri : Path of the .research asset that allows the building to be researched to make it available in game. Size (Array): Building size on X, Y, Z axes. Liveries (Array): Specifies the path of the building's .obj file. For more information about this section read the guide: Creating your first building mod. Price : Building purchase price. RunningCosts : Building maintenance cost. By default the value is null . Hidden : Indicates whether or not the building appears in the mine construction menu. By default the value is false. As with trains or trucks, you must have a .capacities , .heapcapacities , or .stackcapacities asset to specify which item it produces. { \"Items\" : { \"scm_oil_industry/crude.item\" : null }, \"TargetUri\" : \"scm_oil_industry/crude_pump.mine\" , \"MaxWeight\" : 100.0 , \"LoadingSpeedMultiplier\" : 1.0 , \"UnloadingSpeedMultiplier\" : 1.0 }","title":"Extracting resources (.mine asset )"},{"location":"guides/content-mods/creating-a-small-production-chain/#manufacturing-products-device-asset","text":"Devices are the intermediate industries between raw material deposits and stores. These buildings require materials to produce the products that will be supplied to the stores. Unlike the other buildings, these have input and output conveyor to supply raw materials or other required items. The entrances and exits can be placed on any of the four facades of the building and don't have an established directionality, that is, if the building requires one item to produce another and has one entrance and one exit, it doesn't matter the direction of the conveyor. { \"RecipeTargetUri\" : \"scm_oil_industry/refinery.recipetarget\" , \"Submeshes\" : [], \"Sounds\" : [ { \"SoundUri\" : \"scm_oil_industry/refinery_device.wav\" , \"Time\" : 0.5 } ], \"Smokes\" : [ { \"Uri\" : \"scm_oil_industry/refinery_device.smoke\" , \"Position\" : [ -1.583 , 5.4 , 1.305 ] } ], \"ClippingPlanes\" : null , \"Conveyors\" : [ { \"SpawnConnection\" : 1 , \"Uri\" : \"base/regular.conveyor\" , \"ConveyorType\" : \"StraightShort\" , \"Position\" : { \"X\" : 0 , \"Y\" : 0 , \"Z\" : 4 }, \"Rotation\" : \"Rotate90\" , \"Handle\" : false }, { \"SpawnConnection\" : null , \"Uri\" : \"base/regular.conveyor\" , \"ConveyorType\" : \"Cap\" , \"Position\" : { \"X\" : -1 , \"Y\" : 0 , \"Z\" : 4 }, \"Rotation\" : \"Rotate90\" , \"Handle\" : true }, { \"SpawnConnection\" : 1 , \"Uri\" : \"base/regular.conveyor\" , \"ConveyorType\" : \"StraightShort\" , \"Position\" : { \"X\" : 0 , \"Y\" : 0 , \"Z\" : 5 }, \"Rotation\" : \"Rotate90\" , \"Handle\" : false }, { \"SpawnConnection\" : null , \"Uri\" : \"base/regular.conveyor\" , \"ConveyorType\" : \"Cap\" , \"Position\" : { \"X\" : -1 , \"Y\" : 0 , \"Z\" : 5 }, \"Rotation\" : \"Rotate90\" , \"Handle\" : true } ], \"ResearchUri\" : \"scm_oil_industry/oil_extraction.research\" , \"Size\" : { \"X\" : 7 , \"Y\" : 6 , \"Z\" : 8 }, \"Liveries\" : { \"default\" : { \"MeshUri\" : \"scm_oil_industry/refinery_device.obj\" , \"MeshVariant\" : null , \"Lights\" : null } }, \"Price\" : 45500.0 , \"RunningCosts\" : null , \"Hidden\" : false } RecipeTargetUri : The asset responsible for the building to accept recipes. The asset only contains the {} characters. Submeshes (Array): If the building has animated meshes in this section, the positions and rotations of each mesh are specified. Sound (Array): SoundUri : Path of the .wav file used when the mine is active. Time : Sound duration time. Smoke (Array): Uri : Path of the .smoke asset. Position : Smoke position in X, Y, Z axis. ClippingPlanes : This is a plane that allows to darken an area of the building. An example is the plane used in train depots. Conveyors (Array): This section defines the conveyor belt as well as its position, orientation and type. An industry can have as many conveyor belts as desired and they don't all have to be on the same building facade. In this conveyor placement example, the building has a size of 6x8. In the right diagram, the light gray area represents the building. The coordinates (0,0) are always in the upper right corner of the building and the positive values go from right to left and from top to bottom. Values will be negative if they are above or to the right of the coordinates (0,0). The code shown above represent an industry that have two conveyor (orange area in the diagram) that start at positions (0,4) and (0,5) respectively and have a rotation of 90 degrees. The rotation of the conveyors goes counterclockwise and starts at 0 degrees at the bottom of the building. SpawnConnection : Specifies the connection of the conveyor where items will spawn. The beginning of the conveyor always has a value of 1 . Uri : Path of the .conveyor asset. ConveyorType : Type of tape to be placed in position. The possible values are: Cap, StraightShort and StraightExtraShort. Position : Position of the tape section on the X, Y, Z axes with respect to the grid shown in the previous image. Rotation : Conveyor rotation. Possible values: Rotation0 , Rotation90 , Rotation180 , and Rotation270 . Handle : Indicates whether the player can connect a conveyor or not. ResearchUri : Path of the .research asset that allows the building to be researched to make it available in game. Size (Array): Building size on X, Y, Z axes. Liveries (Array): Specifies the path of the building's .obj file. For more information about this section read the guide: Creating your first building mod. Price : Building purchase price. RunningCosts : Building maintenance cost. By default the value is null . Hidden : Indicates whether or not the building appears in the mine construction menu. By default the value is false .","title":"Manufacturing products (.device asset)"},{"location":"guides/content-mods/creating-a-small-production-chain/#devices-recipes-recipe-asset","text":"In order to produce items an industry must have a recipe that tells what item it requires, how much quantity it needs, and what product is manufactured from that quantity of items. { \"TargetUri\" : \"scm_oil_industry/refinery.recipetarget\" , \"Duration\" : 18.0 , \"InputItems\" : [ { \"Uri\" : \"scm_oil_industry/crude.item\" , \"Count\" : 10.0 } ], \"OutputItems\" : [ { \"Uri\" : \"scm_oil_industry/diesel.item\" , \"Count\" : 1.0 } ], \"ResearchUri\" : \"base/iron_smelting.research\" } TargetUri : Path of the industry's .recipe target asset. Duration : Time to produce one item. InputItems (Array): Shows the items and the quantity of each required to produce products. Uri : Path of the .item asset. Count : Required quantity of the item. OutputItems (Array): How many products are produced with the input items. Uri : Path of the .item asset. Count : Quantity of the item produced. ResearchUri : Path of the .research asset that allows the building to be researched to make it available in game.","title":"Devices recipes (.recipe asset)"},{"location":"guides/content-mods/creating-a-small-production-chain/#products-item-asset","text":"Items are the products that buildings require or generate. { \"IsLiquid\" : false , \"Color\" : \"353535\" , \"MeshUri\" : \"scm_oil_industry/crude_barrel.obj\" , \"ConveyorLength\" : 0.3 , \"Weight\" : 0.5 } IsLiquid : Specifies if the item is liquid. For now all items are set to false because liquid loads are not yet implemented in the game. Color : Hexadecimal value of the color that represents the item in the pop-ups. MeshUri : .obj file used to represent the item. ConveyorLength : This value represents the size of the item on the conveyor. If the value is too high, the items will either overlap each other or run off the sides of the conveyor. Weight : Weight of one unit item.","title":"Products (.item asset)"},{"location":"guides/content-mods/creating-a-small-production-chain/#storing-resources-and-products-warehouse-asset","text":"Warehouses allow items be stored so that certain buildings and vehicles can use them. Stores cannot be supplied directly from a warehouse. They require a .capacities , .heapcapacities , or .stackcapacities asset in order to accept load. { \"ResearchUri\" : \"scm_oil_industry/refined_diesel.research\" , \"Size\" : { \"X\" : 3 , \"Y\" : 3 , \"Z\" : 3 }, \"Liveries\" : { \"default\" : { \"MeshUri\" : \"scm_oil_industry/diesel_tank.obj\" , \"MeshVariant\" : null , \"Lights\" : null } }, \"Price\" : 28000.0 , \"RunningCosts\" : null , \"Hidden\" : false } ResearchUri : Path of the .research asset that allows the building to be researched to make it available in game. Size (Array): Building size on X, Y, Z axes. Liveries (Array): Specifies the path of the building's .obj file. For more information about this section read the guide: Creating your first building mod. Price : Building purchase price. RunningCosts : Building maintenance cost. By default the value is null . Hidden : Indicates whether or not the building appears in the mine construction menu. By default the value is false.","title":"Storing resources and products (.warehouse asset ):"},{"location":"guides/content-mods/creating-a-small-production-chain/#stores-house-asset","text":"Stores are the end of the production chain and demand products that are paid depending on supply and demand. With town or city growth, stores from time to time will increase in level and the quantity of products they demand. If demand is low and too much cargo is delivered, prices will drop and if demand is very high but we do not cover it, prices will rise but there is a risk that the business will go bankrupt and close. { \"PopulationRange\" : [ 1 , 1 ], \"CanHaveDemand\" : true , \"Size\" : { \"X\" : 7 , \"Y\" : 2 , \"Z\" : 5 }, \"Liveries\" : { \"default\" : { \"MeshUri\" : \"scm_oil_industry/gas_station.obj\" , \"MeshVariant\" : null , \"Lights\" : null }, \"default_night_1\" : { \"MeshUri\" : \"scm_oil_industry/gas_station.obj\" , \"MeshVariant\" : \"night_1\" , \"Lights\" : null } }, \"Price\" : 33000.0 , \"RunningCosts\" : null , \"Hidden\" : false } PopulationRange : Specifies the population range that the building provides to the city when the city generates the store. It shows the minimum and maximum value of the population that it can have. CanHaveDemand : Specifies if the building can demand products. Size : Building size in X, Y, Z axes. Liveries (Array): Specifies the path of the building's ,obj file. For more information about this section read the guide: Creating your first building mod. Price : It is the price of the building, in this case the demolition price. RunningCosts : This is the operative cost of the building. As it is a city building, it has no effect on the player's finances. It is null value iby default. Hidden : This parameter indicates whether the object will appear in the game or in menus as buildable asset in the player's menu. Hidden assets can still be visible in game, e.g. locomotives in recipes.","title":"Stores (.house asset ):"},{"location":"guides/content-mods/creating-a-small-production-chain/#selling-products-citydemandrecipe-asset","text":"This asset allows city stores to request a demand for products. { \"ParentUri\" : null , \"BuildingUri\" : \"scm_oil_industry/gas_station.house\" , \"ItemUri\" : \"scm_oil_industry/diesel.item\" , \"Tier\" : 2 , \"Demand\" : null , \"DemandMultiplier\" : 2.0 , \"Price\" : null , \"PriceMultiplier\" : null } ParentUri : Path of the .citydemandrecipe asset if the demanded product requires other. For example, advanced wood frames require wood frames. BuildingUri : Path to the store's .house asset. ItemUri : Path of the .item asset of the product you are requesting. Tier : Store level is required to request the product. As with tiers of deposits, a tier 0 will appear at a starting point in the game with no research. A tier 1 will only appear after a tier 0 is receives demand within a town/city, and so on with each tier. If a tier 1 is active in a town/city, no new tier 0 stores will appear. Demand : Quantity of product demand. By default the value is null . DemandMultiplier : Multiplier of demand for the product. By default the value is null . Price : Price paid for one unit of product. If the value is null the game will calculate the price depending on the inflation. PriceMultiplier : Price multiplier.","title":"Selling products (.citydemandrecipe asset ):"},{"location":"guides/content-mods/creating-a-small-production-chain/#researching-the-new-industry-research-asset","text":"Like other types of buildings in the game, industries can be researched to make them available in the game. Researches may requiere a quantity of money or a number of items that must be delivered to the laboratories, some researches only become unlocked after previous reserch. { \"ParentResearchUris\" : [ \"base/research_and_development.research\" ], \"Tier\" : 2 , \"Days\" : 100 , \"DaysMultiplier\" : null , \"PricePerDay\" : null , \"PricePerDayMultiplier\" : null , \"ItemsPerDay\" : [ { \"Uri\" : \"base/iron_bar.item\" , \"Count\" : null , \"CountMultiplier\" : null } ], \"CompletedByDefault\" : false , \"Hidden\" : false , \"Goal\" : false } ParentResearchUris (Array): This is a list with the paths of all the .research assets of the research on which it depends. Tier : Research level. Days : Number of days required to complete the research. DaysMultiplier : Multiplier of the number of days required to complete the research. PricePerDay : Daily amount of money used to complete the research. PricePerDayMultiplier : Multiplier of daily amount of money used to complete the research. ItemsPerDay (Array): Amount of items that must be delivered per day for research. Uri : Path of the .item asset required for research. Count : Quantity of items required. CountMultiplier : Required item quantity multiplier. CompletedByDefault : Specifies whether or not the research is completed from the beginning of the game. Hidden : Specifies whether or not the research is hidden in the game. Goal : Specifies if the research should display the game complete screen after the research ends. That's it!","title":"Researching the new industry (.research asset ):"},{"location":"guides/content-mods/creating-a-small-production-chain/#further-reading","text":"How to publish your mod","title":"Further reading"},{"location":"guides/content-mods/creating-your-first-building-mod/","text":"Creating your first building mod \u00b6 This guide is authored by Voxel Tycoon community member scailman Introduction \u00b6 This guide tries to show the basic steps to create a mod that adds new buildings in the city generation in Voxel Tycoon (as per v0.80 ). The guide is not intended to teach you modeling, so you must have a basic understanding of 3DS Max, Blender, Wings 3D, or any other program you want to use that allows you to import and export .obj files. Modeling suggestions \u00b6 As in all games, there are certain recommendations that must be followed when creating a 3d model. The size of the building should not exceed 5x5x10m. The model must have the minimum details that make it recognizable but without overloading the model. The colors have to be pastel colors so that match the same style as the rest of the buildings in the game. Use dark tones for windows. I recommend the value #272727 (RGB 39,39,39) . Basic concepts when modeling a building \u00b6 When starting the creation of a building, it is a good idea to think about what type of building we want to represent and what size it will have. A good recommendation is to import a building similar to the base game buildings on the size of our model. A good practice is to start with a grid with the size of the building we want to make. See the following image. Each grid represents a 1x1 meter that matches a voxel in the game. Taking these dimensions into account, we know that the building must not exceed these limits when creating it. The building can have as many parts as it can be, but when we export it to the game, it is recommended that there be only one single object that conforms to the entire building. The coordinate axis must be located at 0,0,0 , although then the building is not centered with respect to the plane that we have used as a reference to define the size. This must be taken into account so that the building does not overlap with the roads or other buildings. The position of the main facade is important so that once the building is already in the game, it appears correctly located next to the roads and as a reference to the dimensions of the base of the building that we will have to configure later. In this case, the X-axis is the main facade of the building and measures 6m and the Z-axis is the bottom of the building and measures 4m. The axis orientation may vary depending on the 3d program being used, which in this case is 3ds max. Texturing the building \u00b6 VT texturing is very basic, it uses a 64x64 pixel square texture divided into different squares in which each unit will represent a color when the building is exported. This base texture can be found in the folder `Content/your_first_pack\" where the game is installed. Once this texture has been applied to the model, we can start creating the unwrap separating all the polygons of the model depending on the color that we want them to have once it is finished. This is how the building unwrap should look depending on the number of colors we are going to use. For the night effect of the windows, in case the building has windows, the windows must be separated in different colors in the unwrap since they will be the different variations of windows lit at night. In the previous image, the unwrap has been created so that the building has three variations of night windows. Later we will explain how to create the necessary settings so that the windows appear lit at night. Building export \u00b6 Once we have the finished model, we can always export it to the game in .obj format. For now, it is only a simple 3d model but later we will configure the necessary files so that the game recognizes it and can generate our building in the cities. All mods must be contained in the folder Content/<mod_name> . For convenience and order, it's recommended to follow the same directory structure that the game uses and that can be verified by opening the folder Content/base . Building settings ( .house asset) \u00b6 In order for the game to recognize that we have created a building, we must create or copy the .house file of any existing building and modify the necessary parameters. This file is located in the folder Content/base/houses . To edit the game files we only need a text editor such as Notepad ++, or Visual Studio Code. I highly recommend VS Code as you can compare side by side. { \"PopulationRange\" : [ 8 , 12 ], \"CanHaveDemand\" : false , \"Size\" : { \"X\" : 6 , \"Y\" : 4 , \"Z\" : 4 }, \"Liveries\" : { \"default\" : { \"MeshUri\" : \"arab_buildings/arab_house5_desert.obj\" , \"MeshVariant\" : null , \"Lights\" : null }, \"default_night_1\" : { \"MeshUri\" : \"arab_buildings/arab_house5_desert.obj\" , \"MeshVariant\" : \"night_1\" , \"Lights\" : null }, \"default_night_2\" : { \"MeshUri\" : \"arab_buildings/arab_house5_desert.obj\" , \"MeshVariant\" : \"night_2\" , \"Lights\" : null }, \"default_night_3\" : { \"MeshUri\" : \"arab_buildings/arab_house5_desert.obj\" , \"MeshVariant\" : \"night_3\" , \"Lights\" : null } }, \"Price\" : 8800.0 , \"RunningCosts\" : null , \"Hidden\" : false } This is what the .house asset file looks like and contains the following parameters: PopulationRange : Indicates the maximum and minimum population that the building will have when the city generates it. CanHaveDemand ( true / false ): This parameter indicates if it can request a product, as is the case in stores. In the rest of the buildings, the value is false. Size : Specifies the size of the building. These are the values we use in the reference plane. For the value of Y, the height, we must always round up, for example, if our building measures 2.4m (2.4 voxels) we must always indicate a value of 3. Liveries : In this parameter, the path of the mesh of our building that we exported previously is indicated. Note that the first part of MeshUri (arab_buildinhgs), is the name of our mod followed by the name of the .obj file. default_night_1(..3) : is the name of the different liveries to show the windows lit at night. There are three liveries that match the unwrap of the model. MeshVariant : Indicates the name of the variant specified in the .obj.meta file that defines the colors of the model that we will explain later. Price : It is the price of the building, in this case, the demolition price. RunningCosts : It is the operating cost of the building. As it is a city building, it has no effect on the player's finances. A null value indicates that loc automatically calculates the game. Hidden ( true / false ); This parameter indicates whether the object will appear in the game or in menus as a buildable asset in the player's menu. Hide assets are still visible in-game, eg. locomotives in recipes. Building settings ( .citybuildingspawninfo asset) \u00b6 This file tells the game how our building should generate when a city grows. { \"Uri\" : \"arab_buildings/arab_house5.house\" , \"ProportionalCount\" : 50 , \"Density\" : 0.0 , \"Biomes\" : [ \"arab_buildings/desert2.biome\" ] } Uri : It is the path of the .house file that we explained previously. ProportionalCount : It is the proportion in which the building will appear with respect to the total number of buildings in the city. Density : Density of buildings in the city of this type. Biomes : This parameter indicates in which specific biome the building should appear. If the value is \"null\", the building will appear in all biomes, but if a biome is specified, the building will only appear in that biome as the buildings in the Arctic biome. Asset Editor \u00b6 The asset editor integrated into the game and accessible from the main menu, allows us to modify the colors of any asset in the game. In it, we will look for the building that we have created. The first time we access our building it will appear in gray color. This means you don't have a color palette assigned yet. To create a color palette we must click on Generate Palette and the model will now have the colors of the reference image that we used when creating the unwrap. To assign colors, we simply have to click on the different parts of the building that will be highlighted as we move the mouse over it and select a color in the window that appears on the right. To specify a specific color that we already have defined, you can enter the hexadecimal value of the color. The different bars that appear below the color picker allow you to add brightness to the material or not to be affected by light at night, making it have the effect of lighting. Once we have finished applying the colors, the building will look like this. The different colors of the palette are saved in the .obj.meta file and contain the different variants that indicate what color and properties should be replaced for the effect of illuminated windows. { \"Materials\" : [ // ...skippi n g a fe w colors here t o t o simpli f y t he example... { \"Color\" : \"ffde9f\" , \"Glassiness\" : 0.0 , \"Specular\" : 0.0 , \"Smoothness\" : 0.0 , \"Emission\" : 0.0 }, { \"Color\" : \"a78466\" , \"Glassiness\" : 0.0 , \"Specular\" : 0.0 , \"Smoothness\" : 0.0 , \"Emission\" : 0.0 }, { \"Color\" : \"c0c199\" , \"Glassiness\" : 0.0 , \"Specular\" : 0.0 , \"Smoothness\" : 0.0 , \"Emission\" : 0.0 }, { \"Color\" : \"6a5341\" , \"Glassiness\" : 0.0 , \"Specular\" : 0.0 , \"Smoothness\" : 0.0 , \"Emission\" : 0.0 } ], \"Variants\" : { \"night_1\" : { \"8\" : { \"Color\" : \"aa9d68\" , \"Glassiness\" : 0.0 , \"Specular\" : 0.0 , \"Smoothness\" : 0.0 , \"Emission\" : 1.0 } }, \"night_2\" : { \"9\" : { \"Color\" : \"aa9d68\" , \"Glassiness\" : 0.0 , \"Specular\" : 0.0 , \"Smoothness\" : 0.0 , \"Emission\" : 1.0 } }, \"night_3\" : { \"10\" : { \"Color\" : \"aa9d68\" , \"Glassiness\" : 0.0 , \"Specular\" : 0.0 , \"Smoothness\" : 0.0 , \"Emission\" : 1.0 } } } } The code above shows the color palette of the example building. We skipped some colors at the beginning because the listing would be too large but you can see the section of the variants. In the variants section, the names of the three variants are defined for the night windows that appeared in the .house file named night_1 - 3 . In this case, the values 8, 9, 10 correspond to the colors in the upper section which are the ones to be replaced by the colors and parameters of the Variants section. To know what values you have to specify, the colors range from 0 to 15 (16 in total) but the easy way to find the correct colors is by the hexadecimal value. If color #272727 was used, all colors with this value represent windows. Another parameter that can identify the windows in the Glossiness parameter, which in the rest of the colors will be 0.0 . Localization ( .strings asset) \u00b6 The location file allows indicating the name that will be shown in the menus or in the new information tool (pre-alpha 0.80) of the building. { \"LocaleUri\" : \"base/en.locale\" , \"Items\" : { \"arab_buildings/desert2.biome#DisplayName\" : \"Desert\" , \"arab_buildings/palm_tree.plant#DisplayName\" : \"Palm tree\" , \"arab_buildings/arab_house1.house#DisplayName\" : \"House 1\" , \"arab_buildings/arab_house2.house#DisplayName\" : \"House 2\" , \"arab_buildings/arab_house3.house#DisplayName\" : \"House 3\" , \"arab_buildings/arab_house4.house#DisplayName\" : \"House 4\" , \"arab_buildings/arab_house5.house#DisplayName\" : \"House 5\" , \"arab_buildings/arab_obelisc_desert.house#DisplayName\" : \"Obelisk\" , \"arab_buildings/arab_store.house#DisplayName\" : \"Store\" , \"arab_buildings/arab_watertower.house#DisplayName\" : \"Water tower\" , } } The image shows that the indicated LocaleUri language is English and in the Items section the path of all the files of the different objects created is specified, in this case several buildings ( .house ), a biome ( .biome ) and a plant ( .plant ). You can have as many .strings files as languages you want to have in the mod. Publishing the mod \u00b6 Once you have finished modeling the building, configuring the different files and applying the color palette, all you have to do is create an image of the mod ( preview.png ) that will be shown in the mod finder and that must have dimensions of 512x512 pixels . It is also necessary to create a mod.json file where the description of the mod is specified and which in turn allows the mod to appear in the mod selection window when creating a new game. { \"Title\" : \"Adobe buildings V1.0\" , \"Description\" : \"This mod add new desert biome and 8 specific buildings for this biome. Buildings: - 5 different residential houses - 1 shop for all base game items - 1 obelisk - 1 Water tower Biomes: - Desert with palm trees Localization: bg, de, en, es, fr, it, nl, pl, pt, ru, tr, uk. Changelog: -Release. Version: 1.0.\" } Further reading \u00b6 How to publish your mod Creating your first locomotive mod","title":"Creating your first building mod"},{"location":"guides/content-mods/creating-your-first-building-mod/#creating-your-first-building-mod","text":"This guide is authored by Voxel Tycoon community member scailman","title":"Creating your first building mod"},{"location":"guides/content-mods/creating-your-first-building-mod/#introduction","text":"This guide tries to show the basic steps to create a mod that adds new buildings in the city generation in Voxel Tycoon (as per v0.80 ). The guide is not intended to teach you modeling, so you must have a basic understanding of 3DS Max, Blender, Wings 3D, or any other program you want to use that allows you to import and export .obj files.","title":"Introduction"},{"location":"guides/content-mods/creating-your-first-building-mod/#modeling-suggestions","text":"As in all games, there are certain recommendations that must be followed when creating a 3d model. The size of the building should not exceed 5x5x10m. The model must have the minimum details that make it recognizable but without overloading the model. The colors have to be pastel colors so that match the same style as the rest of the buildings in the game. Use dark tones for windows. I recommend the value #272727 (RGB 39,39,39) .","title":"Modeling suggestions"},{"location":"guides/content-mods/creating-your-first-building-mod/#basic-concepts-when-modeling-a-building","text":"When starting the creation of a building, it is a good idea to think about what type of building we want to represent and what size it will have. A good recommendation is to import a building similar to the base game buildings on the size of our model. A good practice is to start with a grid with the size of the building we want to make. See the following image. Each grid represents a 1x1 meter that matches a voxel in the game. Taking these dimensions into account, we know that the building must not exceed these limits when creating it. The building can have as many parts as it can be, but when we export it to the game, it is recommended that there be only one single object that conforms to the entire building. The coordinate axis must be located at 0,0,0 , although then the building is not centered with respect to the plane that we have used as a reference to define the size. This must be taken into account so that the building does not overlap with the roads or other buildings. The position of the main facade is important so that once the building is already in the game, it appears correctly located next to the roads and as a reference to the dimensions of the base of the building that we will have to configure later. In this case, the X-axis is the main facade of the building and measures 6m and the Z-axis is the bottom of the building and measures 4m. The axis orientation may vary depending on the 3d program being used, which in this case is 3ds max.","title":"Basic concepts when modeling a building"},{"location":"guides/content-mods/creating-your-first-building-mod/#texturing-the-building","text":"VT texturing is very basic, it uses a 64x64 pixel square texture divided into different squares in which each unit will represent a color when the building is exported. This base texture can be found in the folder `Content/your_first_pack\" where the game is installed. Once this texture has been applied to the model, we can start creating the unwrap separating all the polygons of the model depending on the color that we want them to have once it is finished. This is how the building unwrap should look depending on the number of colors we are going to use. For the night effect of the windows, in case the building has windows, the windows must be separated in different colors in the unwrap since they will be the different variations of windows lit at night. In the previous image, the unwrap has been created so that the building has three variations of night windows. Later we will explain how to create the necessary settings so that the windows appear lit at night.","title":"Texturing the building"},{"location":"guides/content-mods/creating-your-first-building-mod/#building-export","text":"Once we have the finished model, we can always export it to the game in .obj format. For now, it is only a simple 3d model but later we will configure the necessary files so that the game recognizes it and can generate our building in the cities. All mods must be contained in the folder Content/<mod_name> . For convenience and order, it's recommended to follow the same directory structure that the game uses and that can be verified by opening the folder Content/base .","title":"Building export"},{"location":"guides/content-mods/creating-your-first-building-mod/#building-settings-house-asset","text":"In order for the game to recognize that we have created a building, we must create or copy the .house file of any existing building and modify the necessary parameters. This file is located in the folder Content/base/houses . To edit the game files we only need a text editor such as Notepad ++, or Visual Studio Code. I highly recommend VS Code as you can compare side by side. { \"PopulationRange\" : [ 8 , 12 ], \"CanHaveDemand\" : false , \"Size\" : { \"X\" : 6 , \"Y\" : 4 , \"Z\" : 4 }, \"Liveries\" : { \"default\" : { \"MeshUri\" : \"arab_buildings/arab_house5_desert.obj\" , \"MeshVariant\" : null , \"Lights\" : null }, \"default_night_1\" : { \"MeshUri\" : \"arab_buildings/arab_house5_desert.obj\" , \"MeshVariant\" : \"night_1\" , \"Lights\" : null }, \"default_night_2\" : { \"MeshUri\" : \"arab_buildings/arab_house5_desert.obj\" , \"MeshVariant\" : \"night_2\" , \"Lights\" : null }, \"default_night_3\" : { \"MeshUri\" : \"arab_buildings/arab_house5_desert.obj\" , \"MeshVariant\" : \"night_3\" , \"Lights\" : null } }, \"Price\" : 8800.0 , \"RunningCosts\" : null , \"Hidden\" : false } This is what the .house asset file looks like and contains the following parameters: PopulationRange : Indicates the maximum and minimum population that the building will have when the city generates it. CanHaveDemand ( true / false ): This parameter indicates if it can request a product, as is the case in stores. In the rest of the buildings, the value is false. Size : Specifies the size of the building. These are the values we use in the reference plane. For the value of Y, the height, we must always round up, for example, if our building measures 2.4m (2.4 voxels) we must always indicate a value of 3. Liveries : In this parameter, the path of the mesh of our building that we exported previously is indicated. Note that the first part of MeshUri (arab_buildinhgs), is the name of our mod followed by the name of the .obj file. default_night_1(..3) : is the name of the different liveries to show the windows lit at night. There are three liveries that match the unwrap of the model. MeshVariant : Indicates the name of the variant specified in the .obj.meta file that defines the colors of the model that we will explain later. Price : It is the price of the building, in this case, the demolition price. RunningCosts : It is the operating cost of the building. As it is a city building, it has no effect on the player's finances. A null value indicates that loc automatically calculates the game. Hidden ( true / false ); This parameter indicates whether the object will appear in the game or in menus as a buildable asset in the player's menu. Hide assets are still visible in-game, eg. locomotives in recipes.","title":"Building settings (.house asset)"},{"location":"guides/content-mods/creating-your-first-building-mod/#building-settings-citybuildingspawninfo-asset","text":"This file tells the game how our building should generate when a city grows. { \"Uri\" : \"arab_buildings/arab_house5.house\" , \"ProportionalCount\" : 50 , \"Density\" : 0.0 , \"Biomes\" : [ \"arab_buildings/desert2.biome\" ] } Uri : It is the path of the .house file that we explained previously. ProportionalCount : It is the proportion in which the building will appear with respect to the total number of buildings in the city. Density : Density of buildings in the city of this type. Biomes : This parameter indicates in which specific biome the building should appear. If the value is \"null\", the building will appear in all biomes, but if a biome is specified, the building will only appear in that biome as the buildings in the Arctic biome.","title":"Building settings (.citybuildingspawninfo asset)"},{"location":"guides/content-mods/creating-your-first-building-mod/#asset-editor","text":"The asset editor integrated into the game and accessible from the main menu, allows us to modify the colors of any asset in the game. In it, we will look for the building that we have created. The first time we access our building it will appear in gray color. This means you don't have a color palette assigned yet. To create a color palette we must click on Generate Palette and the model will now have the colors of the reference image that we used when creating the unwrap. To assign colors, we simply have to click on the different parts of the building that will be highlighted as we move the mouse over it and select a color in the window that appears on the right. To specify a specific color that we already have defined, you can enter the hexadecimal value of the color. The different bars that appear below the color picker allow you to add brightness to the material or not to be affected by light at night, making it have the effect of lighting. Once we have finished applying the colors, the building will look like this. The different colors of the palette are saved in the .obj.meta file and contain the different variants that indicate what color and properties should be replaced for the effect of illuminated windows. { \"Materials\" : [ // ...skippi n g a fe w colors here t o t o simpli f y t he example... { \"Color\" : \"ffde9f\" , \"Glassiness\" : 0.0 , \"Specular\" : 0.0 , \"Smoothness\" : 0.0 , \"Emission\" : 0.0 }, { \"Color\" : \"a78466\" , \"Glassiness\" : 0.0 , \"Specular\" : 0.0 , \"Smoothness\" : 0.0 , \"Emission\" : 0.0 }, { \"Color\" : \"c0c199\" , \"Glassiness\" : 0.0 , \"Specular\" : 0.0 , \"Smoothness\" : 0.0 , \"Emission\" : 0.0 }, { \"Color\" : \"6a5341\" , \"Glassiness\" : 0.0 , \"Specular\" : 0.0 , \"Smoothness\" : 0.0 , \"Emission\" : 0.0 } ], \"Variants\" : { \"night_1\" : { \"8\" : { \"Color\" : \"aa9d68\" , \"Glassiness\" : 0.0 , \"Specular\" : 0.0 , \"Smoothness\" : 0.0 , \"Emission\" : 1.0 } }, \"night_2\" : { \"9\" : { \"Color\" : \"aa9d68\" , \"Glassiness\" : 0.0 , \"Specular\" : 0.0 , \"Smoothness\" : 0.0 , \"Emission\" : 1.0 } }, \"night_3\" : { \"10\" : { \"Color\" : \"aa9d68\" , \"Glassiness\" : 0.0 , \"Specular\" : 0.0 , \"Smoothness\" : 0.0 , \"Emission\" : 1.0 } } } } The code above shows the color palette of the example building. We skipped some colors at the beginning because the listing would be too large but you can see the section of the variants. In the variants section, the names of the three variants are defined for the night windows that appeared in the .house file named night_1 - 3 . In this case, the values 8, 9, 10 correspond to the colors in the upper section which are the ones to be replaced by the colors and parameters of the Variants section. To know what values you have to specify, the colors range from 0 to 15 (16 in total) but the easy way to find the correct colors is by the hexadecimal value. If color #272727 was used, all colors with this value represent windows. Another parameter that can identify the windows in the Glossiness parameter, which in the rest of the colors will be 0.0 .","title":"Asset Editor"},{"location":"guides/content-mods/creating-your-first-building-mod/#localization-strings-asset","text":"The location file allows indicating the name that will be shown in the menus or in the new information tool (pre-alpha 0.80) of the building. { \"LocaleUri\" : \"base/en.locale\" , \"Items\" : { \"arab_buildings/desert2.biome#DisplayName\" : \"Desert\" , \"arab_buildings/palm_tree.plant#DisplayName\" : \"Palm tree\" , \"arab_buildings/arab_house1.house#DisplayName\" : \"House 1\" , \"arab_buildings/arab_house2.house#DisplayName\" : \"House 2\" , \"arab_buildings/arab_house3.house#DisplayName\" : \"House 3\" , \"arab_buildings/arab_house4.house#DisplayName\" : \"House 4\" , \"arab_buildings/arab_house5.house#DisplayName\" : \"House 5\" , \"arab_buildings/arab_obelisc_desert.house#DisplayName\" : \"Obelisk\" , \"arab_buildings/arab_store.house#DisplayName\" : \"Store\" , \"arab_buildings/arab_watertower.house#DisplayName\" : \"Water tower\" , } } The image shows that the indicated LocaleUri language is English and in the Items section the path of all the files of the different objects created is specified, in this case several buildings ( .house ), a biome ( .biome ) and a plant ( .plant ). You can have as many .strings files as languages you want to have in the mod.","title":"Localization (.strings asset)"},{"location":"guides/content-mods/creating-your-first-building-mod/#publishing-the-mod","text":"Once you have finished modeling the building, configuring the different files and applying the color palette, all you have to do is create an image of the mod ( preview.png ) that will be shown in the mod finder and that must have dimensions of 512x512 pixels . It is also necessary to create a mod.json file where the description of the mod is specified and which in turn allows the mod to appear in the mod selection window when creating a new game. { \"Title\" : \"Adobe buildings V1.0\" , \"Description\" : \"This mod add new desert biome and 8 specific buildings for this biome. Buildings: - 5 different residential houses - 1 shop for all base game items - 1 obelisk - 1 Water tower Biomes: - Desert with palm trees Localization: bg, de, en, es, fr, it, nl, pl, pt, ru, tr, uk. Changelog: -Release. Version: 1.0.\" }","title":"Publishing the mod"},{"location":"guides/content-mods/creating-your-first-building-mod/#further-reading","text":"How to publish your mod Creating your first locomotive mod","title":"Further reading"},{"location":"guides/content-mods/creating-your-first-locomotive-mod/","text":"Creating your first locomotive mod \u00b6 This guide is authored by Voxel Tycoon community member scailman Introduction \u00b6 This guide tries to show you how to create a locomotive for use in Voxel Tycoon. In Voxel Tycoon you can create steam, diesel or electric locomotives, but in this guide we will focus on creating an electric locomotive. The guide is not intended to teach you modeling, so you must have a basic understanding of 3DS Max, Blender, Wings 3D, or any other program you want to use that allows you to import and export .obj files. Modeling suggestions \u00b6 As in all games, there are certain recommendations that must be followed when creating a 3d model. Apart from city buildings, trains and trucks are one of the most repeated assets in the game, and to avoid performance problems there are certain recommendations to follow. It's recommended that the body of the locomotive does not exceed 1500 triangles. The bogies and wheels should have a maximum of 1000 triangles since it's not as visible parts as the locomotive body. Make the necessary details so that the locomotive is recognizable but not overloaded. VT models are shorter than in real life. Depending on the type of locomotive you want to make, it's a good idea to import a model from the base game to compare the measurements and, in case of being an electric locomotive, have a reference of the height of the overhead wire for pantographs. Setting the model in the 3D modeling software \u00b6 Vehicles are made up of different parts. In the case of trains, they are usually made up of the body of the locomotive, bogies, and wheels. Steam locomotives also have several rods depending on their complexity. All the elements that make up a vehicle must have the coordinate axis in position 0,0,0 , as shown in the following image: While creating the model of the locomotive, we can place each part in place to verify that the proportions are correct, but when exporting the model, each part must be placed as in the previous image. Important The locomotive should be placed facing the front to the right (view left in the viewport in 3ds max. In other programs, the placement of the viewports may vary). Texturing the model is done in the same way as a building. For this, I recommend reading the guide Creating your first content mod . Exporting the locomotive \u00b6 Like any asset in VT, it must be exported in .obj format, and the files must be contained in Content/<mod_name> . It's recommended to create the same directory structure that uses the base game for convenience. Each part of the locomotive must be a single .obj file that will then be linked through the different configuration asset files that will be explained below. Axles setting ( .trainaxle asset) \u00b6 This file is used to define the wheels of the locomotive. There is no limit to the number of axles that a locomotive or bogie can use, and each one can be a different size as in steam locomotives. The file contains only two parameters: { \"MeshUri\" : \"spanish_pack/class1_axle.obj\" , \"WheelRadius\" : 0.185 } MeshUri : This parameter specifies the path where the axis .obj file is located. The first part of the path is the mod folder. WheelRadius : This parameter is the radius of the wheel that we can obtain from the 3d program. Bogie settings ( .trainbogie asset ) \u00b6 Locomotives may or may not have bogies in real life, but it must always be defined in the game. This is what the .trainbogie asset looks like: { \"MeshUri\" : \"spanish_pack/class269_bo.obj\" , \"AxleOffset\" : 0.113 , \"Axles\" : [ { \"Uri\" : \"spanish_pack/class269_axle.trainaxle\" , \"Offset\" : 0.316 }, { \"Uri\" : \"spanish_pack/class269_axle.trainaxle\" , \"Offset\" : -0.316 } ] } A bogie is made up of the mesh of the bogie itself and a section (axles) that define the type of axis and the position inside the bogie. A bogie can have from 1 to n specified axes. MeshUri : Specifies the path of the bogie mesh file. If the value is null, it means that the bogie has no mesh. Uri : Specifies the path of the axis .trainaxle file that we explained in the previous point. If the value is null, the wheel mesh will not appear. AxleOffet : Specify the axis position. Offset : Defines the axle position along the Z-axis of the bogie. A positive value means that it is the front wheel of the bogie and a negative value that is the rear wheel. Engine settings ( .trainunit asset ) \u00b6 This is the main file of the locomotive and where the rest of assets are linked. Many assets can be customized, including the sounds (which we will not explain in this guide). The .trainunit asset has several sections and parameters and looks like the following on an electric locomotive. Some sections are null, that means it hasn't been specified, or that this parameter is automatically calculated by the game. { \"Smokes\" : null , \"Bogies\" : [ { \"Uri\" : \"spanish_pack/class1_bo.trainbogie\" , \"Offset\" : 0.643 , \"Anchor1\" : true , \"Anchor2\" : false , \"Secondary\" : false }, { \"Uri\" : \"spanish_pack/class1_bo.trainbogie\" , \"Offset\" : -0.597 , \"Anchor1\" : false , \"Anchor2\" : true , \"Secondary\" : false } ], \"AudioUri\" : \"base/electric.trainaudio\" , \"Type\" : \"Electric\" , \"Length\" : null , \"VelocityLimit\" : 40.0 , \"Power\" : 160 , \"Weight\" : 30 , \"Price\" : null , \"PriceMultiplier\" : null , \"RunningCosts\" : null , \"RunningCostsMultiplier\" : null , \"Liveries\" : [ { \"MeshUri\" : \"spanish_pack/class1a.obj\" } ], \"Coupling1Uri\" : \"base/common.traincoupling\" , \"Coupling2Uri\" : \"base/common.traincoupling\" , \"Hidden\" : true , \"Submeshes\" : null , \"AnimationReferenceWheelRadius\" : null , \"ResearchUri\" : null , \"Explosive\" : false , \"ExplosionForce\" : null } Smoke : Specifies the position of the smoke in diesel and steam locomotives. Bogies (Array): Uri : Path of the .trainbogie asset. Anchor1 : Used to indicate the position of the bogie. For example, if the locomotive has 3 bogies, the values \u200b\u200bof Anchor1 and Anchor2 will be: true - false , false - false , false - true . Anchor2 : Used to indicate the position of the bogie. For example, if the locomotive has 2 bogies, the values \u200b\u200bof Anchor1 and Anchor2 will be: true - false , false - true . Offset : Bogie position respecting to the locomotive along the Z-axis. A positive value means it's the front bogie and a negative value the rear bogie. AudioUri : Path of the .trainaudio asset. Type : Locomotive type. Possible values: Steam, Diesel, Electric, Unpowered. Length : By default the value is null, the game automatically calculates the length of the locomotive using the boundingbox of the .obj file. When a value is specified, it is because we want the locomotive to overlap with another element as it happens with the semi-trailers of the trucks. VelocityLimit : Maximum locomotive speed specified in km / h. Power : Max engine power specified in Kw. Weight : Locomotive weight specified in Tonnes. Price : Locomotive cost. The default is null. The game calculates the price based on the power of the locomotive and economic fluctuations. PriceMultiplier : Locomotive cost price multiplier. By default is null. RunningCosts : Locomotive operating cost. By default is null. RunningCostsMultiplier : Locomotive operating cost multiplier. By default is null. Liveries (Array): MeshUri : Path of the .obj file of the locomotive body. Coupling1Uri : Path of the front locomotive .traincoupling asset. Coupling2Uri : Path of the rear locomotive .traincoupling asset. Note: Only cars with the same couplings could be coupled. Hidden : This parameter makes the locomotive not appear in the vehicle purchase menu. By default the value is false , but if the steam locomotive is articulated or requieres separate units (eg. Steam locomotive engine & tender, or fixed car suburban/subway set), this value will be true . Submeshes (Array): This section specifies the different meshes and animation parameters of the meshes of the rods of steam locomotives (see Animating locomotive rods guide). AnimationReferenceWheelRadius : Specifies the radius that the connecting rods will follow in the locomotives that have connecting rods. ResearchUri : If the locomotive needs to be researched in order to use it, this parameter indicates the path of the .research asset. Explosive : This parameter causes the locomotive or vehicle to explode in the event of an accident causing damage to the surrounding area. By default the value is false. ExplosionForce : Force of the explosion caused in the event of an accident if the explosive parameter is true . Setting it too high can cause the blast to damage the terrain so much that it destroys cities and entire resource deposits. Coupling setting ( .traincouplig asset) \u00b6 This asset allows defining a custom coupling for the locomotive that will make only locomotives and wagons that use the same coupling be able to be coupled. This asset does not contain any parameters, and the file is empty, but it must exist in order to function properly. Train recipe settings ( .trainrecipe asset) \u00b6 In the game we can define that locomotives or trains will form a consist that cannot be separated, or that multiple vehicles will be purchased at the same time - such as the steam locomotives that when we buy one in the game from the purchase menu from the depot, we buy the locomotive and the tender as a set. { \"Sections\" : [ { \"Count\" : null , \"MinCount\" : null , \"MaxCount\" : 1 , \"Units\" : [ { \"Uri\" : \"s_hst/hst1_eng_a.trainunit\" , \"Flipped\" : false } ] }, { \"Count\" : 0 , \"MinCount\" : 2 , \"MaxCount\" : 4 , \"Units\" : [ { \"Uri\" : \"s_hst/hst1_car.trainunit\" , \"Flipped\" : false } ] }, { \"Count\" : null , \"MinCount\" : null , \"MaxCount\" : 1 , \"Units\" : [ { \"Uri\" : \"s_hst/hst1_eng_b.trainunit\" , \"Flipped\" : true } ] } ], \"ResearchUri\" : null , \"Hidden\" : false } The file is divided into sections and you can indicate the number of minimum and maximum vehicles and what type a consist can have. In the file shown, it represents a consist of a train that contains a locomotive at the front, between 2 and 4 passenger cars and another locomotive at the rear. The parameters of this asset are quite explanatory. They indicate the minimum and maximum number of vehicles that make up the composition, what type they are (.trainunit asset) and whether they are inverted or not, such as the case of the rear locomotive. ResearchUri : If the consist or locomotive needs to be researched in order to use it, this parameter indicates the path of the .research asset. Hidden : This parameter makes the locomotive not appear in the vehicle purchase menu. By default the value is false, but if the steam locomotive is made up of the locomotive and the tender, this value will be true. Localization ( .strings asset) \u00b6 The .strings asset specifies the text that will be displayed in severals windows and menus in the game. { \"LocaleUri\" : \"base/en.locale\" , \"Items\" : { \"br_class05/steam_engine_6.trainunit#DisplayName\" : \"Br Class 05 Engine\" , \"br_class05/steam_engine_6_tender.trainunit#DisplayName\" : \"Br Class 05 Tender\" , \"br_class05/steam_engine_6.trainrecipe#DisplayName\" : \"Br Class 05\" } } In this example, it's show the text of the name of the locomotive and the tender as separate units and the train set as it appears in the purchase menu window. You can have as many .strings assets as languages you want in the same folder. Further reading \u00b6 How to publish your mod Animating locomotive rods Creating your first truck mod","title":"Creating your first locomotive mod"},{"location":"guides/content-mods/creating-your-first-locomotive-mod/#creating-your-first-locomotive-mod","text":"This guide is authored by Voxel Tycoon community member scailman","title":"Creating your first locomotive mod"},{"location":"guides/content-mods/creating-your-first-locomotive-mod/#introduction","text":"This guide tries to show you how to create a locomotive for use in Voxel Tycoon. In Voxel Tycoon you can create steam, diesel or electric locomotives, but in this guide we will focus on creating an electric locomotive. The guide is not intended to teach you modeling, so you must have a basic understanding of 3DS Max, Blender, Wings 3D, or any other program you want to use that allows you to import and export .obj files.","title":"Introduction"},{"location":"guides/content-mods/creating-your-first-locomotive-mod/#modeling-suggestions","text":"As in all games, there are certain recommendations that must be followed when creating a 3d model. Apart from city buildings, trains and trucks are one of the most repeated assets in the game, and to avoid performance problems there are certain recommendations to follow. It's recommended that the body of the locomotive does not exceed 1500 triangles. The bogies and wheels should have a maximum of 1000 triangles since it's not as visible parts as the locomotive body. Make the necessary details so that the locomotive is recognizable but not overloaded. VT models are shorter than in real life. Depending on the type of locomotive you want to make, it's a good idea to import a model from the base game to compare the measurements and, in case of being an electric locomotive, have a reference of the height of the overhead wire for pantographs.","title":"Modeling suggestions"},{"location":"guides/content-mods/creating-your-first-locomotive-mod/#setting-the-model-in-the-3d-modeling-software","text":"Vehicles are made up of different parts. In the case of trains, they are usually made up of the body of the locomotive, bogies, and wheels. Steam locomotives also have several rods depending on their complexity. All the elements that make up a vehicle must have the coordinate axis in position 0,0,0 , as shown in the following image: While creating the model of the locomotive, we can place each part in place to verify that the proportions are correct, but when exporting the model, each part must be placed as in the previous image. Important The locomotive should be placed facing the front to the right (view left in the viewport in 3ds max. In other programs, the placement of the viewports may vary). Texturing the model is done in the same way as a building. For this, I recommend reading the guide Creating your first content mod .","title":"Setting the model in the 3D modeling software"},{"location":"guides/content-mods/creating-your-first-locomotive-mod/#exporting-the-locomotive","text":"Like any asset in VT, it must be exported in .obj format, and the files must be contained in Content/<mod_name> . It's recommended to create the same directory structure that uses the base game for convenience. Each part of the locomotive must be a single .obj file that will then be linked through the different configuration asset files that will be explained below.","title":"Exporting the locomotive"},{"location":"guides/content-mods/creating-your-first-locomotive-mod/#axles-setting-trainaxle-asset","text":"This file is used to define the wheels of the locomotive. There is no limit to the number of axles that a locomotive or bogie can use, and each one can be a different size as in steam locomotives. The file contains only two parameters: { \"MeshUri\" : \"spanish_pack/class1_axle.obj\" , \"WheelRadius\" : 0.185 } MeshUri : This parameter specifies the path where the axis .obj file is located. The first part of the path is the mod folder. WheelRadius : This parameter is the radius of the wheel that we can obtain from the 3d program.","title":"Axles setting (.trainaxle asset)"},{"location":"guides/content-mods/creating-your-first-locomotive-mod/#bogie-settings-trainbogie-asset","text":"Locomotives may or may not have bogies in real life, but it must always be defined in the game. This is what the .trainbogie asset looks like: { \"MeshUri\" : \"spanish_pack/class269_bo.obj\" , \"AxleOffset\" : 0.113 , \"Axles\" : [ { \"Uri\" : \"spanish_pack/class269_axle.trainaxle\" , \"Offset\" : 0.316 }, { \"Uri\" : \"spanish_pack/class269_axle.trainaxle\" , \"Offset\" : -0.316 } ] } A bogie is made up of the mesh of the bogie itself and a section (axles) that define the type of axis and the position inside the bogie. A bogie can have from 1 to n specified axes. MeshUri : Specifies the path of the bogie mesh file. If the value is null, it means that the bogie has no mesh. Uri : Specifies the path of the axis .trainaxle file that we explained in the previous point. If the value is null, the wheel mesh will not appear. AxleOffet : Specify the axis position. Offset : Defines the axle position along the Z-axis of the bogie. A positive value means that it is the front wheel of the bogie and a negative value that is the rear wheel.","title":"Bogie settings (.trainbogie asset )"},{"location":"guides/content-mods/creating-your-first-locomotive-mod/#engine-settings-trainunit-asset","text":"This is the main file of the locomotive and where the rest of assets are linked. Many assets can be customized, including the sounds (which we will not explain in this guide). The .trainunit asset has several sections and parameters and looks like the following on an electric locomotive. Some sections are null, that means it hasn't been specified, or that this parameter is automatically calculated by the game. { \"Smokes\" : null , \"Bogies\" : [ { \"Uri\" : \"spanish_pack/class1_bo.trainbogie\" , \"Offset\" : 0.643 , \"Anchor1\" : true , \"Anchor2\" : false , \"Secondary\" : false }, { \"Uri\" : \"spanish_pack/class1_bo.trainbogie\" , \"Offset\" : -0.597 , \"Anchor1\" : false , \"Anchor2\" : true , \"Secondary\" : false } ], \"AudioUri\" : \"base/electric.trainaudio\" , \"Type\" : \"Electric\" , \"Length\" : null , \"VelocityLimit\" : 40.0 , \"Power\" : 160 , \"Weight\" : 30 , \"Price\" : null , \"PriceMultiplier\" : null , \"RunningCosts\" : null , \"RunningCostsMultiplier\" : null , \"Liveries\" : [ { \"MeshUri\" : \"spanish_pack/class1a.obj\" } ], \"Coupling1Uri\" : \"base/common.traincoupling\" , \"Coupling2Uri\" : \"base/common.traincoupling\" , \"Hidden\" : true , \"Submeshes\" : null , \"AnimationReferenceWheelRadius\" : null , \"ResearchUri\" : null , \"Explosive\" : false , \"ExplosionForce\" : null } Smoke : Specifies the position of the smoke in diesel and steam locomotives. Bogies (Array): Uri : Path of the .trainbogie asset. Anchor1 : Used to indicate the position of the bogie. For example, if the locomotive has 3 bogies, the values \u200b\u200bof Anchor1 and Anchor2 will be: true - false , false - false , false - true . Anchor2 : Used to indicate the position of the bogie. For example, if the locomotive has 2 bogies, the values \u200b\u200bof Anchor1 and Anchor2 will be: true - false , false - true . Offset : Bogie position respecting to the locomotive along the Z-axis. A positive value means it's the front bogie and a negative value the rear bogie. AudioUri : Path of the .trainaudio asset. Type : Locomotive type. Possible values: Steam, Diesel, Electric, Unpowered. Length : By default the value is null, the game automatically calculates the length of the locomotive using the boundingbox of the .obj file. When a value is specified, it is because we want the locomotive to overlap with another element as it happens with the semi-trailers of the trucks. VelocityLimit : Maximum locomotive speed specified in km / h. Power : Max engine power specified in Kw. Weight : Locomotive weight specified in Tonnes. Price : Locomotive cost. The default is null. The game calculates the price based on the power of the locomotive and economic fluctuations. PriceMultiplier : Locomotive cost price multiplier. By default is null. RunningCosts : Locomotive operating cost. By default is null. RunningCostsMultiplier : Locomotive operating cost multiplier. By default is null. Liveries (Array): MeshUri : Path of the .obj file of the locomotive body. Coupling1Uri : Path of the front locomotive .traincoupling asset. Coupling2Uri : Path of the rear locomotive .traincoupling asset. Note: Only cars with the same couplings could be coupled. Hidden : This parameter makes the locomotive not appear in the vehicle purchase menu. By default the value is false , but if the steam locomotive is articulated or requieres separate units (eg. Steam locomotive engine & tender, or fixed car suburban/subway set), this value will be true . Submeshes (Array): This section specifies the different meshes and animation parameters of the meshes of the rods of steam locomotives (see Animating locomotive rods guide). AnimationReferenceWheelRadius : Specifies the radius that the connecting rods will follow in the locomotives that have connecting rods. ResearchUri : If the locomotive needs to be researched in order to use it, this parameter indicates the path of the .research asset. Explosive : This parameter causes the locomotive or vehicle to explode in the event of an accident causing damage to the surrounding area. By default the value is false. ExplosionForce : Force of the explosion caused in the event of an accident if the explosive parameter is true . Setting it too high can cause the blast to damage the terrain so much that it destroys cities and entire resource deposits.","title":"Engine settings  (.trainunit asset )"},{"location":"guides/content-mods/creating-your-first-locomotive-mod/#coupling-setting-traincouplig-asset","text":"This asset allows defining a custom coupling for the locomotive that will make only locomotives and wagons that use the same coupling be able to be coupled. This asset does not contain any parameters, and the file is empty, but it must exist in order to function properly.","title":"Coupling setting (.traincouplig asset)"},{"location":"guides/content-mods/creating-your-first-locomotive-mod/#train-recipe-settings-trainrecipe-asset","text":"In the game we can define that locomotives or trains will form a consist that cannot be separated, or that multiple vehicles will be purchased at the same time - such as the steam locomotives that when we buy one in the game from the purchase menu from the depot, we buy the locomotive and the tender as a set. { \"Sections\" : [ { \"Count\" : null , \"MinCount\" : null , \"MaxCount\" : 1 , \"Units\" : [ { \"Uri\" : \"s_hst/hst1_eng_a.trainunit\" , \"Flipped\" : false } ] }, { \"Count\" : 0 , \"MinCount\" : 2 , \"MaxCount\" : 4 , \"Units\" : [ { \"Uri\" : \"s_hst/hst1_car.trainunit\" , \"Flipped\" : false } ] }, { \"Count\" : null , \"MinCount\" : null , \"MaxCount\" : 1 , \"Units\" : [ { \"Uri\" : \"s_hst/hst1_eng_b.trainunit\" , \"Flipped\" : true } ] } ], \"ResearchUri\" : null , \"Hidden\" : false } The file is divided into sections and you can indicate the number of minimum and maximum vehicles and what type a consist can have. In the file shown, it represents a consist of a train that contains a locomotive at the front, between 2 and 4 passenger cars and another locomotive at the rear. The parameters of this asset are quite explanatory. They indicate the minimum and maximum number of vehicles that make up the composition, what type they are (.trainunit asset) and whether they are inverted or not, such as the case of the rear locomotive. ResearchUri : If the consist or locomotive needs to be researched in order to use it, this parameter indicates the path of the .research asset. Hidden : This parameter makes the locomotive not appear in the vehicle purchase menu. By default the value is false, but if the steam locomotive is made up of the locomotive and the tender, this value will be true.","title":"Train recipe settings (.trainrecipe asset)"},{"location":"guides/content-mods/creating-your-first-locomotive-mod/#localization-strings-asset","text":"The .strings asset specifies the text that will be displayed in severals windows and menus in the game. { \"LocaleUri\" : \"base/en.locale\" , \"Items\" : { \"br_class05/steam_engine_6.trainunit#DisplayName\" : \"Br Class 05 Engine\" , \"br_class05/steam_engine_6_tender.trainunit#DisplayName\" : \"Br Class 05 Tender\" , \"br_class05/steam_engine_6.trainrecipe#DisplayName\" : \"Br Class 05\" } } In this example, it's show the text of the name of the locomotive and the tender as separate units and the train set as it appears in the purchase menu window. You can have as many .strings assets as languages you want in the same folder.","title":"Localization (.strings asset)"},{"location":"guides/content-mods/creating-your-first-locomotive-mod/#further-reading","text":"How to publish your mod Animating locomotive rods Creating your first truck mod","title":"Further reading"},{"location":"guides/content-mods/creating-your-first-truck-mod/","text":"Creating your first truck mod \u00b6 This guide is authored by Voxel Tycoon community member scailman Introduction \u00b6 In this guide, we will see how to configure a truck with different types of loads and trailers. Basic knowledge of 3d design software is required as this guide will not cover the design part of the truck, only how to configure it to work properly in Voxel Tycoon. The following will explain each type of asset that a truck uses, how to configure the different cargo types, and how to configure trailers and semi-trailers. Prepare a model for export \u00b6 Trucks, like trains, have several parts that must be positioned on the coordinate axis at 0,0,0 and exported independently. To learn how to texture the model, read the Creating your first building guide where the process is explained in detail. This image shows the chassis position and both wheels, one single and one double. Important Like trains, trucks should also be facing the front to the right in the right viewport (Blender loads vehicles facing left), otherwise, the truck will appear in the wrong direction on the road. Once we have the chassis, and the wheels are textured and positioned correctly, we can explore each model in .obj format. Wheels ( .caraxle asset) \u00b6 All road vehicles must have a minimum of two axles, one for the front wheels and one for the rear. If the model we are making is a trailer or semi-trailer, the front axle must exist but it doesn't have to be a visible wheel. The .caraxle asset has only two parameters and is as shown below: { \"WheelMeshUri\" : \"scm_truck_pack/single_wheel.obj\" , \"WheelRadius\" : 0.162 } WheelMeshUri : Specifies the path of the wheel's .obj file. If we don't want it to have a mesh, this parameter will be null. WheelRadius : Specifies the radius of the wheel that we can obtain from the 3d program. This value is important because if it is greater the wheel will appear overlapping the road and if it is less, the wheel will float above the road. Truck configuration ( .carunit asset) \u00b6 The configuration of a truck is very similar to the configuration of a locomotive, only differing in the certain parameters specific to road vehicles vary. { \"Axles\" : [ { \"Uri\" : \"scm_truck_pack/single_wheel.caraxle\" , \"Offset\" : 0.545 , \"HalfTrack\" : 0.344 , \"Steered\" : true }, { \"Uri\" : \"scm_truck_pack/double_wheel.caraxle\" , \"Offset\" : -0.578 , \"HalfTrack\" : 0.278 , \"Steered\" : false } ], \"AudioUri\" : \"base/truck.caraudio\" , \"Type\" : \"Diesel\" , \"Length\" : null , \"VelocityLimit\" : 85.0 , \"Power\" : 170.0 , \"Weight\" : 4.2 , \"Price\" : null , \"PriceMultiplier\" : null , \"RunningCosts\" : null , \"RunningCostsMultiplier\" : null , \"Liveries\" : [ { \"MeshUri\" : \"scm_truck_pack/hopper_truck.obj\" } ], \"Coupling1Uri\" : null , \"Coupling2Uri\" : \"scm_truck_pack/scm_dolly_coupling.carcoupling\" , \"Hidden\" : false , \"Submeshes\" : null , \"AnimationReferenceWheelRadius\" : null , \"ResearchUri\" : \"scm_truck_pack/scm_trucks.research\" , \"Explosive\" : false , \"ExplosionForce\" : null } Axles (Array): Defines a list of vehicle axles. Uri : Path of the .caraxle asset. Offset : Axle position with respect to the center of the vehicle along the Z-axis. The front axle will have a positive value and the rear axle a negative value. HalfTrack : Wheel position with respect to the X-axis of the vehicle. Positive values are always indicated. The game automatically reverses the value to position the other wheel on the opposite side of the vehicle. Steered : Indicates whether the wheels on that axle are steered. Specifying vehicles with steered rear axles causes the rear wheels to not behave properly in curves and ramps. UriAudio : Path of the .caraudio asset. Type : Type of engine used by the vehicle. Possible values are Diesel, Gasoline, and Unpowered. Length : Vehicle length. By default the value is null but if it is a semi-trailer or trailer, the length must be specified because the semi-trailer has to overlap with the cab of the truck. The green rectangle indicates the length to be specified in the semitrailer length configuration. Like other vehicles, > semi-trailers should be centered on the coordinate axes using this length as a reference, not the total length of the semi-trailer. VelocityLimit : Vehicle max speed in km/h. Power : Maximum engine power of the vehicle in Kw. Weight : Vehicle weight in metric tons. Price : Price of the vehicle, by default the value is null , the game calculates the price based on the max power if powered and/or capacity. PriceMultiplier : Vehicle price multiplier. RunningCosts : Vehicle maintenance cost. RunningCostsMultiplier : Vehicle maintenance cost multiplier. Liveries (Array): MeshUri : Path of the mesh file (.obj) of the vehicle. Coupling1Uri , Coupling2Uri : Path of the .carcoupling asset . Trucks usually don't have couplings, the value of this parameter is null but if you want to put a semi-trailer or a dolly trailer, you must specify a front and/or rear couplings or both. Hidden : This parameter indicates whether or not the vehicle will be displayed in the vehicle purchase menu. A value true is usually set if the vehicle is made up of several parts and a .carrecipe asset has been created to display in the vehicle purchase window. ResearchUri : Path of the .research asset. Explosive : Determine if the transported cargo can explode. By default the value is false . ExplosionForce : Explosion force. By default the value is null . A very high value can cause a crater so large that it removes entire cities and industries from the map. Truck loads ( .capacities asset) \u00b6 This type of asset creates a load for items that are not visible, such as closed vans or trucks. For this reason, the Items array only shows the reference to the .item asset of each type of cargo. { \"Items\" : { \"base/advanced_furniture.item\" : null , \"base/advanced_wood_frame.item\" : null , ... \"base/vacuum_tube.item\" : null , \"base/wood_frame.item\" : null }, \"TargetUri\" : \"scm_truck_pack/box_trailer.carunit\" , \"MaxWeight\" : 20.0 , \"LoadingSpeedMultiplier\" : 1.0 , \"UnloadingSpeedMultiplier\" : 1.0 } Items (Array): List of pathes of the .item asset that the vehicle accepts. TargetURI : Path of the .carunit asset affected by the load. MaxWeight : Maximum capacity that the vehicle can load. The number of units depends on the weight of the loaded items. LoadingSpeedMultiplier : Vehicle load speed multiplier. By default, the value is 1.0 . UnloadingSpeedMultiplier : Vehicle unload speed multiplier. By default, the value is 1.0 . Truck loads ( .stackcapacity asset) \u00b6 This type of asset allows vehicles to have a stackable type load such as logs or planks. Compared to the capacities load type, this asset has more parameters regarding the size and position of the load. { \"Position\" : [ 0 , 0.431 , 0.228 ], \"Rotation\" : [ 0 , 0 , 0 ], \"SizeX\" : 0.685 , \"SizeZ\" : 1.3 , \"Items\" : { \"base/wood_log.item\" : { \"MeshUri\" : \"base/wood_log.obj\" , \"Resolution\" : { \"X\" : 3 , \"Y\" : 2 , \"Z\" : 1 }, \"Spacing\" : [ 0.02 , 0.02 , 0.03 ], \"Capacity\" : null , \"Explosive\" : false , \"ExplosionForce\" : null }, ... }, \"TargetUri\" : \"scm_truck_pack/hopper_trailer.carunit\" , \"MaxWeight\" : 22.0 , \"LoadingSpeedMultiplier\" : 1.0 , \"UnloadingSpeedMultiplier\" : 1.0 } Position : Position of the loading platform. The image shows the coordinate axis that represents the configured values. Rotation : Rotation of the load. The value will always be 0 on each axis. SizeX / SizeZ: Size of the loading platform that will determine the size of the items depending on the number of items that we want to stack. Items (Array): This array specifies each item that the vehicle can load. MeshUri : Path of the .obj file of the load item. Resolution : The resolution is a three-dimensional grid that indicates the number of items to be stacked along the indicated axis. Spacing : Separation between each item in the three axes (front/back - left-right - top-down). Capacity : Item carrying capacity. If the value is null, the maximum load of items will be calculated with the maximum load of the vehicle. Explosive : Determine if the transported cargo can explode. By default the value is false. ExplosionForce : Explosion force. By default the value is null. A very high value can cause a crater so large that it removes entire cities and industries from the map. Truck loads ( .heapcapacity asset) \u00b6 Heap-type loads are used for hopper-type vehicles to transport ores. This asset also adds animation parameters for loading and unloading the ore. In the following image, you can see the mesh of the coal heap. You can create a custom heap or use the model that comes with the base game but always set the parameters correctly. { \"Keyframes\" : { \"0\" : { \"Position\" : [ 0 , 0.466 , 0.416 ], \"Rotation\" : [ 0 , 0 , 0 ], \"SizeX\" : 0.0 , \"SizeZ\" : 0.0 , \"ScaleY\" : 0.0 }, \"0.2\" : { \"Position\" : [ 0 , 0.466 , 0.416 ], \"Rotation\" : [ 0 , 0 , 0 ], \"SizeX\" : 0.8 , \"SizeZ\" : 2.657 , \"ScaleY\" : 0.5 }, \"1\" : { \"Position\" : [ 0 , 0.541 , 0.416 ], \"Rotation\" : [ 0 , 0 , 0 ], \"SizeX\" : 0.8 , \"SizeZ\" : 2.657 , \"ScaleY\" : 1.0 } }, \"Items\" : { \"base/coal.item\" : { \"MeshUri\" : \"scm_truck_pack/coal_heap.obj\" , \"Capacity\" : null , \"Explosive\" : false , \"ExplosionForce\" : null } ... }, \"TargetUri\" : \"scm_truck_pack/hopper_semitrailer.carunit\" , \"MaxWeight\" : 32.0 , \"LoadingSpeedMultiplier\" : 1.0 , \"UnloadingSpeedMultiplier\" : 1.0 } Keyframes (Array): This array contains animation keyframes, 0.0 for when the vehicle is unloaded, some values for when it's partially loaded, and 1.0 one for when it is fully loaded. The value always goes from 0.0 to 1.0 regardless of the number of keyframes the load/unload animation has. The following parameters are self-explanatory, specifying the position, rotation, and mesh size of the load object. The rest of the parameters are the same as the rest of the assets explained above. Truck recipes ( .carrecipe asset): \u00b6 Like locomotives, trucks can form compositions like the case of trailers, which have a dolly trailer and trailer. Its setting are exactly the same as the train recipe because it's the same asset. For more information read the section Train recipe settings ( .trainrecipe asset) in the Creating your first locomotive mod guide. { \"Sections\" : [ { \"Count\" : null , \"MinCount\" : null , \"MaxCount\" : 1 , \"Units\" : [ { \"Uri\" : \"scm_truck_pack/dolly_trailer.carunit\" , \"Flipped\" : false }, { \"Uri\" : \"scm_truck_pack/box_trailer.carunit\" , \"Flipped\" : false } ] } ], \"ResearchUri\" : \"scm_truck_pack/scm_trucks.research\" , \"Hidden\" : false } Couplings ( .carcoupling asset ) \u00b6 Most of the trucks don't have couplings, but if it's a trailer or a semi-trailer it will have couplings at the front ( Coupling1Uri ), or if a cab at the rear ( Coupling2Uri ), or in both locations for dolly trailers. Further reading \u00b6 How to publish your mod","title":"Creating your first truck mod"},{"location":"guides/content-mods/creating-your-first-truck-mod/#creating-your-first-truck-mod","text":"This guide is authored by Voxel Tycoon community member scailman","title":"Creating your first truck mod"},{"location":"guides/content-mods/creating-your-first-truck-mod/#introduction","text":"In this guide, we will see how to configure a truck with different types of loads and trailers. Basic knowledge of 3d design software is required as this guide will not cover the design part of the truck, only how to configure it to work properly in Voxel Tycoon. The following will explain each type of asset that a truck uses, how to configure the different cargo types, and how to configure trailers and semi-trailers.","title":"Introduction"},{"location":"guides/content-mods/creating-your-first-truck-mod/#prepare-a-model-for-export","text":"Trucks, like trains, have several parts that must be positioned on the coordinate axis at 0,0,0 and exported independently. To learn how to texture the model, read the Creating your first building guide where the process is explained in detail. This image shows the chassis position and both wheels, one single and one double. Important Like trains, trucks should also be facing the front to the right in the right viewport (Blender loads vehicles facing left), otherwise, the truck will appear in the wrong direction on the road. Once we have the chassis, and the wheels are textured and positioned correctly, we can explore each model in .obj format.","title":"Prepare a model for export"},{"location":"guides/content-mods/creating-your-first-truck-mod/#wheels-caraxle-asset","text":"All road vehicles must have a minimum of two axles, one for the front wheels and one for the rear. If the model we are making is a trailer or semi-trailer, the front axle must exist but it doesn't have to be a visible wheel. The .caraxle asset has only two parameters and is as shown below: { \"WheelMeshUri\" : \"scm_truck_pack/single_wheel.obj\" , \"WheelRadius\" : 0.162 } WheelMeshUri : Specifies the path of the wheel's .obj file. If we don't want it to have a mesh, this parameter will be null. WheelRadius : Specifies the radius of the wheel that we can obtain from the 3d program. This value is important because if it is greater the wheel will appear overlapping the road and if it is less, the wheel will float above the road.","title":"Wheels (.caraxle asset)"},{"location":"guides/content-mods/creating-your-first-truck-mod/#truck-configuration-carunit-asset","text":"The configuration of a truck is very similar to the configuration of a locomotive, only differing in the certain parameters specific to road vehicles vary. { \"Axles\" : [ { \"Uri\" : \"scm_truck_pack/single_wheel.caraxle\" , \"Offset\" : 0.545 , \"HalfTrack\" : 0.344 , \"Steered\" : true }, { \"Uri\" : \"scm_truck_pack/double_wheel.caraxle\" , \"Offset\" : -0.578 , \"HalfTrack\" : 0.278 , \"Steered\" : false } ], \"AudioUri\" : \"base/truck.caraudio\" , \"Type\" : \"Diesel\" , \"Length\" : null , \"VelocityLimit\" : 85.0 , \"Power\" : 170.0 , \"Weight\" : 4.2 , \"Price\" : null , \"PriceMultiplier\" : null , \"RunningCosts\" : null , \"RunningCostsMultiplier\" : null , \"Liveries\" : [ { \"MeshUri\" : \"scm_truck_pack/hopper_truck.obj\" } ], \"Coupling1Uri\" : null , \"Coupling2Uri\" : \"scm_truck_pack/scm_dolly_coupling.carcoupling\" , \"Hidden\" : false , \"Submeshes\" : null , \"AnimationReferenceWheelRadius\" : null , \"ResearchUri\" : \"scm_truck_pack/scm_trucks.research\" , \"Explosive\" : false , \"ExplosionForce\" : null } Axles (Array): Defines a list of vehicle axles. Uri : Path of the .caraxle asset. Offset : Axle position with respect to the center of the vehicle along the Z-axis. The front axle will have a positive value and the rear axle a negative value. HalfTrack : Wheel position with respect to the X-axis of the vehicle. Positive values are always indicated. The game automatically reverses the value to position the other wheel on the opposite side of the vehicle. Steered : Indicates whether the wheels on that axle are steered. Specifying vehicles with steered rear axles causes the rear wheels to not behave properly in curves and ramps. UriAudio : Path of the .caraudio asset. Type : Type of engine used by the vehicle. Possible values are Diesel, Gasoline, and Unpowered. Length : Vehicle length. By default the value is null but if it is a semi-trailer or trailer, the length must be specified because the semi-trailer has to overlap with the cab of the truck. The green rectangle indicates the length to be specified in the semitrailer length configuration. Like other vehicles, > semi-trailers should be centered on the coordinate axes using this length as a reference, not the total length of the semi-trailer. VelocityLimit : Vehicle max speed in km/h. Power : Maximum engine power of the vehicle in Kw. Weight : Vehicle weight in metric tons. Price : Price of the vehicle, by default the value is null , the game calculates the price based on the max power if powered and/or capacity. PriceMultiplier : Vehicle price multiplier. RunningCosts : Vehicle maintenance cost. RunningCostsMultiplier : Vehicle maintenance cost multiplier. Liveries (Array): MeshUri : Path of the mesh file (.obj) of the vehicle. Coupling1Uri , Coupling2Uri : Path of the .carcoupling asset . Trucks usually don't have couplings, the value of this parameter is null but if you want to put a semi-trailer or a dolly trailer, you must specify a front and/or rear couplings or both. Hidden : This parameter indicates whether or not the vehicle will be displayed in the vehicle purchase menu. A value true is usually set if the vehicle is made up of several parts and a .carrecipe asset has been created to display in the vehicle purchase window. ResearchUri : Path of the .research asset. Explosive : Determine if the transported cargo can explode. By default the value is false . ExplosionForce : Explosion force. By default the value is null . A very high value can cause a crater so large that it removes entire cities and industries from the map.","title":"Truck configuration (.carunit asset)"},{"location":"guides/content-mods/creating-your-first-truck-mod/#truck-loads-capacities-asset","text":"This type of asset creates a load for items that are not visible, such as closed vans or trucks. For this reason, the Items array only shows the reference to the .item asset of each type of cargo. { \"Items\" : { \"base/advanced_furniture.item\" : null , \"base/advanced_wood_frame.item\" : null , ... \"base/vacuum_tube.item\" : null , \"base/wood_frame.item\" : null }, \"TargetUri\" : \"scm_truck_pack/box_trailer.carunit\" , \"MaxWeight\" : 20.0 , \"LoadingSpeedMultiplier\" : 1.0 , \"UnloadingSpeedMultiplier\" : 1.0 } Items (Array): List of pathes of the .item asset that the vehicle accepts. TargetURI : Path of the .carunit asset affected by the load. MaxWeight : Maximum capacity that the vehicle can load. The number of units depends on the weight of the loaded items. LoadingSpeedMultiplier : Vehicle load speed multiplier. By default, the value is 1.0 . UnloadingSpeedMultiplier : Vehicle unload speed multiplier. By default, the value is 1.0 .","title":"Truck loads (.capacities asset)"},{"location":"guides/content-mods/creating-your-first-truck-mod/#truck-loads-stackcapacity-asset","text":"This type of asset allows vehicles to have a stackable type load such as logs or planks. Compared to the capacities load type, this asset has more parameters regarding the size and position of the load. { \"Position\" : [ 0 , 0.431 , 0.228 ], \"Rotation\" : [ 0 , 0 , 0 ], \"SizeX\" : 0.685 , \"SizeZ\" : 1.3 , \"Items\" : { \"base/wood_log.item\" : { \"MeshUri\" : \"base/wood_log.obj\" , \"Resolution\" : { \"X\" : 3 , \"Y\" : 2 , \"Z\" : 1 }, \"Spacing\" : [ 0.02 , 0.02 , 0.03 ], \"Capacity\" : null , \"Explosive\" : false , \"ExplosionForce\" : null }, ... }, \"TargetUri\" : \"scm_truck_pack/hopper_trailer.carunit\" , \"MaxWeight\" : 22.0 , \"LoadingSpeedMultiplier\" : 1.0 , \"UnloadingSpeedMultiplier\" : 1.0 } Position : Position of the loading platform. The image shows the coordinate axis that represents the configured values. Rotation : Rotation of the load. The value will always be 0 on each axis. SizeX / SizeZ: Size of the loading platform that will determine the size of the items depending on the number of items that we want to stack. Items (Array): This array specifies each item that the vehicle can load. MeshUri : Path of the .obj file of the load item. Resolution : The resolution is a three-dimensional grid that indicates the number of items to be stacked along the indicated axis. Spacing : Separation between each item in the three axes (front/back - left-right - top-down). Capacity : Item carrying capacity. If the value is null, the maximum load of items will be calculated with the maximum load of the vehicle. Explosive : Determine if the transported cargo can explode. By default the value is false. ExplosionForce : Explosion force. By default the value is null. A very high value can cause a crater so large that it removes entire cities and industries from the map.","title":"Truck loads (.stackcapacity asset)"},{"location":"guides/content-mods/creating-your-first-truck-mod/#truck-loads-heapcapacity-asset","text":"Heap-type loads are used for hopper-type vehicles to transport ores. This asset also adds animation parameters for loading and unloading the ore. In the following image, you can see the mesh of the coal heap. You can create a custom heap or use the model that comes with the base game but always set the parameters correctly. { \"Keyframes\" : { \"0\" : { \"Position\" : [ 0 , 0.466 , 0.416 ], \"Rotation\" : [ 0 , 0 , 0 ], \"SizeX\" : 0.0 , \"SizeZ\" : 0.0 , \"ScaleY\" : 0.0 }, \"0.2\" : { \"Position\" : [ 0 , 0.466 , 0.416 ], \"Rotation\" : [ 0 , 0 , 0 ], \"SizeX\" : 0.8 , \"SizeZ\" : 2.657 , \"ScaleY\" : 0.5 }, \"1\" : { \"Position\" : [ 0 , 0.541 , 0.416 ], \"Rotation\" : [ 0 , 0 , 0 ], \"SizeX\" : 0.8 , \"SizeZ\" : 2.657 , \"ScaleY\" : 1.0 } }, \"Items\" : { \"base/coal.item\" : { \"MeshUri\" : \"scm_truck_pack/coal_heap.obj\" , \"Capacity\" : null , \"Explosive\" : false , \"ExplosionForce\" : null } ... }, \"TargetUri\" : \"scm_truck_pack/hopper_semitrailer.carunit\" , \"MaxWeight\" : 32.0 , \"LoadingSpeedMultiplier\" : 1.0 , \"UnloadingSpeedMultiplier\" : 1.0 } Keyframes (Array): This array contains animation keyframes, 0.0 for when the vehicle is unloaded, some values for when it's partially loaded, and 1.0 one for when it is fully loaded. The value always goes from 0.0 to 1.0 regardless of the number of keyframes the load/unload animation has. The following parameters are self-explanatory, specifying the position, rotation, and mesh size of the load object. The rest of the parameters are the same as the rest of the assets explained above.","title":"Truck loads (.heapcapacity asset)"},{"location":"guides/content-mods/creating-your-first-truck-mod/#truck-recipes-carrecipe-asset","text":"Like locomotives, trucks can form compositions like the case of trailers, which have a dolly trailer and trailer. Its setting are exactly the same as the train recipe because it's the same asset. For more information read the section Train recipe settings ( .trainrecipe asset) in the Creating your first locomotive mod guide. { \"Sections\" : [ { \"Count\" : null , \"MinCount\" : null , \"MaxCount\" : 1 , \"Units\" : [ { \"Uri\" : \"scm_truck_pack/dolly_trailer.carunit\" , \"Flipped\" : false }, { \"Uri\" : \"scm_truck_pack/box_trailer.carunit\" , \"Flipped\" : false } ] } ], \"ResearchUri\" : \"scm_truck_pack/scm_trucks.research\" , \"Hidden\" : false }","title":"Truck recipes (.carrecipe asset):"},{"location":"guides/content-mods/creating-your-first-truck-mod/#couplings-carcoupling-asset","text":"Most of the trucks don't have couplings, but if it's a trailer or a semi-trailer it will have couplings at the front ( Coupling1Uri ), or if a cab at the rear ( Coupling2Uri ), or in both locations for dolly trailers.","title":"Couplings (.carcoupling asset )"},{"location":"guides/content-mods/creating-your-first-truck-mod/#further-reading","text":"How to publish your mod","title":"Further reading"},{"location":"guides/script-mods/adding-onclick-event-to-a-notification/","text":"Adding an OnClick-event to a Notification \u00b6 This guide is authored by Voxel Tycoon community member Nebruzias Introduction \u00b6 This tutorial will guide you through the process of triggering an action whenever you click on a Notification. After finishing this tutorial, you will know how to: Create a class with the INotificationAction Interface Add an action to your Notifications Note This guide continues on Creating your first script mod . If you dont know how to setup the environment or how to get a mod in game, please follow this guide first. This guide is based on Visual Studio 2019 Community Edition Main Class \u00b6 Start a new project and call it \"NotificationActionExample\" . An unwritten rule in programming is that you give your variables, classes, methods, etc, clear names. They should be named in such a way so that you know what their function is when you read their name. As you might have noticed, when we created this project, the class inside the project is named \"Class1\" by default. namespace NotificationActionExample { public class Class1 { } } Obviously this is not a very clear name. Lets start with renaming Class1 and give it the name \"Main\" . The reason for this name is that usually the first class in your project will be your main class which manages and executes everything else. Of course you are free to call it whatever, it is not required to be named \"Main\" for the mod to work, just make sure the name represents the function of this class. To rename the class, right click on Class1 in your Solution Explorer and select Rename . Then type in \"Main\" and press enter. Note After you have pressed enter, you are asked if you want to perform a rename for all references, select Yes . Now we need to get access to callbacks which allows us to execute code at a certain point in the games lifecycle. To get access to these callbacks we need to inherit from the Mod -class. Where it says public class Main , change this to public class Main : Mod . The Mod -class gives us access to a couple of callbacks. For this example we are interested in the OnGameStarted() -callback. Inside your Main -class, add: protected override void OnGameStarted () { } Now we can set up our notification inside OnGameStarted() , just like in the \" Creating your first script mod \" guide. Lets add the following code to OnGameStarted() : //Priority is an optional argument when calling the NotificationManager NotificationPriority priority = NotificationPriority . Default ; //Color is an optional argument when calling the NotificationManager //Beware, using Color can cause a small issue, read note below Color color = Company . Current . Color ; string title = \"Notification Action\" ; string message = \"Click this notification to trigger a Notification Action\" ; //Lets use a bell as an icon FontIcon icon = FontIcon . FaSolid ( \"\\uf0f3\" ); Note Instead of using Color , string , etc, you can also use the var type. Personally Im not a fan of var , but you are free to use it if you prefer using var instead. Unfortunately using Color instead of var can cause a small issue in this example. When we added the variable type Color , the namespace System.Drawing was automatically added, since Color is part of this namespace. While Company.Current.Color does return a value of type Color , it is not part of the System.Drawing namespace, instead it belongs to the UnityEngine namespace. It is throwing an error because the value Company.Current.Color returns does not fit in System.Drawing.Color . There are 2 ways to fix this problem: Replace using System.Drawing; with using UnityEngine; If you can't replace/remove the System.Drawing namespace (because you might need it for something else), declare the color-variable like: UnityEngine.Color color = Company.Current.Color; NotificationManager.Current.Push() requires 6 arguments: Priority (Optional) Color (Optional) Title Message Action Icon We have set variables for all the arguments, except Action . Before we can create and set a variable for this argument, we have to create a new Class . NotificationAction Class \u00b6 Lets create a new Class . Right click on your project in your Solution Explorer , then go to Add > New Item... Then in the next window select Class and give it the name NotificationAction.cs and click Add . Once you have added this new class, follow the steps below: Implement the INotificationAction -interface. After you implemented the interface, your NotificationAction -class should now look like this: class NotificationAction : INotificationAction { public void Act () { throw new NotImplementedException (); } public void Read ( StateBinaryReader reader ) { throw new NotImplementedException (); } public void Write ( StateBinaryWriter writer ) { throw new NotImplementedException (); } } Help How to implement an interface? (Optional) Remove the throw new NotImplementedException(); from all 3 callbacks, to prevent any exceptions showing up in game. Lets add some code to the Act() -callback. This is the callback that will be triggered when you click on the linked notification. As an action we are going to show another notification that tells us that we succesfully triggered a notification action. Lets set up a new notification: //Priority is an optional parameter NotificationPriority priority = NotificationPriority . Default ; //For a color, lets use a somewhat darker green - Make sure you're using the Color32 type, read below Color32 color = new Color32 ( 63 , 191 , 63 , 255 ); string title = \"SUCCES!!!\" ; string message = \"You have succesfully triggered a notification action!\" ; //Lets use a thumbs up as an icon FontIcon icon = FontIcon . FaSolid ( \"\\uf164\" ); Note The Color32 -type accepts the full RGBA values (0 - 255), while the Color -type only accepts values from 0 to 1. When you have a RGB value you want to use, it is recommended to use the Color32 -type, else you have to convert your RGB values to a value between 0 and 1. This is not difficult to do, but it requires a bit of extra work which can be avoided. Then we need to call the Notification Manager to actually display this notification. We do this with adding the following statement: NotificationManager.Current.Push(priority, color, title, message, null, icon); Note INotificationAction action is a required argument while calling NotificationManager . Since we dont have an action we want to happen when this notification is clicked, we just pass null for this argument. As a final result your NotificationAction -class should now look like this: class NotificationAction : INotificationAction { public void Act () { //Priority is an optional parameter NotificationPriority priority = NotificationPriority . Default ; //Color is an optional parameter Color32 color = new Color32 ( 63 , 191 , 63 , 255 ); string title = \"SUCCES!!!\" ; string message = \"You have succesfully triggered a notification action!\" ; //Lets use a thumbs up as an icon FontIcon icon = FontIcon . FaSolid ( \"\\uf164\" ); NotificationManager . Current . Push ( priority , color , title , message , null , icon ); } public void Read ( StateBinaryReader reader ) { } public void Write ( StateBinaryWriter writer ) { } } Now that we have a class which can go in the INotificationAction action -variable, we can implement it. Implement the Notification Action \u00b6 Add the following line to your OnGameStarted() -callback in your Main -Class: INotificationAction action = new NotificationAction(); Your Main -class should now look like this: public class Main : Mod { public void OnGameStarted () { //Priority is an optional parameter NotificationPriority priority = NotificationPriority . Default ; //Color is an optional parameter Color color = Company . Current . Color ; string title = \"Notification Action\" ; string message = \"Click this notification to trigger a Notification Action\" ; //Lets use a bell as an icon FontIcon icon = FontIcon . FaSolid ( \"\\uf0f3\" ); INotificationAction action = new NotificationAction (); } } Now we have all the required arguments to call the Notification Manager . Add the following statement to your OnGameStarted -callback in your Main -Class: NotificationManager.Current.Push(priority, color, title, message, action, icon); As a final result your Main -class should look like this: public class Main : Mod { public void OnGameStarted () { //Priority is an optional parameter NotificationPriority priority = NotificationPriority . Default ; //Color is an optional parameter Color color = Company . Current . Color ; string title = \"Notification Action\" ; string message = \"Click this notification to trigger a Notification Action\" ; //Lets use a bell as an icon FontIcon icon = FontIcon . FaSolid ( \"\\uf0f3\" ); INotificationAction action = new NotificationAction (); NotificationManager . Current . Push ( priority , color , title , message , action , icon ); } } Compile and run the mod \u00b6 Now we can add this mod to the game and try it out. Tip To read in detail how to do this, check Run the mod section of the Creating your first script mod guide. Follow the steps below: Build your project into a .dll-file Locate your .dll-file and place it in Content/<your_mod_folder> Create a mod.json file Start Voxel Tycoon and start a new game with your just created mod activated Wait for your game to load... CLICK THAT NOTIFICATION!!! Play around \u00b6 If you're not yet very familiar with coding, I suggest to play around some more to see what other awesome things you can do with Notification Actions . This is a good way to get better with coding.","title":"Adding an OnClick-event to a Notification"},{"location":"guides/script-mods/adding-onclick-event-to-a-notification/#adding-an-onclick-event-to-a-notification","text":"This guide is authored by Voxel Tycoon community member Nebruzias","title":"Adding an OnClick-event to a Notification"},{"location":"guides/script-mods/adding-onclick-event-to-a-notification/#introduction","text":"This tutorial will guide you through the process of triggering an action whenever you click on a Notification. After finishing this tutorial, you will know how to: Create a class with the INotificationAction Interface Add an action to your Notifications Note This guide continues on Creating your first script mod . If you dont know how to setup the environment or how to get a mod in game, please follow this guide first. This guide is based on Visual Studio 2019 Community Edition","title":"Introduction"},{"location":"guides/script-mods/adding-onclick-event-to-a-notification/#main-class","text":"Start a new project and call it \"NotificationActionExample\" . An unwritten rule in programming is that you give your variables, classes, methods, etc, clear names. They should be named in such a way so that you know what their function is when you read their name. As you might have noticed, when we created this project, the class inside the project is named \"Class1\" by default. namespace NotificationActionExample { public class Class1 { } } Obviously this is not a very clear name. Lets start with renaming Class1 and give it the name \"Main\" . The reason for this name is that usually the first class in your project will be your main class which manages and executes everything else. Of course you are free to call it whatever, it is not required to be named \"Main\" for the mod to work, just make sure the name represents the function of this class. To rename the class, right click on Class1 in your Solution Explorer and select Rename . Then type in \"Main\" and press enter. Note After you have pressed enter, you are asked if you want to perform a rename for all references, select Yes . Now we need to get access to callbacks which allows us to execute code at a certain point in the games lifecycle. To get access to these callbacks we need to inherit from the Mod -class. Where it says public class Main , change this to public class Main : Mod . The Mod -class gives us access to a couple of callbacks. For this example we are interested in the OnGameStarted() -callback. Inside your Main -class, add: protected override void OnGameStarted () { } Now we can set up our notification inside OnGameStarted() , just like in the \" Creating your first script mod \" guide. Lets add the following code to OnGameStarted() : //Priority is an optional argument when calling the NotificationManager NotificationPriority priority = NotificationPriority . Default ; //Color is an optional argument when calling the NotificationManager //Beware, using Color can cause a small issue, read note below Color color = Company . Current . Color ; string title = \"Notification Action\" ; string message = \"Click this notification to trigger a Notification Action\" ; //Lets use a bell as an icon FontIcon icon = FontIcon . FaSolid ( \"\\uf0f3\" ); Note Instead of using Color , string , etc, you can also use the var type. Personally Im not a fan of var , but you are free to use it if you prefer using var instead. Unfortunately using Color instead of var can cause a small issue in this example. When we added the variable type Color , the namespace System.Drawing was automatically added, since Color is part of this namespace. While Company.Current.Color does return a value of type Color , it is not part of the System.Drawing namespace, instead it belongs to the UnityEngine namespace. It is throwing an error because the value Company.Current.Color returns does not fit in System.Drawing.Color . There are 2 ways to fix this problem: Replace using System.Drawing; with using UnityEngine; If you can't replace/remove the System.Drawing namespace (because you might need it for something else), declare the color-variable like: UnityEngine.Color color = Company.Current.Color; NotificationManager.Current.Push() requires 6 arguments: Priority (Optional) Color (Optional) Title Message Action Icon We have set variables for all the arguments, except Action . Before we can create and set a variable for this argument, we have to create a new Class .","title":"Main Class"},{"location":"guides/script-mods/adding-onclick-event-to-a-notification/#notificationaction-class","text":"Lets create a new Class . Right click on your project in your Solution Explorer , then go to Add > New Item... Then in the next window select Class and give it the name NotificationAction.cs and click Add . Once you have added this new class, follow the steps below: Implement the INotificationAction -interface. After you implemented the interface, your NotificationAction -class should now look like this: class NotificationAction : INotificationAction { public void Act () { throw new NotImplementedException (); } public void Read ( StateBinaryReader reader ) { throw new NotImplementedException (); } public void Write ( StateBinaryWriter writer ) { throw new NotImplementedException (); } } Help How to implement an interface? (Optional) Remove the throw new NotImplementedException(); from all 3 callbacks, to prevent any exceptions showing up in game. Lets add some code to the Act() -callback. This is the callback that will be triggered when you click on the linked notification. As an action we are going to show another notification that tells us that we succesfully triggered a notification action. Lets set up a new notification: //Priority is an optional parameter NotificationPriority priority = NotificationPriority . Default ; //For a color, lets use a somewhat darker green - Make sure you're using the Color32 type, read below Color32 color = new Color32 ( 63 , 191 , 63 , 255 ); string title = \"SUCCES!!!\" ; string message = \"You have succesfully triggered a notification action!\" ; //Lets use a thumbs up as an icon FontIcon icon = FontIcon . FaSolid ( \"\\uf164\" ); Note The Color32 -type accepts the full RGBA values (0 - 255), while the Color -type only accepts values from 0 to 1. When you have a RGB value you want to use, it is recommended to use the Color32 -type, else you have to convert your RGB values to a value between 0 and 1. This is not difficult to do, but it requires a bit of extra work which can be avoided. Then we need to call the Notification Manager to actually display this notification. We do this with adding the following statement: NotificationManager.Current.Push(priority, color, title, message, null, icon); Note INotificationAction action is a required argument while calling NotificationManager . Since we dont have an action we want to happen when this notification is clicked, we just pass null for this argument. As a final result your NotificationAction -class should now look like this: class NotificationAction : INotificationAction { public void Act () { //Priority is an optional parameter NotificationPriority priority = NotificationPriority . Default ; //Color is an optional parameter Color32 color = new Color32 ( 63 , 191 , 63 , 255 ); string title = \"SUCCES!!!\" ; string message = \"You have succesfully triggered a notification action!\" ; //Lets use a thumbs up as an icon FontIcon icon = FontIcon . FaSolid ( \"\\uf164\" ); NotificationManager . Current . Push ( priority , color , title , message , null , icon ); } public void Read ( StateBinaryReader reader ) { } public void Write ( StateBinaryWriter writer ) { } } Now that we have a class which can go in the INotificationAction action -variable, we can implement it.","title":"NotificationAction Class"},{"location":"guides/script-mods/adding-onclick-event-to-a-notification/#implement-the-notification-action","text":"Add the following line to your OnGameStarted() -callback in your Main -Class: INotificationAction action = new NotificationAction(); Your Main -class should now look like this: public class Main : Mod { public void OnGameStarted () { //Priority is an optional parameter NotificationPriority priority = NotificationPriority . Default ; //Color is an optional parameter Color color = Company . Current . Color ; string title = \"Notification Action\" ; string message = \"Click this notification to trigger a Notification Action\" ; //Lets use a bell as an icon FontIcon icon = FontIcon . FaSolid ( \"\\uf0f3\" ); INotificationAction action = new NotificationAction (); } } Now we have all the required arguments to call the Notification Manager . Add the following statement to your OnGameStarted -callback in your Main -Class: NotificationManager.Current.Push(priority, color, title, message, action, icon); As a final result your Main -class should look like this: public class Main : Mod { public void OnGameStarted () { //Priority is an optional parameter NotificationPriority priority = NotificationPriority . Default ; //Color is an optional parameter Color color = Company . Current . Color ; string title = \"Notification Action\" ; string message = \"Click this notification to trigger a Notification Action\" ; //Lets use a bell as an icon FontIcon icon = FontIcon . FaSolid ( \"\\uf0f3\" ); INotificationAction action = new NotificationAction (); NotificationManager . Current . Push ( priority , color , title , message , action , icon ); } }","title":"Implement the Notification Action"},{"location":"guides/script-mods/adding-onclick-event-to-a-notification/#compile-and-run-the-mod","text":"Now we can add this mod to the game and try it out. Tip To read in detail how to do this, check Run the mod section of the Creating your first script mod guide. Follow the steps below: Build your project into a .dll-file Locate your .dll-file and place it in Content/<your_mod_folder> Create a mod.json file Start Voxel Tycoon and start a new game with your just created mod activated Wait for your game to load... CLICK THAT NOTIFICATION!!!","title":"Compile and run the mod"},{"location":"guides/script-mods/adding-onclick-event-to-a-notification/#play-around","text":"If you're not yet very familiar with coding, I suggest to play around some more to see what other awesome things you can do with Notification Actions . This is a good way to get better with coding.","title":"Play around"},{"location":"guides/script-mods/creating-your-first-script-mod/","text":"Creating your first script mod \u00b6 Introduction \u00b6 This tutorial will guide you through the process of creating your first script mod for Voxel Tycoon. To get a common understanding of how script mods work and what is possible to be done with them, please refer .dll asset documentation page . We assume that you have at least basic knowledge of development in C# and Unity. After finishing this tutorial, you will know how to: Setup development environment Build super simple but working script mod that shows custom in-game notifications Tldr Resulting source code, with some additions, can be found here: https://github.com/voxeltycoon/mods . Set up the environment \u00b6 Script mods can be built with any tools that could compile your source code into the .NET DLL. This ranges from full-featured IDEs like Visual Studio, to manually calling the compiler on source files. In this tutorial, we will use Visual Studio (Community 2019) for this purpose, as the most straightforward way to build a .NET DLL on Windows. It can be obtained for free from the official site . Ensure that you have .NET Desktop development workload installed: Besides Visual Studio, you'll need - obviously - a licensed copy of Voxel Tycoon to test and publish your mods . Actually, this concludes all the preparations you need to start developing your first script mod. As you may notice, even Unity installation is not required. Create a new project \u00b6 After you launch Visual Studio, you'll see the welcome window. Hit Create new project there: Then choose Class Library (.NET Standard) (make sure you choose C# one, not Visual Basic): Name your project and choose where it should be placed (this is where your source code will be located, not the result DLL file, so DO NOT choose game's Content folder): Now, we need to add references to libraries that contain APIs we want to access. To do this, right-click on the project dependencies item in the Solution Explorer (1), then click on Add Reference... (2): Reference Manager window will appear. Hit Browse on the left (1) then Browse at the bottom (2) and select Assembly-CSharp.dll and UnityEngine.CoreModule.dll libraries that can be found in VoxelTycoon_Data/Managed directory inside the game folder (3): The project for our mod is ready! Now it's time to make it do something. Write some code \u00b6 As a simple but working example let's make our mod to show a custom in-game notification when the game is loaded. Inherit from the Mod abstract class \u00b6 To let the game know what code it should run from our script mod, we need to inherit from the Mod class, situated at the VoxelTycoon.Modding namespace. Mod class exposes several callbacks, but for our mod it's enough to override just OnGameStarted one: public class Class1 : Mod { protected override void OnGameStarted () { // That's where our mod logic goes. } } Access Notification Manager API \u00b6 To show our notification in-game, we need to access Notification Manager . Besides other methods it exposes, the most we interested in currently is this one: public Notification Push ( NotificationPriority priority , Color color , string title , string message , INotificationAction action , FontIcon icon ) Let's call it from our mod's code: protected override void OnGameStarted () { // Maximum priority so we never miss it. var priority = NotificationPriority . Critical ; // Make the notification look fancy by setting the color // to the current company color. var color = Company . Current . Color ; var title = \"Hello World!\" ; var message = \"Oh gosh, this is my first ever C# mod \" + \"for VT, and it's actually working for some reason!\" ; // Action is executed when player clicks on notification. // For the sake of simplicity, we will not cover notification // actions in this tutorial, so we just pass default value (null), // which effectively means no action will be executed on click. var action = default ( INotificationAction ); // Use custom FontAwesome (https://fontawesome.com/icons) icon var icon = FontIcon . FaSolid ( \"\\uf7e4\" ); // And finally, call the API NotificationManager . Current . Push ( priority , color , title , message , action , icon ); } Info There's a lot of managers present around the code of Voxel Tycoon. Most of the game API is accessable through them. Tip You can create your own managers by inheriting from Manager<T> or LazyManager<T> classes. Run the mod \u00b6 That's it! Our brilliant mod is almost ready to be put in the game. Compile the mod into a DLL \u00b6 Now we need to compile our source code to a DLL file that can be put into the game. To do this, just hit F6 . Yeah, that easy! After the build process successfully finishes, you will find the result DLL at the <project location>/bin/Debug/netstandard2.0/<project name>.dll directory. Note Depending on chosen build configuration , the DLL may be built to Release directory instead of Debug . Run the game \u00b6 As we now have a DLL, we can put it into the game. Just copy the DLL to your mod directory inside the game's Content folder, just as you do with any other mod asset. Now you can run VT, and start the new game with your mod enabled. Note Don't forget to put a mod.json metadata file inside the mod pack folder which will allow the game to locate and load the mod. Tip To avoid manual copying the DLL file after every change, you can setup post-build event in the project settings. Enjoy yourself \u00b6 Congratulations! You've just created such an amazing mod, just as you are! \u2728 As a conclusion, take a look at some points that were left outside of the scope of this tutorial: One DLL can contain not just one code file, but any amount you need Explore other callbacks Mod class provides, like OnUpdate() or Initialize() (called before any assets loaded) Mods can read and write data to a save file using corresponding callbacks You can debug your code by writing logs or even attaching a debugger As stated at Where's API documentation? , feel free to explore the game code base for existent and possible APIs, and let us know what you think! Happy coding! \ud83d\udc9c","title":"Creating your first script mod"},{"location":"guides/script-mods/creating-your-first-script-mod/#creating-your-first-script-mod","text":"","title":"Creating your first script mod"},{"location":"guides/script-mods/creating-your-first-script-mod/#introduction","text":"This tutorial will guide you through the process of creating your first script mod for Voxel Tycoon. To get a common understanding of how script mods work and what is possible to be done with them, please refer .dll asset documentation page . We assume that you have at least basic knowledge of development in C# and Unity. After finishing this tutorial, you will know how to: Setup development environment Build super simple but working script mod that shows custom in-game notifications Tldr Resulting source code, with some additions, can be found here: https://github.com/voxeltycoon/mods .","title":"Introduction"},{"location":"guides/script-mods/creating-your-first-script-mod/#set-up-the-environment","text":"Script mods can be built with any tools that could compile your source code into the .NET DLL. This ranges from full-featured IDEs like Visual Studio, to manually calling the compiler on source files. In this tutorial, we will use Visual Studio (Community 2019) for this purpose, as the most straightforward way to build a .NET DLL on Windows. It can be obtained for free from the official site . Ensure that you have .NET Desktop development workload installed: Besides Visual Studio, you'll need - obviously - a licensed copy of Voxel Tycoon to test and publish your mods . Actually, this concludes all the preparations you need to start developing your first script mod. As you may notice, even Unity installation is not required.","title":"Set up the environment"},{"location":"guides/script-mods/creating-your-first-script-mod/#create-a-new-project","text":"After you launch Visual Studio, you'll see the welcome window. Hit Create new project there: Then choose Class Library (.NET Standard) (make sure you choose C# one, not Visual Basic): Name your project and choose where it should be placed (this is where your source code will be located, not the result DLL file, so DO NOT choose game's Content folder): Now, we need to add references to libraries that contain APIs we want to access. To do this, right-click on the project dependencies item in the Solution Explorer (1), then click on Add Reference... (2): Reference Manager window will appear. Hit Browse on the left (1) then Browse at the bottom (2) and select Assembly-CSharp.dll and UnityEngine.CoreModule.dll libraries that can be found in VoxelTycoon_Data/Managed directory inside the game folder (3): The project for our mod is ready! Now it's time to make it do something.","title":"Create a new project"},{"location":"guides/script-mods/creating-your-first-script-mod/#write-some-code","text":"As a simple but working example let's make our mod to show a custom in-game notification when the game is loaded.","title":"Write some code"},{"location":"guides/script-mods/creating-your-first-script-mod/#inherit-from-the-mod-abstract-class","text":"To let the game know what code it should run from our script mod, we need to inherit from the Mod class, situated at the VoxelTycoon.Modding namespace. Mod class exposes several callbacks, but for our mod it's enough to override just OnGameStarted one: public class Class1 : Mod { protected override void OnGameStarted () { // That's where our mod logic goes. } }","title":"Inherit from the Mod abstract class"},{"location":"guides/script-mods/creating-your-first-script-mod/#access-notification-manager-api","text":"To show our notification in-game, we need to access Notification Manager . Besides other methods it exposes, the most we interested in currently is this one: public Notification Push ( NotificationPriority priority , Color color , string title , string message , INotificationAction action , FontIcon icon ) Let's call it from our mod's code: protected override void OnGameStarted () { // Maximum priority so we never miss it. var priority = NotificationPriority . Critical ; // Make the notification look fancy by setting the color // to the current company color. var color = Company . Current . Color ; var title = \"Hello World!\" ; var message = \"Oh gosh, this is my first ever C# mod \" + \"for VT, and it's actually working for some reason!\" ; // Action is executed when player clicks on notification. // For the sake of simplicity, we will not cover notification // actions in this tutorial, so we just pass default value (null), // which effectively means no action will be executed on click. var action = default ( INotificationAction ); // Use custom FontAwesome (https://fontawesome.com/icons) icon var icon = FontIcon . FaSolid ( \"\\uf7e4\" ); // And finally, call the API NotificationManager . Current . Push ( priority , color , title , message , action , icon ); } Info There's a lot of managers present around the code of Voxel Tycoon. Most of the game API is accessable through them. Tip You can create your own managers by inheriting from Manager<T> or LazyManager<T> classes.","title":"Access Notification Manager API"},{"location":"guides/script-mods/creating-your-first-script-mod/#run-the-mod","text":"That's it! Our brilliant mod is almost ready to be put in the game.","title":"Run the mod"},{"location":"guides/script-mods/creating-your-first-script-mod/#compile-the-mod-into-a-dll","text":"Now we need to compile our source code to a DLL file that can be put into the game. To do this, just hit F6 . Yeah, that easy! After the build process successfully finishes, you will find the result DLL at the <project location>/bin/Debug/netstandard2.0/<project name>.dll directory. Note Depending on chosen build configuration , the DLL may be built to Release directory instead of Debug .","title":"Compile the mod into a DLL"},{"location":"guides/script-mods/creating-your-first-script-mod/#run-the-game","text":"As we now have a DLL, we can put it into the game. Just copy the DLL to your mod directory inside the game's Content folder, just as you do with any other mod asset. Now you can run VT, and start the new game with your mod enabled. Note Don't forget to put a mod.json metadata file inside the mod pack folder which will allow the game to locate and load the mod. Tip To avoid manual copying the DLL file after every change, you can setup post-build event in the project settings.","title":"Run the game"},{"location":"guides/script-mods/creating-your-first-script-mod/#enjoy-yourself","text":"Congratulations! You've just created such an amazing mod, just as you are! \u2728 As a conclusion, take a look at some points that were left outside of the scope of this tutorial: One DLL can contain not just one code file, but any amount you need Explore other callbacks Mod class provides, like OnUpdate() or Initialize() (called before any assets loaded) Mods can read and write data to a save file using corresponding callbacks You can debug your code by writing logs or even attaching a debugger As stated at Where's API documentation? , feel free to explore the game code base for existent and possible APIs, and let us know what you think! Happy coding! \ud83d\udc9c","title":"Enjoy yourself"},{"location":"guides/script-mods/debugging/attaching-a-debugger/","text":"This guide is an adaptation of this post by CuteLasty Prerequirements \u00b6 This guide assumes you know how to use Visual Studio debugger. If not, first get familiar with it in this this step-by-step walkthrough . You Visual Studio installation should have Visual Studio Tools for Unity installed. Extract development files from Unity installation \u00b6 First, you need to determine what version of Unity used to build the game. To do so, see properties of UnityPlayer.dll file from the game folder. Under Details tab, there's Product version property. For example, if this property contains something like 2020.2.2.1234 we need 2020.2.2 version of Unity. Download and install correct version (2020.2.2 in our case) of Unity. Don't choose any additional components other than Unity itself. It can be uninstalled after finishing this guide, so don't care much where you install it, but remember the folder. After installation complete, navigate to the folder where you just installed Unity, then to the Editor\\Data\\PlaybackEngines\\windowsstandalonesupport\\Variations\\win64_development_mono\\ subfolder, and do the following: File Action UnityPlayer.dll Replace the one in the game folder WinPixEventRuntime.dll Replace the one in the game folder WindowsPlayer.exe Replace VoxelTycoon.exe in the game folder Important If the Unity version used to build the game will change, you'll need to repeat this guide using correct version. Put the game itself into development mode \u00b6 Open VoxelTycoon_Data\\boot.config and add these strings: wait-for-managed-debugger = 1 player-connection-debug = 1 Attach a debugger \u00b6 Rebuild your mod, and place .dll and .pdb files to your mod folder inside the game's Content\\ folder. Now run the game and you should see a dialog saying You can attach a managed debugger now if you want . In Visual Studio, go to Debug \u2794 Attach Unity Debugger , then double-click an item in the dialog shown. That's it! Now you able to set break points on your mod code, and inspect variable values. Important The game running in the development mode will have reduced performance, so after you end with debugging your mod, you'll want to restore game files to the original state. To do so, just verify integrity of game files . In this case (or with each game update) all the changes you made following this guide we'll be lost. To avoid this you can copy UnityPlayer.dll , WinPixEventRuntime.dll , VoxelTycoon.exe , and VoxelTycoon_Data\\boot.config files into some backup folder, so you can copy it back later without need to install Unity again. Troubleshooting \u00b6 Ensure that Project properties \u2794 Build \u2794 Advanced\u2026 \u2794 Debugging information is set to Portable . Ensure you have Visual Studio Tools for Unity installed.","title":"Attaching a debugger"},{"location":"guides/script-mods/debugging/attaching-a-debugger/#prerequirements","text":"This guide assumes you know how to use Visual Studio debugger. If not, first get familiar with it in this this step-by-step walkthrough . You Visual Studio installation should have Visual Studio Tools for Unity installed.","title":"Prerequirements"},{"location":"guides/script-mods/debugging/attaching-a-debugger/#extract-development-files-from-unity-installation","text":"First, you need to determine what version of Unity used to build the game. To do so, see properties of UnityPlayer.dll file from the game folder. Under Details tab, there's Product version property. For example, if this property contains something like 2020.2.2.1234 we need 2020.2.2 version of Unity. Download and install correct version (2020.2.2 in our case) of Unity. Don't choose any additional components other than Unity itself. It can be uninstalled after finishing this guide, so don't care much where you install it, but remember the folder. After installation complete, navigate to the folder where you just installed Unity, then to the Editor\\Data\\PlaybackEngines\\windowsstandalonesupport\\Variations\\win64_development_mono\\ subfolder, and do the following: File Action UnityPlayer.dll Replace the one in the game folder WinPixEventRuntime.dll Replace the one in the game folder WindowsPlayer.exe Replace VoxelTycoon.exe in the game folder Important If the Unity version used to build the game will change, you'll need to repeat this guide using correct version.","title":"Extract development files from Unity installation"},{"location":"guides/script-mods/debugging/attaching-a-debugger/#put-the-game-itself-into-development-mode","text":"Open VoxelTycoon_Data\\boot.config and add these strings: wait-for-managed-debugger = 1 player-connection-debug = 1","title":"Put the game itself into development mode"},{"location":"guides/script-mods/debugging/attaching-a-debugger/#attach-a-debugger","text":"Rebuild your mod, and place .dll and .pdb files to your mod folder inside the game's Content\\ folder. Now run the game and you should see a dialog saying You can attach a managed debugger now if you want . In Visual Studio, go to Debug \u2794 Attach Unity Debugger , then double-click an item in the dialog shown. That's it! Now you able to set break points on your mod code, and inspect variable values. Important The game running in the development mode will have reduced performance, so after you end with debugging your mod, you'll want to restore game files to the original state. To do so, just verify integrity of game files . In this case (or with each game update) all the changes you made following this guide we'll be lost. To avoid this you can copy UnityPlayer.dll , WinPixEventRuntime.dll , VoxelTycoon.exe , and VoxelTycoon_Data\\boot.config files into some backup folder, so you can copy it back later without need to install Unity again.","title":"Attach a debugger"},{"location":"guides/script-mods/debugging/attaching-a-debugger/#troubleshooting","text":"Ensure that Project properties \u2794 Build \u2794 Advanced\u2026 \u2794 Debugging information is set to Portable . Ensure you have Visual Studio Tools for Unity installed.","title":"Troubleshooting"},{"location":"guides/script-mods/debugging/writing-logs/","text":"You can use Unity's Debug.Log() that will output to Player.log . There's also a Logger class provided by Voxel Tycoon API to get nicer output: public class MyMod : Mod { _logger = new Logger < MyMod >(); public void Initialize () { _logger . Log ( \"Initialized!\" ); } } Output: [1/31/2021 11:42:45 PM] [MyMod] Initialized! Player.log \u00b6 Player.log is where the game writes all its logs. You can write there too using Unity's Debug.Log() in your script mods . This file can be found in the next locations: Platform Windows C:\\Users\\username\\AppData\\LocalLow\\CompanyName\\ProductName\\Player.log macOS ~/Library/Logs/Company Name/Product Name/Player.log Linux ~/.config/unity3d/CompanyName/ProductName/Player.log","title":"Writing logs"},{"location":"guides/script-mods/debugging/writing-logs/#playerlog","text":"Player.log is where the game writes all its logs. You can write there too using Unity's Debug.Log() in your script mods . This file can be found in the next locations: Platform Windows C:\\Users\\username\\AppData\\LocalLow\\CompanyName\\ProductName\\Player.log macOS ~/Library/Logs/Company Name/Product Name/Player.log Linux ~/.config/unity3d/CompanyName/ProductName/Player.log","title":"Player.log"},{"location":"reference/","text":"Introduction \u00b6 Where to begin? \u00b6 If this is your first time making a script mod, you should refer to the script mod overview page. Commonly Used Entities \u00b6 Modding.Mod Company Contribute! \u00b6 Creating API documentation from scratch is very time consuming. To help with its creation you don't need to be a programming genius, just look at the decompiled sources and write the documentation in the same way it's created (splitting into properties, methods, constructors, etc.) and use the templates. Just go to the docs repository (top right) and start writing!","title":"Introduction"},{"location":"reference/#introduction","text":"","title":"Introduction"},{"location":"reference/#where-to-begin","text":"If this is your first time making a script mod, you should refer to the script mod overview page.","title":"Where to begin?"},{"location":"reference/#commonly-used-entities","text":"Modding.Mod Company","title":"Commonly Used Entities"},{"location":"reference/#contribute","text":"Creating API documentation from scratch is very time consuming. To help with its creation you don't need to be a programming genius, just look at the decompiled sources and write the documentation in the same way it's created (splitting into properties, methods, constructors, etc.) and use the templates. Just go to the docs repository (top right) and start writing!","title":"Contribute!"},{"location":"reference/VoxelTycoon/Biome/","text":"Class Biome \u00b6 Represents a biome Namespace: VoxelTycoon Constructor \u00b6 Biome() \u00b6 Creates new biome with default values. Declaration public Biome () Properties \u00b6 Ambient \u00b6 Audioclip used as an ambient sound. Declaration public AudioClip Ambient { get ; set ; } Type Description AudioClip Audio clip used for the biome AssetId \u00b6 The biome asset's ID. Declaration public int AssetId { get ; set ; } Type Description int ID of the biome BodyColor \u00b6 Color of the biome. Declaration public Color BodyColor { get ; set ; } Type Description Color Biome's color Bumpiness \u00b6 Biome's bumpiness. Declaration public float Bumpiness { get ; set ; } Type Description float Value of the bumpiness CoverColor \u00b6 Biome's cover color. Declaration public Color CoverColor { get ; set ; } Type Description Color Biome's cover color DisplayName \u00b6 Biome's display name. Declaration public DisplayString DisplayName { get ; set ; } Type Description DisplayString String (and optional format) representing the biome's name Hidden \u00b6 Indicates whether the biome is hidden or not. Declaration public bool Hidden { get ; set ; } Type Description bool Whether the biome is hidden Humidity \u00b6 Represents the biome's humidity. Declaration public float Humidity { get ; set ; } Type Description float Biome's humidity LiveryTag \u00b6 Biome's livery tag. Declaration public string LiveryTag { get ; set ; } Type Description string Biome's livery tag Plants \u00b6 Biome's plants. Declaration public ImmutableList < PlantProbability > Plants { get ; } Type Description ImmutableList List of Plants Sounds \u00b6 Represents the biome's sounds. Declaration public Audio . SoundProbabilityCollection Sounds { get ; set ; } Type Description Audio.SoundProbabilityCollection Biome's sounds Tags \u00b6 Biome's tags. Declaration public ImmutableUniqueList < string > Tags { get ; } Type Description ImmutableUniqueList Biome's tags list Temperature \u00b6 Biome's temperature. Declaration public float Temperature { get ; set ;} Type Description float Biome's temperature Methods \u00b6 SetPlants(IList ) \u00b6 Sets the biome's plants. Declaration public void SetPlants ( IList < PlantProbability > plants ) Parameters Type Name Description IList plants Biome's plants SetTags(IList ) \u00b6 Sets the biome's tags. Declaration public void SetTags ( IList < string > tags ) Parameters Type Name Description IList tags Biome's tags","title":"Biome"},{"location":"reference/VoxelTycoon/Biome/#class-biome","text":"Represents a biome Namespace: VoxelTycoon","title":"Class Biome"},{"location":"reference/VoxelTycoon/Biome/#constructor","text":"","title":"Constructor"},{"location":"reference/VoxelTycoon/Biome/#biome","text":"Creates new biome with default values. Declaration public Biome ()","title":"Biome()"},{"location":"reference/VoxelTycoon/Biome/#properties","text":"","title":"Properties"},{"location":"reference/VoxelTycoon/Biome/#ambient","text":"Audioclip used as an ambient sound. Declaration public AudioClip Ambient { get ; set ; } Type Description AudioClip Audio clip used for the biome","title":"Ambient"},{"location":"reference/VoxelTycoon/Biome/#assetid","text":"The biome asset's ID. Declaration public int AssetId { get ; set ; } Type Description int ID of the biome","title":"AssetId"},{"location":"reference/VoxelTycoon/Biome/#bodycolor","text":"Color of the biome. Declaration public Color BodyColor { get ; set ; } Type Description Color Biome's color","title":"BodyColor"},{"location":"reference/VoxelTycoon/Biome/#bumpiness","text":"Biome's bumpiness. Declaration public float Bumpiness { get ; set ; } Type Description float Value of the bumpiness","title":"Bumpiness"},{"location":"reference/VoxelTycoon/Biome/#covercolor","text":"Biome's cover color. Declaration public Color CoverColor { get ; set ; } Type Description Color Biome's cover color","title":"CoverColor"},{"location":"reference/VoxelTycoon/Biome/#displayname","text":"Biome's display name. Declaration public DisplayString DisplayName { get ; set ; } Type Description DisplayString String (and optional format) representing the biome's name","title":"DisplayName"},{"location":"reference/VoxelTycoon/Biome/#hidden","text":"Indicates whether the biome is hidden or not. Declaration public bool Hidden { get ; set ; } Type Description bool Whether the biome is hidden","title":"Hidden"},{"location":"reference/VoxelTycoon/Biome/#humidity","text":"Represents the biome's humidity. Declaration public float Humidity { get ; set ; } Type Description float Biome's humidity","title":"Humidity"},{"location":"reference/VoxelTycoon/Biome/#liverytag","text":"Biome's livery tag. Declaration public string LiveryTag { get ; set ; } Type Description string Biome's livery tag","title":"LiveryTag"},{"location":"reference/VoxelTycoon/Biome/#plants","text":"Biome's plants. Declaration public ImmutableList < PlantProbability > Plants { get ; } Type Description ImmutableList List of Plants","title":"Plants"},{"location":"reference/VoxelTycoon/Biome/#sounds","text":"Represents the biome's sounds. Declaration public Audio . SoundProbabilityCollection Sounds { get ; set ; } Type Description Audio.SoundProbabilityCollection Biome's sounds","title":"Sounds"},{"location":"reference/VoxelTycoon/Biome/#tags","text":"Biome's tags. Declaration public ImmutableUniqueList < string > Tags { get ; } Type Description ImmutableUniqueList Biome's tags list","title":"Tags"},{"location":"reference/VoxelTycoon/Biome/#temperature","text":"Biome's temperature. Declaration public float Temperature { get ; set ;} Type Description float Biome's temperature","title":"Temperature"},{"location":"reference/VoxelTycoon/Biome/#methods","text":"","title":"Methods"},{"location":"reference/VoxelTycoon/Biome/#setplantsilist","text":"Sets the biome's plants. Declaration public void SetPlants ( IList < PlantProbability > plants ) Parameters Type Name Description IList plants Biome's plants","title":"SetPlants(IList)"},{"location":"reference/VoxelTycoon/Biome/#settagsilist","text":"Sets the biome's tags. Declaration public void SetTags ( IList < string > tags ) Parameters Type Name Description IList tags Biome's tags","title":"SetTags(IList)"},{"location":"reference/VoxelTycoon/Company/","text":"Class Company \u00b6 Represents a Player Company Namespace: VoxelTycoon Constructors \u00b6 Company() \u00b6 Creates new company with default values. Declaration public Company () Company(StateBinaryReader) \u00b6 Creates new company from provided binary reader. Declaration public Company ( StateBinaryReader reader ) Type Name Description StateBinaryReader reader Reader with company values Properties \u00b6 Cheater \u00b6 Whether the player company has used cheats. Declaration public bool Cheater { get ; set ; } Type Description bool True if cheats were used Color \u00b6 The company's color. Changing it will invoke the ColorChanged action. Declaration public Color Color { get ; set ; } Type Description Color Company color ContrastColor \u00b6 Get's color that's a contract to a company's color. Declaration public Color ContrastColor { get ; } Type Description Color Contrasting color Current \u00b6 Get's current company used in the game. Declaration public static Company Current { get ; } Type Description Company Current company CurrentBudgetPeriod \u00b6 Gets company's current budget period. Declaration public BudgetPeriod CurrentBudgetPeriod { get ; private set ; } Type Description BudgetPeriod Company's budget period Headquarters \u00b6 Company's headquarters building. Declaration public Headquarters Headquarters { get ; internal set ; } Type Description Headquarters Company's headquarters, probably null if not built HeadquartersFlag \u00b6 Probably indicates whether headquarters were built. Declaration public bool HeadquartersFlag { get ; set ; } Type Description bool Whether headquarters are built (?) Id \u00b6 Company Id. Declaration public byte Id { get ; set ; } Type Description byte Company's internal Id Loan \u00b6 Company's current loan. Declaration public double Loan { get ; } Type Description double Loan LoanCount \u00b6 Amount of loans currently taken. Declaration public int LoanCount { get ; private set ; } Type Description int Amount of loans LoanInterest \u00b6 Current loan interest. Declaration public double LoanInterest { get ; private set ; } Type Description double Loan interest LoanStep \u00b6 How much loan increases each time it's taken. Declaration public double LoanStep { get ; private set ; } Type Description double Amount of money received when taking a loan MaxLoan \u00b6 Maximum loan company can take. Declaration public double MaxLoan { get ; } Type Description double Max loan amount MaxLoanCount \u00b6 Maximum amount of times company can take a loan. Declaration public int MaxLoanCount { get ; } Type Description int How much loans can company take Money \u00b6 How much money a company has. Declaration public double Money { get ; private set ; } Type Description double Amount of money Name \u00b6 Company name. Changing it will invoke the NameChanged action. Declaration public string Name { get ; set ; } Type Description string Company name PreviousBudgetPeriod \u00b6 Company's previous budget period. Declaration public BudgetPeriod PreviousBudgetPeriod { get ; private set ; } Type Description BudgetPeriod Previous budget period Value \u00b6 Company's value. Declaration public double Value { get ; private set ; } Type Description double Company value Events \u00b6 ColorChanged \u00b6 Action on when company color changes. Declaration public event Action ColorChanged ; Type Description Action ColorChanged event action MoneyChanged \u00b6 Action on when company money changes. Declaration public event Action MoneyChanged ; Type Description Action MoneyChanged event action NameChanged \u00b6 Action on when company name changes. Declaration public event Action NameChanged ; Type Description Action NameChanged event action Methods \u00b6 AddMoney(double, BudgetItem, bool) \u00b6 Adds money to the company. If value is negative takes money away from the company. Declaration public void AddMoney ( double value , BudgetItem budgetItem , bool important = true ) Parameters Type Name Description double value How much money to add BudgetItem budgetItem Category of the income bool important (?) AddRunningCosts(double, BudgetItem) \u00b6 Adds running costs to the specified category. Declaration public void AddRunningCosts ( double value , BudgetItem budgetItem ) Parameters Type Name Description double value How much money to add to the running costs BudgetItem budgetItem Category of the costs Borrow(int) \u00b6 Takes a loan. Declaration public void Borrow ( int count ) Parameters Type Name Description int count Amount of loans to take CanBorrow(int) \u00b6 Gets whether the company can take a loan. Declaration public bool CanBorrow ( int count ) Parameters Type Name Description int count How many loans company wants to take Returns Type Description bool Whether the company can take that much loans CanRepay(int) \u00b6 Gets whether the company can take a loan. Declaration public bool CanRepay ( int count ) Parameters Type Name Description int count How many loans company wants to return Returns Type Description bool Whether the company can repay that much loans HasEnoughMoney(double) \u00b6 Gets whether the company can afford something. Declaration public bool HasEnoughMoney ( double price ) Parameters Type Name Description double price How much company wants to spend Returns Type Description bool Whether the company can spend that much money InitializeLoan(int, int, double, double) \u00b6 Initializes loans for company. Declaration public void InitializeLoan ( int loanCount , int extraLoanCount , double loanStep , double loanInterest ) Parameters Type Name Description int loanCount Amount of loans int extraLoanCount Additional available loans double loanStep Money given/taken each step double loanInterest Interest of the loan Repay(int) \u00b6 Repays loans. Declaration public void Repay ( int count ) Parameters Type Name Description int count Amount of loans to repay","title":"Company"},{"location":"reference/VoxelTycoon/Company/#class-company","text":"Represents a Player Company Namespace: VoxelTycoon","title":"Class Company"},{"location":"reference/VoxelTycoon/Company/#constructors","text":"","title":"Constructors"},{"location":"reference/VoxelTycoon/Company/#company","text":"Creates new company with default values. Declaration public Company ()","title":"Company()"},{"location":"reference/VoxelTycoon/Company/#companystatebinaryreader","text":"Creates new company from provided binary reader. Declaration public Company ( StateBinaryReader reader ) Type Name Description StateBinaryReader reader Reader with company values","title":"Company(StateBinaryReader)"},{"location":"reference/VoxelTycoon/Company/#properties","text":"","title":"Properties"},{"location":"reference/VoxelTycoon/Company/#cheater","text":"Whether the player company has used cheats. Declaration public bool Cheater { get ; set ; } Type Description bool True if cheats were used","title":"Cheater"},{"location":"reference/VoxelTycoon/Company/#color","text":"The company's color. Changing it will invoke the ColorChanged action. Declaration public Color Color { get ; set ; } Type Description Color Company color","title":"Color"},{"location":"reference/VoxelTycoon/Company/#contrastcolor","text":"Get's color that's a contract to a company's color. Declaration public Color ContrastColor { get ; } Type Description Color Contrasting color","title":"ContrastColor"},{"location":"reference/VoxelTycoon/Company/#current","text":"Get's current company used in the game. Declaration public static Company Current { get ; } Type Description Company Current company","title":"Current"},{"location":"reference/VoxelTycoon/Company/#currentbudgetperiod","text":"Gets company's current budget period. Declaration public BudgetPeriod CurrentBudgetPeriod { get ; private set ; } Type Description BudgetPeriod Company's budget period","title":"CurrentBudgetPeriod"},{"location":"reference/VoxelTycoon/Company/#headquarters","text":"Company's headquarters building. Declaration public Headquarters Headquarters { get ; internal set ; } Type Description Headquarters Company's headquarters, probably null if not built","title":"Headquarters"},{"location":"reference/VoxelTycoon/Company/#headquartersflag","text":"Probably indicates whether headquarters were built. Declaration public bool HeadquartersFlag { get ; set ; } Type Description bool Whether headquarters are built (?)","title":"HeadquartersFlag"},{"location":"reference/VoxelTycoon/Company/#id","text":"Company Id. Declaration public byte Id { get ; set ; } Type Description byte Company's internal Id","title":"Id"},{"location":"reference/VoxelTycoon/Company/#loan","text":"Company's current loan. Declaration public double Loan { get ; } Type Description double Loan","title":"Loan"},{"location":"reference/VoxelTycoon/Company/#loancount","text":"Amount of loans currently taken. Declaration public int LoanCount { get ; private set ; } Type Description int Amount of loans","title":"LoanCount"},{"location":"reference/VoxelTycoon/Company/#loaninterest","text":"Current loan interest. Declaration public double LoanInterest { get ; private set ; } Type Description double Loan interest","title":"LoanInterest"},{"location":"reference/VoxelTycoon/Company/#loanstep","text":"How much loan increases each time it's taken. Declaration public double LoanStep { get ; private set ; } Type Description double Amount of money received when taking a loan","title":"LoanStep"},{"location":"reference/VoxelTycoon/Company/#maxloan","text":"Maximum loan company can take. Declaration public double MaxLoan { get ; } Type Description double Max loan amount","title":"MaxLoan"},{"location":"reference/VoxelTycoon/Company/#maxloancount","text":"Maximum amount of times company can take a loan. Declaration public int MaxLoanCount { get ; } Type Description int How much loans can company take","title":"MaxLoanCount"},{"location":"reference/VoxelTycoon/Company/#money","text":"How much money a company has. Declaration public double Money { get ; private set ; } Type Description double Amount of money","title":"Money"},{"location":"reference/VoxelTycoon/Company/#name","text":"Company name. Changing it will invoke the NameChanged action. Declaration public string Name { get ; set ; } Type Description string Company name","title":"Name"},{"location":"reference/VoxelTycoon/Company/#previousbudgetperiod","text":"Company's previous budget period. Declaration public BudgetPeriod PreviousBudgetPeriod { get ; private set ; } Type Description BudgetPeriod Previous budget period","title":"PreviousBudgetPeriod"},{"location":"reference/VoxelTycoon/Company/#value","text":"Company's value. Declaration public double Value { get ; private set ; } Type Description double Company value","title":"Value"},{"location":"reference/VoxelTycoon/Company/#events","text":"","title":"Events"},{"location":"reference/VoxelTycoon/Company/#colorchanged","text":"Action on when company color changes. Declaration public event Action ColorChanged ; Type Description Action ColorChanged event action","title":"ColorChanged"},{"location":"reference/VoxelTycoon/Company/#moneychanged","text":"Action on when company money changes. Declaration public event Action MoneyChanged ; Type Description Action MoneyChanged event action","title":"MoneyChanged"},{"location":"reference/VoxelTycoon/Company/#namechanged","text":"Action on when company name changes. Declaration public event Action NameChanged ; Type Description Action NameChanged event action","title":"NameChanged"},{"location":"reference/VoxelTycoon/Company/#methods","text":"","title":"Methods"},{"location":"reference/VoxelTycoon/Company/#addmoneydouble-budgetitem-bool","text":"Adds money to the company. If value is negative takes money away from the company. Declaration public void AddMoney ( double value , BudgetItem budgetItem , bool important = true ) Parameters Type Name Description double value How much money to add BudgetItem budgetItem Category of the income bool important (?)","title":"AddMoney(double, BudgetItem, bool)"},{"location":"reference/VoxelTycoon/Company/#addrunningcostsdouble-budgetitem","text":"Adds running costs to the specified category. Declaration public void AddRunningCosts ( double value , BudgetItem budgetItem ) Parameters Type Name Description double value How much money to add to the running costs BudgetItem budgetItem Category of the costs","title":"AddRunningCosts(double, BudgetItem)"},{"location":"reference/VoxelTycoon/Company/#borrowint","text":"Takes a loan. Declaration public void Borrow ( int count ) Parameters Type Name Description int count Amount of loans to take","title":"Borrow(int)"},{"location":"reference/VoxelTycoon/Company/#canborrowint","text":"Gets whether the company can take a loan. Declaration public bool CanBorrow ( int count ) Parameters Type Name Description int count How many loans company wants to take Returns Type Description bool Whether the company can take that much loans","title":"CanBorrow(int)"},{"location":"reference/VoxelTycoon/Company/#canrepayint","text":"Gets whether the company can take a loan. Declaration public bool CanRepay ( int count ) Parameters Type Name Description int count How many loans company wants to return Returns Type Description bool Whether the company can repay that much loans","title":"CanRepay(int)"},{"location":"reference/VoxelTycoon/Company/#hasenoughmoneydouble","text":"Gets whether the company can afford something. Declaration public bool HasEnoughMoney ( double price ) Parameters Type Name Description double price How much company wants to spend Returns Type Description bool Whether the company can spend that much money","title":"HasEnoughMoney(double)"},{"location":"reference/VoxelTycoon/Company/#initializeloanint-int-double-double","text":"Initializes loans for company. Declaration public void InitializeLoan ( int loanCount , int extraLoanCount , double loanStep , double loanInterest ) Parameters Type Name Description int loanCount Amount of loans int extraLoanCount Additional available loans double loanStep Money given/taken each step double loanInterest Interest of the loan","title":"InitializeLoan(int, int, double, double)"},{"location":"reference/VoxelTycoon/Company/#repayint","text":"Repays loans. Declaration public void Repay ( int count ) Parameters Type Name Description int count Amount of loans to repay","title":"Repay(int)"},{"location":"reference/VoxelTycoon/Item/","text":"Class Item \u00b6 Represents an item Namespace: VoxelTycoon Constructors \u00b6 Item() \u00b6 Creates new item with default values. Declaration public Item () Properties \u00b6 AssetId \u00b6 The item asset's ID. Declaration public int AssetId { get ; set ; } Type Description int ID of the item AssetUri \u00b6 The item asset's URI. Declaration public string AssetUri { get ; set ; } Type Description string URI string of the item Color \u00b6 The color of the item. Declaration public Color Color { get ; set ; } Type Description Color Item color ConveyorLength \u00b6 Probably represents the length of the item on a conveyor belt. Declaration public float ConveyorLength { get ; set ; } Type Description float Length of the item DisplayName \u00b6 Item's display name. Declaration public DisplayString DisplayName { get ; set ; } Type Description DisplayString String (and optional format) representing the item's name IsLiquid \u00b6 Indicates is the item is a liquid. Declaration public bool IsLiquid { get ; set ; } Type Description bool Is true if the item is liquid Mesh \u00b6 3D model of the item. Declaration public Mesh Mesh { get ; set ; } Type Description Mesh Mesh of the item Weight \u00b6 Weight of the item. Declaration public float Weight { get ; set ; } Type Description float Item's weight","title":"Item"},{"location":"reference/VoxelTycoon/Item/#class-item","text":"Represents an item Namespace: VoxelTycoon","title":"Class Item"},{"location":"reference/VoxelTycoon/Item/#constructors","text":"","title":"Constructors"},{"location":"reference/VoxelTycoon/Item/#item","text":"Creates new item with default values. Declaration public Item ()","title":"Item()"},{"location":"reference/VoxelTycoon/Item/#properties","text":"","title":"Properties"},{"location":"reference/VoxelTycoon/Item/#assetid","text":"The item asset's ID. Declaration public int AssetId { get ; set ; } Type Description int ID of the item","title":"AssetId"},{"location":"reference/VoxelTycoon/Item/#asseturi","text":"The item asset's URI. Declaration public string AssetUri { get ; set ; } Type Description string URI string of the item","title":"AssetUri"},{"location":"reference/VoxelTycoon/Item/#color","text":"The color of the item. Declaration public Color Color { get ; set ; } Type Description Color Item color","title":"Color"},{"location":"reference/VoxelTycoon/Item/#conveyorlength","text":"Probably represents the length of the item on a conveyor belt. Declaration public float ConveyorLength { get ; set ; } Type Description float Length of the item","title":"ConveyorLength"},{"location":"reference/VoxelTycoon/Item/#displayname","text":"Item's display name. Declaration public DisplayString DisplayName { get ; set ; } Type Description DisplayString String (and optional format) representing the item's name","title":"DisplayName"},{"location":"reference/VoxelTycoon/Item/#isliquid","text":"Indicates is the item is a liquid. Declaration public bool IsLiquid { get ; set ; } Type Description bool Is true if the item is liquid","title":"IsLiquid"},{"location":"reference/VoxelTycoon/Item/#mesh","text":"3D model of the item. Declaration public Mesh Mesh { get ; set ; } Type Description Mesh Mesh of the item","title":"Mesh"},{"location":"reference/VoxelTycoon/Item/#weight","text":"Weight of the item. Declaration public float Weight { get ; set ; } Type Description float Item's weight","title":"Weight"},{"location":"reference/VoxelTycoon/Region/","text":"Class Region \u00b6 Represents a region Namespace: VoxelTycoon Constructors \u00b6 Region(int, Xz, Xz, Xz, int, int) \u00b6 Creates a new region. Declaration public Region ( int id , Xz minIndex , Xz maxIndex , Xz center , int tier , int subregionSize ) Type Name Description int id Region's ID Xz minIndex Minimum index Xz maxIndex Maximum index Xz center Center of the region int tier Tier of the region int subregionSize Size of the region Region(StateBinaryReader) \u00b6 Creates a new region from provided binary reader. Declaration public Region ( StateBinaryReader reader ) Type Name Description StateBinaryReader reader Reader with region values Properties \u00b6 Area \u00b6 Represents the region's area. Declaration public HashSet < Xz > Area { get ; } Type Description HashSet< Xz > List of Xzs included in the region Biome \u00b6 Region's biome. Declaration public Biome Biome { get ; } Type Description Biome Region's biome Center \u00b6 Region's center. Declaration public Xz Center { get ; } Type Description Xz Coordinates(Xz) of the region's center Cities \u00b6 Region's cities. Declaration public ImmutableList < Cities . City > Cities { get ; } Type Description ImmutableList< City > List of the region's cities ColliderPath \u00b6 Region's collider path. Declaration public Vector2 [] ColliderPath { get ; } Type Description Vector2[] List of 2D vectors representing the path Deposits \u00b6 Region's deposits. Declaration public ImmutableList < Deposit > Deposits { get ; } Type Description ImmutableList< Deposit > List of the region's deposits Id \u00b6 Region's ID. Declaration public int Id { get ; } Type Description int Region's ID MaxIndex \u00b6 Region's max index. Declaration public Xz MaxIndex { get ; } Type Description Xz Region's max index MinIndex \u00b6 Region's min index. Declaration public Xz MinIndex { get ; } Type Description Xz Region's min index Name \u00b6 Region's name. Declaration public string Name { get ; set ; } Type Description string Region's name Price \u00b6 Region's price. Declaration public double Price { get ; } Type Description double Region's price State \u00b6 Current state of the region. Declaration public RegionState State { get ; } Type Description RegionState Region's state Subregions \u00b6 Sub regions of the region. Declaration public List < Xz > Subregions { get ; } Type Description List< Xz > List of the sub regions Tier \u00b6 Region's tier. Declaration public int Tier { get ; } Type Description int Region's tier Methods \u00b6 GetDistance(Xz) \u00b6 Gets the distance beween ? . Declaration public int GetDistance ( Xz regionIndex ) Parameters Type Name Description int regionIndex ? InvalidateBorderOpacity() \u00b6 Invalidates the region's border opacity. Declaration public void InvalidateBorderOpacity () InvalidateBorderVisibility() \u00b6 Invalidates the region's border visibility. Declaration public void InvalidateBorderVisibility () OnDrawGizmos() \u00b6 Probably called when gizmos is drawn. Declaration public void OnDrawGizmos () RegisterDeposit(Deposit) \u00b6 Registers a deposit in the region. Declaration public void RegisterDeposit ( Deposit deposit ) Parameters Type Name Description Deposit deposit Deposit to register SetState(RegionState) \u00b6 Sets the region's state. Declaration public void SetState ( RegionState state ) Parameters Type Name Description RegionState state Region state to be set on the region UnregisterDeposit(Deposit) \u00b6 Unregisters a deposit in the region. Declaration public void UnregisterDeposit ( Deposit deposit ) Parameters Type Name Description Deposit deposit Deposit to unregister Write(StateBinaryWriter) \u00b6 Probably writes the region's values. Declaration public void Write ( StateBinaryWriter writer ) Type Name Description StateBinaryWriter writer Writer with region values","title":"Region"},{"location":"reference/VoxelTycoon/Region/#class-region","text":"Represents a region Namespace: VoxelTycoon","title":"Class Region"},{"location":"reference/VoxelTycoon/Region/#constructors","text":"","title":"Constructors"},{"location":"reference/VoxelTycoon/Region/#regionint-xz-xz-xz-int-int","text":"Creates a new region. Declaration public Region ( int id , Xz minIndex , Xz maxIndex , Xz center , int tier , int subregionSize ) Type Name Description int id Region's ID Xz minIndex Minimum index Xz maxIndex Maximum index Xz center Center of the region int tier Tier of the region int subregionSize Size of the region","title":"Region(int, Xz, Xz, Xz, int, int)"},{"location":"reference/VoxelTycoon/Region/#regionstatebinaryreader","text":"Creates a new region from provided binary reader. Declaration public Region ( StateBinaryReader reader ) Type Name Description StateBinaryReader reader Reader with region values","title":"Region(StateBinaryReader)"},{"location":"reference/VoxelTycoon/Region/#properties","text":"","title":"Properties"},{"location":"reference/VoxelTycoon/Region/#area","text":"Represents the region's area. Declaration public HashSet < Xz > Area { get ; } Type Description HashSet< Xz > List of Xzs included in the region","title":"Area"},{"location":"reference/VoxelTycoon/Region/#biome","text":"Region's biome. Declaration public Biome Biome { get ; } Type Description Biome Region's biome","title":"Biome"},{"location":"reference/VoxelTycoon/Region/#center","text":"Region's center. Declaration public Xz Center { get ; } Type Description Xz Coordinates(Xz) of the region's center","title":"Center"},{"location":"reference/VoxelTycoon/Region/#cities","text":"Region's cities. Declaration public ImmutableList < Cities . City > Cities { get ; } Type Description ImmutableList< City > List of the region's cities","title":"Cities"},{"location":"reference/VoxelTycoon/Region/#colliderpath","text":"Region's collider path. Declaration public Vector2 [] ColliderPath { get ; } Type Description Vector2[] List of 2D vectors representing the path","title":"ColliderPath"},{"location":"reference/VoxelTycoon/Region/#deposits","text":"Region's deposits. Declaration public ImmutableList < Deposit > Deposits { get ; } Type Description ImmutableList< Deposit > List of the region's deposits","title":"Deposits"},{"location":"reference/VoxelTycoon/Region/#id","text":"Region's ID. Declaration public int Id { get ; } Type Description int Region's ID","title":"Id"},{"location":"reference/VoxelTycoon/Region/#maxindex","text":"Region's max index. Declaration public Xz MaxIndex { get ; } Type Description Xz Region's max index","title":"MaxIndex"},{"location":"reference/VoxelTycoon/Region/#minindex","text":"Region's min index. Declaration public Xz MinIndex { get ; } Type Description Xz Region's min index","title":"MinIndex"},{"location":"reference/VoxelTycoon/Region/#name","text":"Region's name. Declaration public string Name { get ; set ; } Type Description string Region's name","title":"Name"},{"location":"reference/VoxelTycoon/Region/#price","text":"Region's price. Declaration public double Price { get ; } Type Description double Region's price","title":"Price"},{"location":"reference/VoxelTycoon/Region/#state","text":"Current state of the region. Declaration public RegionState State { get ; } Type Description RegionState Region's state","title":"State"},{"location":"reference/VoxelTycoon/Region/#subregions","text":"Sub regions of the region. Declaration public List < Xz > Subregions { get ; } Type Description List< Xz > List of the sub regions","title":"Subregions"},{"location":"reference/VoxelTycoon/Region/#tier","text":"Region's tier. Declaration public int Tier { get ; } Type Description int Region's tier","title":"Tier"},{"location":"reference/VoxelTycoon/Region/#methods","text":"","title":"Methods"},{"location":"reference/VoxelTycoon/Region/#getdistancexz","text":"Gets the distance beween ? . Declaration public int GetDistance ( Xz regionIndex ) Parameters Type Name Description int regionIndex ?","title":"GetDistance(Xz)"},{"location":"reference/VoxelTycoon/Region/#invalidateborderopacity","text":"Invalidates the region's border opacity. Declaration public void InvalidateBorderOpacity ()","title":"InvalidateBorderOpacity()"},{"location":"reference/VoxelTycoon/Region/#invalidatebordervisibility","text":"Invalidates the region's border visibility. Declaration public void InvalidateBorderVisibility ()","title":"InvalidateBorderVisibility()"},{"location":"reference/VoxelTycoon/Region/#ondrawgizmos","text":"Probably called when gizmos is drawn. Declaration public void OnDrawGizmos ()","title":"OnDrawGizmos()"},{"location":"reference/VoxelTycoon/Region/#registerdepositdeposit","text":"Registers a deposit in the region. Declaration public void RegisterDeposit ( Deposit deposit ) Parameters Type Name Description Deposit deposit Deposit to register","title":"RegisterDeposit(Deposit)"},{"location":"reference/VoxelTycoon/Region/#setstateregionstate","text":"Sets the region's state. Declaration public void SetState ( RegionState state ) Parameters Type Name Description RegionState state Region state to be set on the region","title":"SetState(RegionState)"},{"location":"reference/VoxelTycoon/Region/#unregisterdepositdeposit","text":"Unregisters a deposit in the region. Declaration public void UnregisterDeposit ( Deposit deposit ) Parameters Type Name Description Deposit deposit Deposit to unregister","title":"UnregisterDeposit(Deposit)"},{"location":"reference/VoxelTycoon/Region/#writestatebinarywriter","text":"Probably writes the region's values. Declaration public void Write ( StateBinaryWriter writer ) Type Name Description StateBinaryWriter writer Writer with region values","title":"Write(StateBinaryWriter)"},{"location":"reference/VoxelTycoon/RegionState/","text":"Enum RegionState \u00b6 Represents a regionstate Namespace: VoxelTycoon Values \u00b6 Name Description Visible The region is visible Unlocked The region is unlocked Hidden The region is hidden","title":"RegionState"},{"location":"reference/VoxelTycoon/RegionState/#enum-regionstate","text":"Represents a regionstate Namespace: VoxelTycoon","title":"Enum RegionState"},{"location":"reference/VoxelTycoon/RegionState/#values","text":"Name Description Visible The region is visible Unlocked The region is unlocked Hidden The region is hidden","title":"Values"},{"location":"reference/VoxelTycoon/Xz/","text":"Struct Xz \u00b6 Represents a 2D coordinate. Namespace: VoxelTycoon Constructors \u00b6 Xz(int) \u00b6 Creates a new Xz from an integer. X and Z members are set to the integer. Declaration public Xz ( int xz ) Type Name Description int xz Value given to X and Z Xz(int, int) \u00b6 Creates a new Xz from two integers representing X and Z. Declaration public Xz ( int x , int z ) Type Name Description int x X coordinate int z Z coordinate Xz(Vector3) \u00b6 Creates a new Xz from a 3D vector. Only the x and z coordinates are used. Declaration public Xz ( Vector3 vector3 ) Type Name Description Vector3 vector3 vector3 .x is given to X and vector3 .z to Z Members \u00b6 X \u00b6 X coordinate. Declaration public int X Type Description int X coordinate Z \u00b6 Z coordinate. Declaration public int Z Type Description int Z coordinate Properties \u00b6 Forward \u00b6 Xz forward instance, equivalent to Xz(0, 1). Declaration public static Xz Forward { get ; } Type Description Xz Xz(0, 1) Right \u00b6 Xz right instance, equivalent to Xz(1, 0). Declaration public static Xz Right { get ; } Type Description Xz Xz(1, 0) One \u00b6 Xz one instance, equivalent to Xz(1, 1). Declaration public static Xz One { get ; } Type Description Xz Xz(1, 1) Zero \u00b6 Xz zero instance, equivalent to Xz(0, 0). Declaration public static Xz Zero { get ; } Type Description Xz Xz(0, 0) Volume \u00b6 Xz's volume, obtained by multiplying X and Z members. Declaration public int Volume { get ; } Type Description int Equals X*Z this[int] \u00b6 Gets or sets the X and Z coordinates depending on the given value and index. Declaration public int this [ int i ] { get ; set ; } Parameters Type Name Description int i X corresponds to i =0 and Z to i =1 Returns Type Description int X or Z depending on i 's value Methods \u00b6 Abs() \u00b6 Gets the absolute version of the Xz, equivalent to Xz(abs(x), abs(z)). Declaration public Xz Abs () Type Description Xz Xz(abs(x), abs(z))z Deconstruct(int, int) \u00b6 Deconstructs the Xz. Returns x and z values. Declaration public void Deconstruct ( out int x , out int z ) Type Name Description out int x X coordinate out int z Z coordinate Distance(Xz, Xz) \u00b6 Returns the distance between two Xz. Declaration public static float Distance ( Xz xz1 , Xz xz2 ) Parameters Type Name Description Xz xz1 First Xz Xz xz2 Second Xz Returns Type Description float Distance between xz1 and xz2 DistanceManhattan(Xz, Xz) \u00b6 Returns the manhattan (taxicab) distance between two Xz. Declaration public static float DistanceManhattan ( Xz xz1 , Xz xz2 ) Parameters Type Name Description Xz xz1 First Xz Xz xz2 Second Xz Returns Type Description float Manhattan distance between xz1 and xz2 Equals(object) \u00b6 Tests if the Xz is equals to the object. They are equal if they are both Xz and their coordinates are equal. Declaration public override bool Equals ( object obj ) Parameters Type Name Description object obj Object to compare the Xz with Returns Type Description bool Returns true if obj is equals to the Xz Equals(Xz) \u00b6 Tests if two Xz are equals. Two Xzs are equal if their X and Z coordinates are equal. Declaration public bool Equals ( Xz other ) Parameters Type Name Description Xz other Xz to compare with Returns Type Description bool Returns true if the two Xz are equal GetHashCode() \u00b6 Returns the hash code of the Xz. Declaration public override int GetHashCode () Returns Type Description int Value of the hash code Max() \u00b6 Returns the max of the coordinates of the Xz. Declaration public int Max () Returns Type Description int Max between X and Z Min() \u00b6 Returns the min of the coordinates of the Xz. Declaration public int Min () Returns Type Description int Min between X and Z Max(Xz, Xz) \u00b6 Returns a new Xz with the maximum of the coordinates between the two Xzs. Declaration public static Xz Max ( Xz xz1 , Xz xz2 ) Parameters Type Name Description Xz xz1 First Xz Xz xz2 Second Xz Returns Type Description Xz Max Xz between xz1 and xz2 Min(Xz, Xz) \u00b6 Returns a new Xz with the minimum of the coordinates between the two Xzs. Declaration public static Xz Min ( Xz xz1 , Xz xz2 ) Parameters Type Name Description Xz xz1 First Xz Xz xz2 Second Xz Returns Type Description Xz Min Xz between xz1 and xz2 Rotate(BuildingRotation, Xz) \u00b6 Rotate and translates a Xz. Declaration public Xz Rotate ( BuildingRotation rotation , Xz translation = null ) Parameters Type Name Description BuildingRotation rotation Rotation to apply to the Xz Xz translation Optional translation to apply to the Xz Returns Type Description Xz Rotated and translated version of the Xz SquaredDistance(Xz, Xz) \u00b6 Returns the squared distance between two Xz. Declaration public static int SquaredDistance ( Xz xz1 , Xz xz2 ) Parameters Type Name Description Xz xz1 First Xz Xz xz2 Second Xz Returns Type Description int Squared distance between xz1 and xz2 ToString() \u00b6 Returns a string representing the Xz. Declaration public override string ToString () Returns Type Description string String representing the Xz Operators \u00b6 +(Xz, Xz) \u00b6 Returns the sum of two Xz which is calculated by the sum of each coordinates. Declaration public static Xz operator +( Xz xz , Xz xz2 ) Parameters Type Name Description Xz xz First Xz Xz xz2 Second Xz Returns Type Description Xz Sum of xz and xz2 -(Xz, Xz) \u00b6 Returns the substraction of two Xz which is calculated by the substraction of each coordinates. Declaration public static Xz operator -( Xz xz , Xz xz2 ) Parameters Type Name Description Xz xz First Xz Xz xz2 Second Xz Returns Type Description Xz Substraction of xz and xz2 *(Xz, Xz) \u00b6 Returns the multiplication of two Xz which is calculated by the multiplication of each coordinates. Declaration public static Xz operator *( Xz xz1 , Xz xz2 ) Parameters Type Name Description Xz xz1 First Xz Xz xz2 Second Xz Returns Type Description Xz Multiplication of xz1 and xz2 /(Xz, Xz) \u00b6 Returns the division of two Xz which is calculated by the division of each coordinates. Declaration public static Xz operator /( Xz xz1 , Xz xz2 ) Parameters Type Name Description Xz xz1 First Xz Xz xz2 Second Xz Returns Type Description Xz Division of xz1 and xz2 *(Xz, int) \u00b6 Returns the multiplication between an integer and a Xz. The result is calculated by multiplying each Xz coordinate by the integer. Declaration public static Xz operator *( Xz xz , int a ) Parameters Type Name Description Xz xz Xz to multiply int a Integer to multiply Returns Type Description Xz Multiplication of xz by a /(Xz, int) \u00b6 Returns the division of a Xz by an integer. The result is calculated by dividing each Xz coordinate by the integer. Declaration public static Xz operator /( Xz xz , int a ) Parameters Type Name Description Xz xz Divendent int a Divider Returns Type Description Xz Division of xz by a /(Xz, float) \u00b6 Returns the division of Xz by a float in a Vector3. The result is calculated by dividing each Xz coordinate by the float. The Y coordinate is set to 0. Declaration public static Vector3 operator /( Xz xz , float a ) Parameters Type Name Description Xz xz Divendent float a Divider Returns Type Description Vector3 Contains the division of xz by a -(Xz) \u00b6 Returns the opposite of the Xz which is calculated by getting the opposite of each coordinate. Declaration public static Xz operator -( Xz xz ) Parameters Type Name Description Xz xz Xz provided Returns Type Description Xz Opposite of xz Vector2(Xz) \u00b6 Returns a Vector2 from a Xz. Declaration public static implicit operator Vector2 ( Xz xz ) Parameters Type Name Description Xz xz Xz provided Returns Type Description Vector2 Contains xz 's coordinates in its X and Y coordinates Vector3(Xz) \u00b6 Returns a Vector3 from a Xz. The Y coordinate is set to 0. Declaration public static explicit operator Vector3 ( Xz xz ) Parameters Type Name Description Xz xz Xz provided Returns Type Description Vector3 Contains xz 's coordinates in its X and Z coordinates Xyz(Xz) \u00b6 Returns a Xyz with a Xz's coordinates. The Y coordinate is set to 0. Declaration public static explicit operator Xyz ( Xz xz ) Parameters Type Name Description Xz xz Xz provided Returns Type Description Xyz Contains xz 's coordinates in its X and Z coordinates Xz(Xyz) \u00b6 Returns a Xz with a Xyz 's coordinates. The Y coordinate is not kept. Declaration public static explicit operator Xyz ( Xz xz ) Parameters Type Name Description Xyz xyz Xyz provided Returns Type Description Xz Contains xyz 's X and Z coordinates ==(Xz, Xz) \u00b6 Returns true if the two provided Xzs are equal. Declaration public static bool operator ==( Xz a , Xz b ) Parameters Type Name Description Xz a First Xz Xz b Second Xz Returns Type Description bool True if a and b are equal !=(Xz, Xz) \u00b6 Returns false if the two provided Xzs are equal. Declaration public static bool operator !=( Xz a , Xz b ) Parameters Type Name Description Xz a First Xz Xz b Second Xz Returns Type Description bool False if a and b are equal","title":"Xz"},{"location":"reference/VoxelTycoon/Xz/#struct-xz","text":"Represents a 2D coordinate. Namespace: VoxelTycoon","title":"Struct Xz"},{"location":"reference/VoxelTycoon/Xz/#constructors","text":"","title":"Constructors"},{"location":"reference/VoxelTycoon/Xz/#xzint","text":"Creates a new Xz from an integer. X and Z members are set to the integer. Declaration public Xz ( int xz ) Type Name Description int xz Value given to X and Z","title":"Xz(int)"},{"location":"reference/VoxelTycoon/Xz/#xzint-int","text":"Creates a new Xz from two integers representing X and Z. Declaration public Xz ( int x , int z ) Type Name Description int x X coordinate int z Z coordinate","title":"Xz(int, int)"},{"location":"reference/VoxelTycoon/Xz/#xzvector3","text":"Creates a new Xz from a 3D vector. Only the x and z coordinates are used. Declaration public Xz ( Vector3 vector3 ) Type Name Description Vector3 vector3 vector3 .x is given to X and vector3 .z to Z","title":"Xz(Vector3)"},{"location":"reference/VoxelTycoon/Xz/#members","text":"","title":"Members"},{"location":"reference/VoxelTycoon/Xz/#x","text":"X coordinate. Declaration public int X Type Description int X coordinate","title":"X"},{"location":"reference/VoxelTycoon/Xz/#z","text":"Z coordinate. Declaration public int Z Type Description int Z coordinate","title":"Z"},{"location":"reference/VoxelTycoon/Xz/#properties","text":"","title":"Properties"},{"location":"reference/VoxelTycoon/Xz/#forward","text":"Xz forward instance, equivalent to Xz(0, 1). Declaration public static Xz Forward { get ; } Type Description Xz Xz(0, 1)","title":"Forward"},{"location":"reference/VoxelTycoon/Xz/#right","text":"Xz right instance, equivalent to Xz(1, 0). Declaration public static Xz Right { get ; } Type Description Xz Xz(1, 0)","title":"Right"},{"location":"reference/VoxelTycoon/Xz/#one","text":"Xz one instance, equivalent to Xz(1, 1). Declaration public static Xz One { get ; } Type Description Xz Xz(1, 1)","title":"One"},{"location":"reference/VoxelTycoon/Xz/#zero","text":"Xz zero instance, equivalent to Xz(0, 0). Declaration public static Xz Zero { get ; } Type Description Xz Xz(0, 0)","title":"Zero"},{"location":"reference/VoxelTycoon/Xz/#volume","text":"Xz's volume, obtained by multiplying X and Z members. Declaration public int Volume { get ; } Type Description int Equals X*Z","title":"Volume"},{"location":"reference/VoxelTycoon/Xz/#thisint","text":"Gets or sets the X and Z coordinates depending on the given value and index. Declaration public int this [ int i ] { get ; set ; } Parameters Type Name Description int i X corresponds to i =0 and Z to i =1 Returns Type Description int X or Z depending on i 's value","title":"this[int]"},{"location":"reference/VoxelTycoon/Xz/#methods","text":"","title":"Methods"},{"location":"reference/VoxelTycoon/Xz/#abs","text":"Gets the absolute version of the Xz, equivalent to Xz(abs(x), abs(z)). Declaration public Xz Abs () Type Description Xz Xz(abs(x), abs(z))z","title":"Abs()"},{"location":"reference/VoxelTycoon/Xz/#deconstructint-int","text":"Deconstructs the Xz. Returns x and z values. Declaration public void Deconstruct ( out int x , out int z ) Type Name Description out int x X coordinate out int z Z coordinate","title":"Deconstruct(int, int)"},{"location":"reference/VoxelTycoon/Xz/#distancexz-xz","text":"Returns the distance between two Xz. Declaration public static float Distance ( Xz xz1 , Xz xz2 ) Parameters Type Name Description Xz xz1 First Xz Xz xz2 Second Xz Returns Type Description float Distance between xz1 and xz2","title":"Distance(Xz, Xz)"},{"location":"reference/VoxelTycoon/Xz/#distancemanhattanxz-xz","text":"Returns the manhattan (taxicab) distance between two Xz. Declaration public static float DistanceManhattan ( Xz xz1 , Xz xz2 ) Parameters Type Name Description Xz xz1 First Xz Xz xz2 Second Xz Returns Type Description float Manhattan distance between xz1 and xz2","title":"DistanceManhattan(Xz, Xz)"},{"location":"reference/VoxelTycoon/Xz/#equalsobject","text":"Tests if the Xz is equals to the object. They are equal if they are both Xz and their coordinates are equal. Declaration public override bool Equals ( object obj ) Parameters Type Name Description object obj Object to compare the Xz with Returns Type Description bool Returns true if obj is equals to the Xz","title":"Equals(object)"},{"location":"reference/VoxelTycoon/Xz/#equalsxz","text":"Tests if two Xz are equals. Two Xzs are equal if their X and Z coordinates are equal. Declaration public bool Equals ( Xz other ) Parameters Type Name Description Xz other Xz to compare with Returns Type Description bool Returns true if the two Xz are equal","title":"Equals(Xz)"},{"location":"reference/VoxelTycoon/Xz/#gethashcode","text":"Returns the hash code of the Xz. Declaration public override int GetHashCode () Returns Type Description int Value of the hash code","title":"GetHashCode()"},{"location":"reference/VoxelTycoon/Xz/#max","text":"Returns the max of the coordinates of the Xz. Declaration public int Max () Returns Type Description int Max between X and Z","title":"Max()"},{"location":"reference/VoxelTycoon/Xz/#min","text":"Returns the min of the coordinates of the Xz. Declaration public int Min () Returns Type Description int Min between X and Z","title":"Min()"},{"location":"reference/VoxelTycoon/Xz/#maxxz-xz","text":"Returns a new Xz with the maximum of the coordinates between the two Xzs. Declaration public static Xz Max ( Xz xz1 , Xz xz2 ) Parameters Type Name Description Xz xz1 First Xz Xz xz2 Second Xz Returns Type Description Xz Max Xz between xz1 and xz2","title":"Max(Xz, Xz)"},{"location":"reference/VoxelTycoon/Xz/#minxz-xz","text":"Returns a new Xz with the minimum of the coordinates between the two Xzs. Declaration public static Xz Min ( Xz xz1 , Xz xz2 ) Parameters Type Name Description Xz xz1 First Xz Xz xz2 Second Xz Returns Type Description Xz Min Xz between xz1 and xz2","title":"Min(Xz, Xz)"},{"location":"reference/VoxelTycoon/Xz/#rotatebuildingrotation-xz","text":"Rotate and translates a Xz. Declaration public Xz Rotate ( BuildingRotation rotation , Xz translation = null ) Parameters Type Name Description BuildingRotation rotation Rotation to apply to the Xz Xz translation Optional translation to apply to the Xz Returns Type Description Xz Rotated and translated version of the Xz","title":"Rotate(BuildingRotation, Xz)"},{"location":"reference/VoxelTycoon/Xz/#squareddistancexz-xz","text":"Returns the squared distance between two Xz. Declaration public static int SquaredDistance ( Xz xz1 , Xz xz2 ) Parameters Type Name Description Xz xz1 First Xz Xz xz2 Second Xz Returns Type Description int Squared distance between xz1 and xz2","title":"SquaredDistance(Xz, Xz)"},{"location":"reference/VoxelTycoon/Xz/#tostring","text":"Returns a string representing the Xz. Declaration public override string ToString () Returns Type Description string String representing the Xz","title":"ToString()"},{"location":"reference/VoxelTycoon/Xz/#operators","text":"","title":"Operators"},{"location":"reference/VoxelTycoon/Xz/#xz-xz","text":"Returns the sum of two Xz which is calculated by the sum of each coordinates. Declaration public static Xz operator +( Xz xz , Xz xz2 ) Parameters Type Name Description Xz xz First Xz Xz xz2 Second Xz Returns Type Description Xz Sum of xz and xz2","title":"+(Xz, Xz)"},{"location":"reference/VoxelTycoon/Xz/#-xz-xz","text":"Returns the substraction of two Xz which is calculated by the substraction of each coordinates. Declaration public static Xz operator -( Xz xz , Xz xz2 ) Parameters Type Name Description Xz xz First Xz Xz xz2 Second Xz Returns Type Description Xz Substraction of xz and xz2","title":"-(Xz, Xz)"},{"location":"reference/VoxelTycoon/Xz/#xz-xz_1","text":"Returns the multiplication of two Xz which is calculated by the multiplication of each coordinates. Declaration public static Xz operator *( Xz xz1 , Xz xz2 ) Parameters Type Name Description Xz xz1 First Xz Xz xz2 Second Xz Returns Type Description Xz Multiplication of xz1 and xz2","title":"*(Xz, Xz)"},{"location":"reference/VoxelTycoon/Xz/#xz-xz_2","text":"Returns the division of two Xz which is calculated by the division of each coordinates. Declaration public static Xz operator /( Xz xz1 , Xz xz2 ) Parameters Type Name Description Xz xz1 First Xz Xz xz2 Second Xz Returns Type Description Xz Division of xz1 and xz2","title":"/(Xz, Xz)"},{"location":"reference/VoxelTycoon/Xz/#xz-int","text":"Returns the multiplication between an integer and a Xz. The result is calculated by multiplying each Xz coordinate by the integer. Declaration public static Xz operator *( Xz xz , int a ) Parameters Type Name Description Xz xz Xz to multiply int a Integer to multiply Returns Type Description Xz Multiplication of xz by a","title":"*(Xz, int)"},{"location":"reference/VoxelTycoon/Xz/#xz-int_1","text":"Returns the division of a Xz by an integer. The result is calculated by dividing each Xz coordinate by the integer. Declaration public static Xz operator /( Xz xz , int a ) Parameters Type Name Description Xz xz Divendent int a Divider Returns Type Description Xz Division of xz by a","title":"/(Xz, int)"},{"location":"reference/VoxelTycoon/Xz/#xz-float","text":"Returns the division of Xz by a float in a Vector3. The result is calculated by dividing each Xz coordinate by the float. The Y coordinate is set to 0. Declaration public static Vector3 operator /( Xz xz , float a ) Parameters Type Name Description Xz xz Divendent float a Divider Returns Type Description Vector3 Contains the division of xz by a","title":"/(Xz, float)"},{"location":"reference/VoxelTycoon/Xz/#-xz","text":"Returns the opposite of the Xz which is calculated by getting the opposite of each coordinate. Declaration public static Xz operator -( Xz xz ) Parameters Type Name Description Xz xz Xz provided Returns Type Description Xz Opposite of xz","title":"-(Xz)"},{"location":"reference/VoxelTycoon/Xz/#vector2xz","text":"Returns a Vector2 from a Xz. Declaration public static implicit operator Vector2 ( Xz xz ) Parameters Type Name Description Xz xz Xz provided Returns Type Description Vector2 Contains xz 's coordinates in its X and Y coordinates","title":"Vector2(Xz)"},{"location":"reference/VoxelTycoon/Xz/#vector3xz","text":"Returns a Vector3 from a Xz. The Y coordinate is set to 0. Declaration public static explicit operator Vector3 ( Xz xz ) Parameters Type Name Description Xz xz Xz provided Returns Type Description Vector3 Contains xz 's coordinates in its X and Z coordinates","title":"Vector3(Xz)"},{"location":"reference/VoxelTycoon/Xz/#xyzxz","text":"Returns a Xyz with a Xz's coordinates. The Y coordinate is set to 0. Declaration public static explicit operator Xyz ( Xz xz ) Parameters Type Name Description Xz xz Xz provided Returns Type Description Xyz Contains xz 's coordinates in its X and Z coordinates","title":"Xyz(Xz)"},{"location":"reference/VoxelTycoon/Xz/#xzxyz","text":"Returns a Xz with a Xyz 's coordinates. The Y coordinate is not kept. Declaration public static explicit operator Xyz ( Xz xz ) Parameters Type Name Description Xyz xyz Xyz provided Returns Type Description Xz Contains xyz 's X and Z coordinates","title":"Xz(Xyz)"},{"location":"reference/VoxelTycoon/Xz/#xz-xz_3","text":"Returns true if the two provided Xzs are equal. Declaration public static bool operator ==( Xz a , Xz b ) Parameters Type Name Description Xz a First Xz Xz b Second Xz Returns Type Description bool True if a and b are equal","title":"==(Xz, Xz)"},{"location":"reference/VoxelTycoon/Xz/#xz-xz_4","text":"Returns false if the two provided Xzs are equal. Declaration public static bool operator !=( Xz a , Xz b ) Parameters Type Name Description Xz a First Xz Xz b Second Xz Returns Type Description bool False if a and b are equal","title":"!=(Xz, Xz)"},{"location":"reference/VoxelTycoon/Modding/Mod/","text":"Abstract Class Mod \u00b6 Represents a script mod Namespace: VoxelTycoon.Modding Constructors \u00b6 This class is abstract (must have implementation, can only be inherited) public abstract class Mod Methods \u00b6 Deinitialize() \u00b6 Called when deinitializing a mod Declaration protected internal virtual void Deinitialize () Initialize() \u00b6 Called when initializing a mod Declaration protected internal virtual void Initialize () OnGameStarted() \u00b6 Called when game started (loaded) Declaration protected internal virtual void OnGameStarted () OnGameStarting() \u00b6 Called when game is starting (loading) Declaration protected internal virtual void OnGameStarting () OnLateUpdate() \u00b6 Called with Unity's OnLateUpdate Declaration protected internal virtual void OnLateUpdate () OnModsInitialized() \u00b6 Called when all mods have been initialized Declaration protected internal virtual void OnModsInitialized () OnUpdate() \u00b6 Called with Unity's OnUpdate Declaration protected internal virtual void OnUpdate () Read(StateBinaryReader) \u00b6 Called when loading a game. Allows a mod to load data from the save file. Declaration protected internal virtual void Read ( StateBinaryReader reader ) Parameters Type Name Description StateBinaryReader reader Used to load the data Write(StateBinaryWriter) \u00b6 Called when saving a game. Allows a mod to store data from the save file. Declaration protected internal virtual void Write ( StateBinaryWriter writer ) Parameters Type Name Description StateBinaryWriter writer Used to store the data","title":"Mod"},{"location":"reference/VoxelTycoon/Modding/Mod/#abstract-class-mod","text":"Represents a script mod Namespace: VoxelTycoon.Modding","title":"Abstract Class Mod"},{"location":"reference/VoxelTycoon/Modding/Mod/#constructors","text":"This class is abstract (must have implementation, can only be inherited) public abstract class Mod","title":"Constructors"},{"location":"reference/VoxelTycoon/Modding/Mod/#methods","text":"","title":"Methods"},{"location":"reference/VoxelTycoon/Modding/Mod/#deinitialize","text":"Called when deinitializing a mod Declaration protected internal virtual void Deinitialize ()","title":"Deinitialize()"},{"location":"reference/VoxelTycoon/Modding/Mod/#initialize","text":"Called when initializing a mod Declaration protected internal virtual void Initialize ()","title":"Initialize()"},{"location":"reference/VoxelTycoon/Modding/Mod/#ongamestarted","text":"Called when game started (loaded) Declaration protected internal virtual void OnGameStarted ()","title":"OnGameStarted()"},{"location":"reference/VoxelTycoon/Modding/Mod/#ongamestarting","text":"Called when game is starting (loading) Declaration protected internal virtual void OnGameStarting ()","title":"OnGameStarting()"},{"location":"reference/VoxelTycoon/Modding/Mod/#onlateupdate","text":"Called with Unity's OnLateUpdate Declaration protected internal virtual void OnLateUpdate ()","title":"OnLateUpdate()"},{"location":"reference/VoxelTycoon/Modding/Mod/#onmodsinitialized","text":"Called when all mods have been initialized Declaration protected internal virtual void OnModsInitialized ()","title":"OnModsInitialized()"},{"location":"reference/VoxelTycoon/Modding/Mod/#onupdate","text":"Called with Unity's OnUpdate Declaration protected internal virtual void OnUpdate ()","title":"OnUpdate()"},{"location":"reference/VoxelTycoon/Modding/Mod/#readstatebinaryreader","text":"Called when loading a game. Allows a mod to load data from the save file. Declaration protected internal virtual void Read ( StateBinaryReader reader ) Parameters Type Name Description StateBinaryReader reader Used to load the data","title":"Read(StateBinaryReader)"},{"location":"reference/VoxelTycoon/Modding/Mod/#writestatebinarywriter","text":"Called when saving a game. Allows a mod to store data from the save file. Declaration protected internal virtual void Write ( StateBinaryWriter writer ) Parameters Type Name Description StateBinaryWriter writer Used to store the data","title":"Write(StateBinaryWriter)"}]}